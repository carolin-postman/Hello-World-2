{
  "info": {
    "_postman_id": "ed182aab-d6cb-4465-8c70-d27b2140b879",
    "name": "Box Platform API",
    "description": "[Box Platform](https://box.dev) provides functionality to provide access to content stored within [Box](https://box.com). It provides endpoints for basic manipulation of files and folders, management of users within an enterprise, as well as more complex topics such as legal holds and retention policies.",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "Authorization",
      "item": [
        {
          "name": "Authorize user",
          "_postman_id": "1e3cf0a2-72b7-4eb2-bc90-76804d98973b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{account.box.com}}/api/oauth2/authorize?response_type=code&client_id={{client_id}}&redirect_uri=http://example.com/auth/callback",
              "protocol": "https",
              "host": [
                "{{account.box.com}}"
              ],
              "path": [
                "api",
                "oauth2",
                "authorize"
              ],
              "query": [
                {
                  "key": "response_type",
                  "value": "code",
                  "description": "The type of response we'd like to receive."
                },
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "description": "The Client ID of the application that is requesting to authenticate\nthe user. To get the Client ID for your application, log in to your\nBox developer console and click the **Edit Application** link for\nthe application you're working with. In the OAuth 2.0 Parameters section\nof the configuration page, find the item labelled `client_id`. The\ntext of that item is your application's Client ID."
                },
                {
                  "key": "redirect_uri",
                  "value": "http://example.com/auth/callback",
                  "description": "The URL to which Box redirects the browser after the user has granted\nor denied the application permission. This URL must match the\nredirect URL in the configuration of your application. It must be a\nvalid HTTPS URL and it needs to be able to handle the redirection to\ncomplete the next step in the OAuth 2.0 flow."
                },
                {
                  "key": "state",
                  "value": "my_state",
                  "description": "A custom string of your choice. Box will pass the same string to\nthe redirect URL when authentication is complete. This parameter\ncan be used to identify a user on redirect, as well as protect\nagainst hijacked sessions and other exploits.",
                  "disabled": true
                },
                {
                  "key": "scope",
                  "value": "admin_readwrite",
                  "description": "A comma-separated list of application scopes you'd like to\nauthenticate the user for. This defaults to all the scopes configured\nfor the application in its configuration page.",
                  "disabled": true
                }
              ]
            },
            "description": "Authorize a user by sending them through the Box\n\nhttps://developer.box.com/en/reference/get-authorize"
          },
          "response": [
            {
              "id": "0dc4a5be-6bec-47bc-a8d0-7bf8f19853f0",
              "name": "[200] Does not return any data, but rather should be used in the browser.",
              "originalRequest": {
                "auth": {
                  "type": "noauth"
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{account.box.com}}/api/oauth2/authorize?response_type=code&client_id={{client_id}}&redirect_uri=http://example.com/auth/callback",
                  "protocol": "https",
                  "host": [
                    "{{account.box.com}}"
                  ],
                  "path": [
                    "api",
                    "oauth2",
                    "authorize"
                  ],
                  "query": [
                    {
                      "key": "response_type",
                      "value": "code",
                      "description": "The type of response we'd like to receive."
                    },
                    {
                      "key": "client_id",
                      "value": "{{client_id}}",
                      "description": "The Client ID of the application that is requesting to authenticate\nthe user. To get the Client ID for your application, log in to your\nBox developer console and click the **Edit Application** link for\nthe application you're working with. In the OAuth 2.0 Parameters section\nof the configuration page, find the item labelled `client_id`. The\ntext of that item is your application's Client ID."
                    },
                    {
                      "key": "redirect_uri",
                      "value": "http://example.com/auth/callback",
                      "description": "The URL to which Box redirects the browser after the user has granted\nor denied the application permission. This URL must match the\nredirect URL in the configuration of your application. It must be a\nvalid HTTPS URL and it needs to be able to handle the redirection to\ncomplete the next step in the OAuth 2.0 flow."
                    },
                    {
                      "key": "state",
                      "value": "my_state",
                      "description": "A custom string of your choice. Box will pass the same string to\nthe redirect URL when authentication is complete. This parameter\ncan be used to identify a user on redirect, as well as protect\nagainst hijacked sessions and other exploits.",
                      "disabled": true
                    },
                    {
                      "key": "scope",
                      "value": "admin_readwrite",
                      "description": "A comma-separated list of application scopes you'd like to\nauthenticate the user for. This defaults to all the scopes configured\nfor the application in its configuration page.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Authorize a user by sending them through the Box\n\nhttps://developer.box.com/en/reference/get-authorize"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "text/html"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        },
        {
          "name": "Request access token",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "181e7e7d-a628-4e7d-b4af-0c3413c588ec",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Test script to run after every API request.\n *\n * Used to automatically pick up on a refreshed access token and store the new values.\n */\n\nconst updateAccessToken = () => {\n  // only store a new value if the request was made to the right endpoint\n  const isRightAPI = pm.request.url.path.join('/') === 'oauth2/token'\n  if (!isRightAPI) { return }\n\n  // only store the new value of there actually was a request body\n  const hasBody = !!pm.request.body\n  if (!hasBody) { return }\n\n  // only store the new value if the body was urlencoded\n  const isUrlEncoded = pm.request.body.mode === 'urlencoded'\n  if (!isUrlEncoded) { return }\n\n  // only store the new value if the body had a grant type\n  const grantType = pm.request.body.urlencoded.filter(param => param.key === 'grant_type')[0]\n  const hasGrantType = !!grantType\n  if (!hasGrantType) { return }\n\n  // only store the new value if the grant type was \"refresh_token\"\n  const isRefreshTokenRequest = grantType.value === 'refresh_token'\n  if (!isRefreshTokenRequest) { return }\n\n  // only store the new value if the response has an access token\n  const response = pm.response.json()\n  const hasAccessToken = !!response.access_token\n  if (!hasAccessToken) { return }\n\n  // determine when this token is set to expire at\n  const newExpiresAt = Date.now() + response.expires_in * 1000\n  // store the new values\n  pm.environment.set('access_token', response.access_token)\n  pm.environment.set('refresh_token', response.refresh_token)\n  pm.environment.set('expires_at', newExpiresAt)\n}\n\nupdateAccessToken()\n"
                ]
              }
            }
          ],
          "_postman_id": "2fd43dfe-98c5-47f6-92e8-aea6ab5e606b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "grant_type",
                  "value": "authorization_code",
                  "description": "The type of request being made, either using a client-side obtained\nauthorization code, a refresh token, a JWT assertion, or another access\ntoken for the purpose of downscoping a token."
                },
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "description": "The Client ID of the application requesting an access token.\n\nUsed in combination with `authorization_code` or\n`urn:ietf:params:oauth:grant-type:jwt-bearer` as the `grant_type`.",
                  "disabled": true
                },
                {
                  "key": "client_secret",
                  "value": "{{client_secret}}",
                  "description": "The client secret of the application requesting an access token.\n\nUsed in combination with `authorization_code` or\n`urn:ietf:params:oauth:grant-type:jwt-bearer` as the `grant_type`.",
                  "disabled": true
                },
                {
                  "key": "code",
                  "value": "n22JPxrh18m4Y0wIZPIqYZK7VRrsMTWW",
                  "description": "The client-side authorization code passed to your application by\nBox in the browser redirect after the user has successfully\ngranted your application permission to make API calls on their\nbehalf.\n\nUsed in combination with `authorization_code` as the `grant_type`.",
                  "disabled": true
                },
                {
                  "key": "refresh_token",
                  "value": "{{refresh_token}}",
                  "description": "A refresh token used to get a new access token with.\n\nUsed in combination with `refresh_token` as the `grant_type`.",
                  "disabled": true
                },
                {
                  "key": "assertion",
                  "value": "xxxxx.yyyyy.zzzzz",
                  "description": "A JWT assertion for which to request a new access token.\n\nUsed in combination with `urn:ietf:params:oauth:grant-type:jwt-bearer`\nas the `grant_type`.",
                  "disabled": true
                },
                {
                  "key": "subject_token",
                  "value": "c3FIOG9vSGV4VHo4QzAyg5T1JvNnJoZ3ExaVNyQWw6WjRsanRKZG5lQk9qUE1BVQ",
                  "description": "The token to exchange for a downscoped token. This can be a regular\naccess token, a JWT assertion, or an app token.\n\nUsed in combination with `urn:ietf:params:oauth:grant-type:token-exchange`\nas the `grant_type`.",
                  "disabled": true
                },
                {
                  "key": "subject_token_type",
                  "value": "urn:ietf:params:oauth:token-type:access_token",
                  "description": "The type of `subject_token` passed in.\n\nUsed in combination with `urn:ietf:params:oauth:grant-type:token-exchange`\nas the `grant_type`.",
                  "disabled": true
                },
                {
                  "key": "actor_token",
                  "value": "c3FIOG9vSGV4VHo4QzAyg5T1JvNnJoZ3ExaVNyQWw6WjRsanRKZG5lQk9qUE1BVQ",
                  "description": "The token used to create an annotator token.\nThis is a JWT assertion.\n\nUsed in combination with `urn:ietf:params:oauth:grant-type:token-exchange`\nas the `grant_type`.",
                  "disabled": true
                },
                {
                  "key": "actor_token_type",
                  "value": "urn:ietf:params:oauth:token-type:id_token",
                  "description": "The type of `actor_token` passed in.\n\nUsed in combination with `urn:ietf:params:oauth:grant-type:token-exchange`\nas the `grant_type`.",
                  "disabled": true
                },
                {
                  "key": "scope",
                  "value": "item_upload item_preview base_explorer",
                  "description": "The space-delimited list of scopes that you want apply to the\nnew access token.\n\nThe `subject_token` will need to have all of these scopes or\nthe call will error with **401 Unauthorized**.",
                  "disabled": true
                },
                {
                  "key": "resource",
                  "value": "https://api.box.com/2.0/files/123456",
                  "description": "Full URL for the file that the token should be generated for.",
                  "disabled": true
                }
              ],
              "options": {
                "urlencoded": {}
              }
            },
            "url": "https://{{api.box.com}}/oauth2/token",
            "description": "Request an Access Token using either a client-side obtained OAuth 2.0\n\nhttps://developer.box.com/en/reference/post-oauth2-token"
          },
          "response": [
            {
              "id": "3859fb5a-8689-4d38-9b17-ae2b0fc64abd",
              "name": "[400] An authentication error.",
              "originalRequest": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "grant_type",
                      "value": "authorization_code",
                      "description": "The type of request being made, either using a client-side obtained\nauthorization code, a refresh token, a JWT assertion, or another access\ntoken for the purpose of downscoping a token."
                    },
                    {
                      "key": "client_id",
                      "value": "{{client_id}}",
                      "description": "The Client ID of the application requesting an access token.\n\nUsed in combination with `authorization_code` or\n`urn:ietf:params:oauth:grant-type:jwt-bearer` as the `grant_type`.",
                      "disabled": true
                    },
                    {
                      "key": "client_secret",
                      "value": "{{client_secret}}",
                      "description": "The client secret of the application requesting an access token.\n\nUsed in combination with `authorization_code` or\n`urn:ietf:params:oauth:grant-type:jwt-bearer` as the `grant_type`.",
                      "disabled": true
                    },
                    {
                      "key": "code",
                      "value": "n22JPxrh18m4Y0wIZPIqYZK7VRrsMTWW",
                      "description": "The client-side authorization code passed to your application by\nBox in the browser redirect after the user has successfully\ngranted your application permission to make API calls on their\nbehalf.\n\nUsed in combination with `authorization_code` as the `grant_type`.",
                      "disabled": true
                    },
                    {
                      "key": "refresh_token",
                      "value": "{{refresh_token}}",
                      "description": "A refresh token used to get a new access token with.\n\nUsed in combination with `refresh_token` as the `grant_type`.",
                      "disabled": true
                    },
                    {
                      "key": "assertion",
                      "value": "xxxxx.yyyyy.zzzzz",
                      "description": "A JWT assertion for which to request a new access token.\n\nUsed in combination with `urn:ietf:params:oauth:grant-type:jwt-bearer`\nas the `grant_type`.",
                      "disabled": true
                    },
                    {
                      "key": "subject_token",
                      "value": "c3FIOG9vSGV4VHo4QzAyg5T1JvNnJoZ3ExaVNyQWw6WjRsanRKZG5lQk9qUE1BVQ",
                      "description": "The token to exchange for a downscoped token. This can be a regular\naccess token, a JWT assertion, or an app token.\n\nUsed in combination with `urn:ietf:params:oauth:grant-type:token-exchange`\nas the `grant_type`.",
                      "disabled": true
                    },
                    {
                      "key": "subject_token_type",
                      "value": "urn:ietf:params:oauth:token-type:access_token",
                      "description": "The type of `subject_token` passed in.\n\nUsed in combination with `urn:ietf:params:oauth:grant-type:token-exchange`\nas the `grant_type`.",
                      "disabled": true
                    },
                    {
                      "key": "actor_token",
                      "value": "c3FIOG9vSGV4VHo4QzAyg5T1JvNnJoZ3ExaVNyQWw6WjRsanRKZG5lQk9qUE1BVQ",
                      "description": "The token used to create an annotator token.\nThis is a JWT assertion.\n\nUsed in combination with `urn:ietf:params:oauth:grant-type:token-exchange`\nas the `grant_type`.",
                      "disabled": true
                    },
                    {
                      "key": "actor_token_type",
                      "value": "urn:ietf:params:oauth:token-type:id_token",
                      "description": "The type of `actor_token` passed in.\n\nUsed in combination with `urn:ietf:params:oauth:grant-type:token-exchange`\nas the `grant_type`.",
                      "disabled": true
                    },
                    {
                      "key": "scope",
                      "value": "item_upload item_preview base_explorer",
                      "description": "The space-delimited list of scopes that you want apply to the\nnew access token.\n\nThe `subject_token` will need to have all of these scopes or\nthe call will error with **401 Unauthorized**.",
                      "disabled": true
                    },
                    {
                      "key": "resource",
                      "value": "https://api.box.com/2.0/files/123456",
                      "description": "Full URL for the file that the token should be generated for.",
                      "disabled": true
                    }
                  ],
                  "options": {
                    "urlencoded": {}
                  }
                },
                "url": "https://{{api.box.com}}/oauth2/token",
                "description": "Request an Access Token using either a client-side obtained OAuth 2.0\n\nhttps://developer.box.com/en/reference/post-oauth2-token"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"error\": \"invalid_client\",\n  \"error_description\": \"The client credentials are not valid\"\n}"
            },
            {
              "id": "81da6924-7e9d-47cd-9606-4bcf9d54e86f",
              "name": "[200] Returns a new Access Token that can be used to make authenticated",
              "originalRequest": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "grant_type",
                      "value": "authorization_code",
                      "description": "The type of request being made, either using a client-side obtained\nauthorization code, a refresh token, a JWT assertion, or another access\ntoken for the purpose of downscoping a token."
                    },
                    {
                      "key": "client_id",
                      "value": "{{client_id}}",
                      "description": "The Client ID of the application requesting an access token.\n\nUsed in combination with `authorization_code` or\n`urn:ietf:params:oauth:grant-type:jwt-bearer` as the `grant_type`.",
                      "disabled": true
                    },
                    {
                      "key": "client_secret",
                      "value": "{{client_secret}}",
                      "description": "The client secret of the application requesting an access token.\n\nUsed in combination with `authorization_code` or\n`urn:ietf:params:oauth:grant-type:jwt-bearer` as the `grant_type`.",
                      "disabled": true
                    },
                    {
                      "key": "code",
                      "value": "n22JPxrh18m4Y0wIZPIqYZK7VRrsMTWW",
                      "description": "The client-side authorization code passed to your application by\nBox in the browser redirect after the user has successfully\ngranted your application permission to make API calls on their\nbehalf.\n\nUsed in combination with `authorization_code` as the `grant_type`.",
                      "disabled": true
                    },
                    {
                      "key": "refresh_token",
                      "value": "{{refresh_token}}",
                      "description": "A refresh token used to get a new access token with.\n\nUsed in combination with `refresh_token` as the `grant_type`.",
                      "disabled": true
                    },
                    {
                      "key": "assertion",
                      "value": "xxxxx.yyyyy.zzzzz",
                      "description": "A JWT assertion for which to request a new access token.\n\nUsed in combination with `urn:ietf:params:oauth:grant-type:jwt-bearer`\nas the `grant_type`.",
                      "disabled": true
                    },
                    {
                      "key": "subject_token",
                      "value": "c3FIOG9vSGV4VHo4QzAyg5T1JvNnJoZ3ExaVNyQWw6WjRsanRKZG5lQk9qUE1BVQ",
                      "description": "The token to exchange for a downscoped token. This can be a regular\naccess token, a JWT assertion, or an app token.\n\nUsed in combination with `urn:ietf:params:oauth:grant-type:token-exchange`\nas the `grant_type`.",
                      "disabled": true
                    },
                    {
                      "key": "subject_token_type",
                      "value": "urn:ietf:params:oauth:token-type:access_token",
                      "description": "The type of `subject_token` passed in.\n\nUsed in combination with `urn:ietf:params:oauth:grant-type:token-exchange`\nas the `grant_type`.",
                      "disabled": true
                    },
                    {
                      "key": "actor_token",
                      "value": "c3FIOG9vSGV4VHo4QzAyg5T1JvNnJoZ3ExaVNyQWw6WjRsanRKZG5lQk9qUE1BVQ",
                      "description": "The token used to create an annotator token.\nThis is a JWT assertion.\n\nUsed in combination with `urn:ietf:params:oauth:grant-type:token-exchange`\nas the `grant_type`.",
                      "disabled": true
                    },
                    {
                      "key": "actor_token_type",
                      "value": "urn:ietf:params:oauth:token-type:id_token",
                      "description": "The type of `actor_token` passed in.\n\nUsed in combination with `urn:ietf:params:oauth:grant-type:token-exchange`\nas the `grant_type`.",
                      "disabled": true
                    },
                    {
                      "key": "scope",
                      "value": "item_upload item_preview base_explorer",
                      "description": "The space-delimited list of scopes that you want apply to the\nnew access token.\n\nThe `subject_token` will need to have all of these scopes or\nthe call will error with **401 Unauthorized**.",
                      "disabled": true
                    },
                    {
                      "key": "resource",
                      "value": "https://api.box.com/2.0/files/123456",
                      "description": "Full URL for the file that the token should be generated for.",
                      "disabled": true
                    }
                  ],
                  "options": {
                    "urlencoded": {}
                  }
                },
                "url": "https://{{api.box.com}}/oauth2/token",
                "description": "Request an Access Token using either a client-side obtained OAuth 2.0\n\nhttps://developer.box.com/en/reference/post-oauth2-token"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"access_token\": \"c3FIOG9vSGV4VHo4QzAyg5T1JvNnJoZ3ExaVNyQWw6WjRsanRKZG5lQk9qUE1BVQ\",\n  \"expires_in\": 3600,\n  \"token_type\": \"bearer\",\n  \"restricted_to\": [\n    {\n      \"scope\": \"item_download\",\n      \"object\": {\n        \"id\": \"12345\",\n        \"etag\": \"1\",\n        \"type\": \"file\",\n        \"sequence_id\": \"3\",\n        \"name\": \"Contract.pdf\"\n      }\n    }\n  ],\n  \"refresh_token\": \"c3FIOG9vSGV4VHo4QzAyg5T1JvNnJoZ3ExaVNyQWw6WjRsanRKZG5lQk9qUE1BVQ\",\n  \"issued_token_type\": \"urn:ietf:params:oauth:token-type:access_token\"\n}"
            }
          ]
        },
        {
          "name": "Refresh access token",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7cc5221e-5ce7-40cf-8713-40f5b06d5601",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Test script to run after every API request.\n *\n * Used to automatically pick up on a refreshed access token and store the new values.\n */\n\nconst updateAccessToken = () => {\n  // only store a new value if the request was made to the right endpoint\n  const isRightAPI = pm.request.url.path.join('/') === 'oauth2/token'\n  if (!isRightAPI) { return }\n\n  // only store the new value of there actually was a request body\n  const hasBody = !!pm.request.body\n  if (!hasBody) { return }\n\n  // only store the new value if the body was urlencoded\n  const isUrlEncoded = pm.request.body.mode === 'urlencoded'\n  if (!isUrlEncoded) { return }\n\n  // only store the new value if the body had a grant type\n  const grantType = pm.request.body.urlencoded.filter(param => param.key === 'grant_type')[0]\n  const hasGrantType = !!grantType\n  if (!hasGrantType) { return }\n\n  // only store the new value if the grant type was \"refresh_token\"\n  const isRefreshTokenRequest = grantType.value === 'refresh_token'\n  if (!isRefreshTokenRequest) { return }\n\n  // only store the new value if the response has an access token\n  const response = pm.response.json()\n  const hasAccessToken = !!response.access_token\n  if (!hasAccessToken) { return }\n\n  // determine when this token is set to expire at\n  const newExpiresAt = Date.now() + response.expires_in * 1000\n  // store the new values\n  pm.environment.set('access_token', response.access_token)\n  pm.environment.set('refresh_token', response.refresh_token)\n  pm.environment.set('expires_at', newExpiresAt)\n}\n\nupdateAccessToken()\n"
                ]
              }
            }
          ],
          "_postman_id": "aab22024-4aff-4503-b3d9-5bee1100d2f8",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "grant_type",
                  "value": "refresh_token",
                  "description": "The type of request being made, in this case a refresh request."
                },
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "description": "The client ID of the application requesting to refresh the token."
                },
                {
                  "key": "client_secret",
                  "value": "{{client_secret}}",
                  "description": "The client secret of the application requesting to refresh the token."
                },
                {
                  "key": "refresh_token",
                  "value": "{{refresh_token}}",
                  "description": "The refresh token to refresh."
                }
              ],
              "options": {
                "urlencoded": {}
              }
            },
            "url": "https://{{api.box.com}}/oauth2/token",
            "description": "Request an Access Token using either a client-side obtained OAuth 2.0\n\nhttps://developer.box.com/en/reference/post-oauth2-token"
          },
          "response": [
            {
              "id": "0c5c9283-81c0-4590-b440-eec23f202e27",
              "name": "[200] Returns a new Access Token that can be used to make authenticated",
              "originalRequest": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "grant_type",
                      "value": "refresh_token",
                      "description": "The type of request being made, in this case a refresh request."
                    },
                    {
                      "key": "client_id",
                      "value": "{{client_id}}",
                      "description": "The client ID of the application requesting to refresh the token."
                    },
                    {
                      "key": "client_secret",
                      "value": "{{client_secret}}",
                      "description": "The client secret of the application requesting to refresh the token."
                    },
                    {
                      "key": "refresh_token",
                      "value": "{{refresh_token}}",
                      "description": "The refresh token to refresh."
                    }
                  ],
                  "options": {
                    "urlencoded": {}
                  }
                },
                "url": "https://{{api.box.com}}/oauth2/token",
                "description": "Request an Access Token using either a client-side obtained OAuth 2.0\n\nhttps://developer.box.com/en/reference/post-oauth2-token"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"access_token\": \"c3FIOG9vSGV4VHo4QzAyg5T1JvNnJoZ3ExaVNyQWw6WjRsanRKZG5lQk9qUE1BVQ\",\n  \"expires_in\": 3600,\n  \"token_type\": \"bearer\",\n  \"restricted_to\": [\n    {\n      \"scope\": \"item_download\",\n      \"object\": {\n        \"id\": \"12345\",\n        \"etag\": \"1\",\n        \"type\": \"file\",\n        \"sequence_id\": \"3\",\n        \"name\": \"Contract.pdf\"\n      }\n    }\n  ],\n  \"refresh_token\": \"c3FIOG9vSGV4VHo4QzAyg5T1JvNnJoZ3ExaVNyQWw6WjRsanRKZG5lQk9qUE1BVQ\",\n  \"issued_token_type\": \"urn:ietf:params:oauth:token-type:access_token\"\n}"
            },
            {
              "id": "b0f6aa9c-9a60-422a-9f2d-8c6562d6fec2",
              "name": "[400] An authentication error.",
              "originalRequest": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "grant_type",
                      "value": "refresh_token",
                      "description": "The type of request being made, in this case a refresh request."
                    },
                    {
                      "key": "client_id",
                      "value": "{{client_id}}",
                      "description": "The client ID of the application requesting to refresh the token."
                    },
                    {
                      "key": "client_secret",
                      "value": "{{client_secret}}",
                      "description": "The client secret of the application requesting to refresh the token."
                    },
                    {
                      "key": "refresh_token",
                      "value": "{{refresh_token}}",
                      "description": "The refresh token to refresh."
                    }
                  ],
                  "options": {
                    "urlencoded": {}
                  }
                },
                "url": "https://{{api.box.com}}/oauth2/token",
                "description": "Request an Access Token using either a client-side obtained OAuth 2.0\n\nhttps://developer.box.com/en/reference/post-oauth2-token"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"error\": \"invalid_client\",\n  \"error_description\": \"The client credentials are not valid\"\n}"
            }
          ]
        },
        {
          "name": "Revoke access token",
          "_postman_id": "8bab249c-25e4-4aae-b845-a2a68c2edb52",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "client_id",
                  "value": "{{client_id}}",
                  "description": "The Client ID of the application requesting to revoke the\naccess token.",
                  "disabled": true
                },
                {
                  "key": "client_secret",
                  "value": "{{client_secret}}",
                  "description": "The client secret of the application requesting to revoke\nan access token.",
                  "disabled": true
                },
                {
                  "key": "token",
                  "value": "n22JPxrh18m4Y0wIZPIqYZK7VRrsMTWW",
                  "description": "The access token to revoke.",
                  "disabled": true
                }
              ],
              "options": {
                "urlencoded": {}
              }
            },
            "url": "https://{{api.box.com}}/oauth2/revoke",
            "description": "Revoke an active Access Token, effectively logging a user out\n\nhttps://developer.box.com/en/reference/post-oauth2-revoke"
          },
          "response": [
            {
              "id": "07808cbc-1c24-4214-aaa7-49ea2203576c",
              "name": "[200] Returns an empty response when the token was successfully revoked.",
              "originalRequest": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "client_id",
                      "value": "{{client_id}}",
                      "description": "The Client ID of the application requesting to revoke the\naccess token.",
                      "disabled": true
                    },
                    {
                      "key": "client_secret",
                      "value": "{{client_secret}}",
                      "description": "The client secret of the application requesting to revoke\nan access token.",
                      "disabled": true
                    },
                    {
                      "key": "token",
                      "value": "n22JPxrh18m4Y0wIZPIqYZK7VRrsMTWW",
                      "description": "The access token to revoke.",
                      "disabled": true
                    }
                  ],
                  "options": {
                    "urlencoded": {}
                  }
                },
                "url": "https://{{api.box.com}}/oauth2/revoke",
                "description": "Revoke an active Access Token, effectively logging a user out\n\nhttps://developer.box.com/en/reference/post-oauth2-revoke"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "a078833a-6adf-4d11-b6c4-1a33cf34071d",
              "name": "[400] An authentication error.",
              "originalRequest": {
                "auth": {
                  "type": "noauth"
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "client_id",
                      "value": "{{client_id}}",
                      "description": "The Client ID of the application requesting to revoke the\naccess token.",
                      "disabled": true
                    },
                    {
                      "key": "client_secret",
                      "value": "{{client_secret}}",
                      "description": "The client secret of the application requesting to revoke\nan access token.",
                      "disabled": true
                    },
                    {
                      "key": "token",
                      "value": "n22JPxrh18m4Y0wIZPIqYZK7VRrsMTWW",
                      "description": "The access token to revoke.",
                      "disabled": true
                    }
                  ],
                  "options": {
                    "urlencoded": {}
                  }
                },
                "url": "https://{{api.box.com}}/oauth2/revoke",
                "description": "Revoke an active Access Token, effectively logging a user out\n\nhttps://developer.box.com/en/reference/post-oauth2-revoke"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"error\": \"invalid_client\",\n  \"error_description\": \"The client credentials are not valid\"\n}"
            }
          ]
        }
      ],
      "_postman_id": "d97101ef-eb93-4062-a216-62c7adc52f30"
    },
    {
      "name": "Collaboration whitelist entries",
      "item": [
        {
          "name": "List collaboration whitelist entries",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b8257051-96f7-45c7-a609-7fc4acb19394",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "728ffbe0-6610-44f8-a01f-99675e1a5d44",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/collaboration_whitelist_entries?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "collaboration_whitelist_entries"
              ],
              "query": [
                {
                  "key": "marker",
                  "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                  "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "1000",
                  "description": "The maximum number of items to return per page.",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the list of whitelist entries which specify what domains can\n\nhttps://developer.box.com/en/reference/get-collaboration-whitelist-entries"
          },
          "response": [
            {
              "id": "070dafd1-84a0-4a0b-b8db-83d14f95ce81",
              "name": "[200] Returns a collection of collaboration whitelist entries.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/collaboration_whitelist_entries?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "collaboration_whitelist_entries"
                  ],
                  "query": [
                    {
                      "key": "marker",
                      "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                      "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Returns the list of whitelist entries which specify what domains can\n\nhttps://developer.box.com/en/reference/get-collaboration-whitelist-entries"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"limit\": 1000,\n  \"next_marker\": 3000,\n  \"prev_marker\": 1000,\n  \"entries\": [\n    {\n      \"id\": \"11446498\",\n      \"type\": \"collaboration_whitelist_entry\",\n      \"domain\": \"example.com\",\n      \"direction\": \"both\",\n      \"enterprise\": {\n        \"id\": \"11446498\",\n        \"type\": \"enterprise\",\n        \"name\": \"Acme Inc.\"\n      },\n      \"created_at\": \"2012-12-12T10:53:43-08:00\"\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "Get collaboration whitelist entry",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "9cb9e7d0-9389-411c-a7d1-01e4bbc13d32",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "e97695c0-ea97-43d7-9b40-77c65b31360d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/collaboration_whitelist_entries/:collaboration_whitelist_entry_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "collaboration_whitelist_entries",
                ":collaboration_whitelist_entry_id"
              ],
              "variable": [
                {
                  "id": "bf136489-9ba0-48e5-872e-ed3d8e289197",
                  "key": "collaboration_whitelist_entry_id",
                  "value": "213123",
                  "type": "string",
                  "description": "The ID of the collaboration whitelist item"
                }
              ]
            },
            "description": "Returns a specific collaboration whitelist entry.\n\nhttps://developer.box.com/en/reference/get-collaboration-whitelist-entries-id"
          },
          "response": [
            {
              "id": "adfed9a8-a1eb-46a1-8f05-ce5b4ac412e5",
              "name": "[200] Returns a collaboration whitelist entry.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/collaboration_whitelist_entries/:collaboration_whitelist_entry_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "collaboration_whitelist_entries",
                    ":collaboration_whitelist_entry_id"
                  ],
                  "variable": [
                    {
                      "id": "bf136489-9ba0-48e5-872e-ed3d8e289197",
                      "key": "collaboration_whitelist_entry_id",
                      "value": "213123",
                      "type": "string",
                      "description": "The ID of the collaboration whitelist item"
                    }
                  ]
                },
                "description": "Returns a specific collaboration whitelist entry.\n\nhttps://developer.box.com/en/reference/get-collaboration-whitelist-entries-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"collaboration_whitelist_entry\",\n  \"domain\": \"example.com\",\n  \"direction\": \"both\",\n  \"enterprise\": {\n    \"id\": \"11446498\",\n    \"type\": \"enterprise\",\n    \"name\": \"Acme Inc.\"\n  },\n  \"created_at\": \"2012-12-12T10:53:43-08:00\"\n}"
            }
          ]
        },
        {
          "name": "Create collaboration whitelist entry",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c9a6834b-0d8f-430a-8d0d-3e82d8c620dd",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "dca29932-b491-437b-ae46-28e0e052bd43",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"domain\": \"example.com\",\n  \"direction\": \"inbound\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "https://{{api.box.com}}/2.0/collaboration_whitelist_entries",
            "description": "Creates a collaboration whitelist entry, specifying a domain\n\nhttps://developer.box.com/en/reference/post-collaboration-whitelist-entries"
          },
          "response": [
            {
              "id": "a2b0c774-a6a8-4423-bac5-60e47de1cced",
              "name": "[200] Returns a new collaboration whitelist entry.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"domain\": \"example.com\",\n  \"direction\": \"inbound\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/collaboration_whitelist_entries",
                "description": "Creates a collaboration whitelist entry, specifying a domain\n\nhttps://developer.box.com/en/reference/post-collaboration-whitelist-entries"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"collaboration_whitelist_entry\",\n  \"domain\": \"example.com\",\n  \"direction\": \"both\",\n  \"enterprise\": {\n    \"id\": \"11446498\",\n    \"type\": \"enterprise\",\n    \"name\": \"Acme Inc.\"\n  },\n  \"created_at\": \"2012-12-12T10:53:43-08:00\"\n}"
            }
          ]
        },
        {
          "name": "Remove collaboration whitelist entry",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "dbb9496e-a0b4-410e-8418-f9c42e2494b8",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "1494c127-0d46-400e-8450-3d65a53f1a5b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/collaboration_whitelist_entries/:collaboration_whitelist_entry_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "collaboration_whitelist_entries",
                ":collaboration_whitelist_entry_id"
              ],
              "variable": [
                {
                  "id": "e607151a-ecb5-48f4-9d35-7ca3d5f41d6e",
                  "key": "collaboration_whitelist_entry_id",
                  "value": "213123",
                  "type": "string",
                  "description": "The ID of the collaboration whitelist item"
                }
              ]
            },
            "description": "Deletes a specific collaboration whitelist entry.\n\nhttps://developer.box.com/en/reference/delete-collaboration-whitelist-entries-id"
          },
          "response": [
            {
              "id": "57531221-0765-46e5-83aa-90cfbf4a72fa",
              "name": "[204] A blank response is returned if the entry was",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/collaboration_whitelist_entries/:collaboration_whitelist_entry_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "collaboration_whitelist_entries",
                    ":collaboration_whitelist_entry_id"
                  ],
                  "variable": [
                    {
                      "id": "e607151a-ecb5-48f4-9d35-7ca3d5f41d6e",
                      "key": "collaboration_whitelist_entry_id",
                      "value": "213123",
                      "type": "string",
                      "description": "The ID of the collaboration whitelist item"
                    }
                  ]
                },
                "description": "Deletes a specific collaboration whitelist entry.\n\nhttps://developer.box.com/en/reference/delete-collaboration-whitelist-entries-id"
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        }
      ],
      "_postman_id": "1d25d98f-5fa5-49e4-b3e0-7b53c83f670e"
    },
    {
      "name": "Collaboration whitelist exempt targets",
      "item": [
        {
          "name": "List collaboration whitelist exempt target",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "df95d5a6-8c38-4096-bf01-e73fa511f684",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "2438b4cc-723a-4acd-aa79-e22941ade014",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/collaboration_whitelist_exempt_targets?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "collaboration_whitelist_exempt_targets"
              ],
              "query": [
                {
                  "key": "marker",
                  "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                  "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "1000",
                  "description": "The maximum number of items to return per page.",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a list of users who have been exempt from the collaboration\n\nhttps://developer.box.com/en/reference/get-collaboration-whitelist-exempt-targets"
          },
          "response": [
            {
              "id": "6797e1cc-2f3e-4f3a-ae63-01416c5c78d3",
              "name": "[200] Returns a collection of collaboration whitelist exemptions.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/collaboration_whitelist_exempt_targets?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "collaboration_whitelist_exempt_targets"
                  ],
                  "query": [
                    {
                      "key": "marker",
                      "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                      "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Returns a list of users who have been exempt from the collaboration\n\nhttps://developer.box.com/en/reference/get-collaboration-whitelist-exempt-targets"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"limit\": 1000,\n  \"next_marker\": 3000,\n  \"prev_marker\": 1000,\n  \"entries\": [\n    {\n      \"id\": \"11446498\",\n      \"type\": \"collaboration_whitelist\",\n      \"enterprise\": {\n        \"id\": \"11446498\",\n        \"type\": \"enterprise\",\n        \"name\": \"Acme Inc.\"\n      },\n      \"user\": {\n        \"id\": \"11446498\",\n        \"type\": \"enterprise\",\n        \"name\": \"Acme Inc.\"\n      },\n      \"created_at\": \"2012-12-12T10:53:43-08:00\",\n      \"modified_at\": \"2012-12-12T10:53:43-08:00\"\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "Get collaboration whitelist exempt target",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "297d9d6b-81df-474a-aabe-829250cbbded",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "dc2702e6-f624-49a8-812d-9972ac33e9c6",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/collaboration_whitelist_exempt_targets/:collaboration_whitelist_exempt_target_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "collaboration_whitelist_exempt_targets",
                ":collaboration_whitelist_exempt_target_id"
              ],
              "variable": [
                {
                  "id": "9825a7b7-3645-4558-a7e4-5699dc42423d",
                  "key": "collaboration_whitelist_exempt_target_id",
                  "value": "984923",
                  "type": "string",
                  "description": "<!-- alex disable whitelist -->\n\nThe ID of the collaboration whitelist exemption"
                }
              ]
            },
            "description": "Returns a users who has been exempt from the collaboration\n\nhttps://developer.box.com/en/reference/get-collaboration-whitelist-exempt-targets-id"
          },
          "response": [
            {
              "id": "3f4fbb2d-61be-451e-b45f-b400f15c3c4c",
              "name": "[200] Returns a collaboration whitelist exemption.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/collaboration_whitelist_exempt_targets/:collaboration_whitelist_exempt_target_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "collaboration_whitelist_exempt_targets",
                    ":collaboration_whitelist_exempt_target_id"
                  ],
                  "variable": [
                    {
                      "id": "9825a7b7-3645-4558-a7e4-5699dc42423d",
                      "key": "collaboration_whitelist_exempt_target_id",
                      "value": "984923",
                      "type": "string",
                      "description": "<!-- alex disable whitelist -->\n\nThe ID of the collaboration whitelist exemption"
                    }
                  ]
                },
                "description": "Returns a users who has been exempt from the collaboration\n\nhttps://developer.box.com/en/reference/get-collaboration-whitelist-exempt-targets-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"collaboration_whitelist\",\n  \"enterprise\": {\n    \"id\": \"11446498\",\n    \"type\": \"enterprise\",\n    \"name\": \"Acme Inc.\"\n  },\n  \"user\": {\n    \"id\": \"11446498\",\n    \"type\": \"enterprise\",\n    \"name\": \"Acme Inc.\"\n  },\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\"\n}"
            }
          ]
        },
        {
          "name": "Create whitelist exempt target",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e981afa5-7242-44a4-9a14-304a2c15f8e3",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "66f2b434-d7f5-4700-abc8-9d8e88d7589f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user\": {\n    \"id\": \"23522323\"\n  }\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "https://{{api.box.com}}/2.0/collaboration_whitelist_exempt_targets",
            "description": "Creates a collaboration whitelist entry exemption, specifying a user\n\nhttps://developer.box.com/en/reference/post-collaboration-whitelist-exempt-targets"
          },
          "response": [
            {
              "id": "6b8189f1-37de-44b1-bc16-464a15858770",
              "name": "[200] Returns a new collaboration whitelist entry.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"user\": {\n    \"id\": \"23522323\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/collaboration_whitelist_exempt_targets",
                "description": "Creates a collaboration whitelist entry exemption, specifying a user\n\nhttps://developer.box.com/en/reference/post-collaboration-whitelist-exempt-targets"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"collaboration_whitelist\",\n  \"enterprise\": {\n    \"id\": \"11446498\",\n    \"type\": \"enterprise\",\n    \"name\": \"Acme Inc.\"\n  },\n  \"user\": {\n    \"id\": \"11446498\",\n    \"type\": \"enterprise\",\n    \"name\": \"Acme Inc.\"\n  },\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\"\n}"
            }
          ]
        },
        {
          "name": "Remove collaboration whitelist exempt target",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d3221a7c-f665-40da-aa15-0c2606427a70",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "aba9f9a3-3684-44e4-9269-1b22a0ff175a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/collaboration_whitelist_exempt_targets/:collaboration_whitelist_exempt_target_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "collaboration_whitelist_exempt_targets",
                ":collaboration_whitelist_exempt_target_id"
              ],
              "variable": [
                {
                  "id": "e6b0d173-7dd3-40a5-ba80-fb6830175e75",
                  "key": "collaboration_whitelist_exempt_target_id",
                  "value": "984923",
                  "type": "string",
                  "description": "<!-- alex disable whitelist -->\n\nThe ID of the collaboration whitelist exemption"
                }
              ]
            },
            "description": "Deletes a specific collaboration whitelist exemption.\n\nhttps://developer.box.com/en/reference/delete-collaboration-whitelist-exempt-targets-id"
          },
          "response": [
            {
              "id": "8238bf65-64aa-4ba0-9cfa-72d3069a91ff",
              "name": "[204] A blank response is returned if the exemption was",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/collaboration_whitelist_exempt_targets/:collaboration_whitelist_exempt_target_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "collaboration_whitelist_exempt_targets",
                    ":collaboration_whitelist_exempt_target_id"
                  ],
                  "variable": [
                    {
                      "id": "e6b0d173-7dd3-40a5-ba80-fb6830175e75",
                      "key": "collaboration_whitelist_exempt_target_id",
                      "value": "984923",
                      "type": "string",
                      "description": "<!-- alex disable whitelist -->\n\nThe ID of the collaboration whitelist exemption"
                    }
                  ]
                },
                "description": "Deletes a specific collaboration whitelist exemption.\n\nhttps://developer.box.com/en/reference/delete-collaboration-whitelist-exempt-targets-id"
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        }
      ],
      "_postman_id": "344f8629-6c2c-4c9e-a386-832ad7a28ca0"
    },
    {
      "name": "Collaborations (Files)",
      "item": [
        {
          "name": "List file collaborations",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3b5f1c00-03a3-449f-a6a0-b5327d0f1699",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "97c0f520-b9a1-417c-84f6-cd68dcfc7553",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/files/:file_id/collaborations?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "files",
                ":file_id",
                "collaborations"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "1000",
                  "description": "The maximum number of items to return per page.",
                  "disabled": true
                },
                {
                  "key": "marker",
                  "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                  "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "cf61d7b6-c3d7-4d19-9c81-18ab246eaa12",
                  "key": "file_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                }
              ]
            },
            "description": "Retrieves a list of collaborations for a file. This\n\nhttps://developer.box.com/en/reference/get-files-id-collaborations"
          },
          "response": [
            {
              "id": "020bd7eb-8f45-4083-874d-01360803ff88",
              "name": "[200] Returns a collection of collaboration objects. If there are no",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/collaborations?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "collaborations"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    },
                    {
                      "key": "marker",
                      "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                      "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "cf61d7b6-c3d7-4d19-9c81-18ab246eaa12",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Retrieves a list of collaborations for a file. This\n\nhttps://developer.box.com/en/reference/get-files-id-collaborations"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"total_count\": 5000,\n  \"limit\": 1000,\n  \"offset\": 2000,\n  \"order\": [\n    {\n      \"by\": \"type\",\n      \"direction\": \"ASC\"\n    }\n  ],\n  \"entries\": [\n    {\n      \"id\": \"11446498\",\n      \"type\": \"collaboration\",\n      \"item\": {\n        \"id\": \"11446498\",\n        \"type\": \"file\",\n        \"sequence_id\": \"3\",\n        \"etag\": \"1\",\n        \"name\": \"Pictures\"\n      },\n      \"accessible_by\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      },\n      \"invite_email\": \"john@example.com\",\n      \"role\": \"editor\",\n      \"expires_at\": \"2012-12-12T10:53:43-08:00\",\n      \"status\": \"accepted\",\n      \"acknowledged_at\": \"2012-12-12T10:53:43-08:00\",\n      \"created_by\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      },\n      \"created_at\": \"2012-12-12T10:53:43-08:00\",\n      \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n      \"acceptance_requirements_status\": {\n        \"terms_of_service_requirement\": {\n          \"is_accepted\": true,\n          \"terms_of_service\": {\n            \"id\": \"11446498\",\n            \"type\": \"terms_of_service\"\n          }\n        },\n        \"strong_password_requirement\": {\n          \"enterprise_has_strong_password_required_for_external_users\": true,\n          \"user_has_strong_password\": true\n        },\n        \"two_factor_authentication_requirement\": {\n          \"enterprise_has_two_factor_auth_enabled\": true,\n          \"user_has_two_factor_authentication_enabled\": true\n        }\n      }\n    }\n  ]\n}"
            }
          ]
        }
      ],
      "_postman_id": "219d3674-a323-436b-8b2a-5d43f8f38329"
    },
    {
      "name": "Collaborations (Folders)",
      "item": [
        {
          "name": "List folder collaborations",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6c856c7f-5929-4b50-98ec-a96defae9b04",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "c55a3e1a-44a5-4b3b-9626-6ae7087fa204",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/collaborations?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "folders",
                ":folder_id",
                "collaborations"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "6f711760-eb56-45e6-ab4f-307ac321b677",
                  "key": "folder_id",
                  "value": "0",
                  "type": "string",
                  "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                }
              ]
            },
            "description": "Retrieves a list of collaborations for a folder. This\n\nhttps://developer.box.com/en/reference/get-folders-id-collaborations"
          },
          "response": [
            {
              "id": "836f36f8-b0ff-46b7-8216-695d8d282334",
              "name": "[200] Returns a collection of collaboration objects. If there are no",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/collaborations?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "collaborations"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "6f711760-eb56-45e6-ab4f-307ac321b677",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Retrieves a list of collaborations for a folder. This\n\nhttps://developer.box.com/en/reference/get-folders-id-collaborations"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"total_count\": 5000,\n  \"limit\": 1000,\n  \"offset\": 2000,\n  \"order\": [\n    {\n      \"by\": \"type\",\n      \"direction\": \"ASC\"\n    }\n  ],\n  \"entries\": [\n    {\n      \"id\": \"11446498\",\n      \"type\": \"collaboration\",\n      \"item\": {\n        \"id\": \"11446498\",\n        \"type\": \"file\",\n        \"sequence_id\": \"3\",\n        \"etag\": \"1\",\n        \"name\": \"Pictures\"\n      },\n      \"accessible_by\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      },\n      \"invite_email\": \"john@example.com\",\n      \"role\": \"editor\",\n      \"expires_at\": \"2012-12-12T10:53:43-08:00\",\n      \"status\": \"accepted\",\n      \"acknowledged_at\": \"2012-12-12T10:53:43-08:00\",\n      \"created_by\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      },\n      \"created_at\": \"2012-12-12T10:53:43-08:00\",\n      \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n      \"acceptance_requirements_status\": {\n        \"terms_of_service_requirement\": {\n          \"is_accepted\": true,\n          \"terms_of_service\": {\n            \"id\": \"11446498\",\n            \"type\": \"terms_of_service\"\n          }\n        },\n        \"strong_password_requirement\": {\n          \"enterprise_has_strong_password_required_for_external_users\": true,\n          \"user_has_strong_password\": true\n        },\n        \"two_factor_authentication_requirement\": {\n          \"enterprise_has_two_factor_auth_enabled\": true,\n          \"user_has_two_factor_authentication_enabled\": true\n        }\n      }\n    }\n  ]\n}"
            }
          ]
        }
      ],
      "_postman_id": "c695264a-601d-4401-a2c1-2d7eebd58462"
    },
    {
      "name": "Collaborations (Group)",
      "item": [
        {
          "name": "List collaborations for group",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "aef4083e-0a2e-49e7-b498-277f70fbdb5e",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "336405b7-8d3d-4e79-a6bc-4e71a79cc697",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/groups/:group_id/collaborations?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "groups",
                ":group_id",
                "collaborations"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "1000",
                  "description": "The maximum number of items to return per page.",
                  "disabled": true
                },
                {
                  "key": "offset",
                  "value": "1000",
                  "description": "The offset of the item at which to begin the response.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "c8d575b2-7c34-4e55-ae91-d98a8d605fa1",
                  "key": "group_id",
                  "value": "57645",
                  "type": "string",
                  "description": "The ID of the group."
                }
              ]
            },
            "description": "Retrieves all the collaborations for a group. The user\n\nhttps://developer.box.com/en/reference/get-groups-id-collaborations"
          },
          "response": [
            {
              "id": "8dc181f1-d182-4316-8857-29cc0fcbb4f3",
              "name": "[200] Returns a collection of collaboration objects. If there are no",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/groups/:group_id/collaborations?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "groups",
                    ":group_id",
                    "collaborations"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    },
                    {
                      "key": "offset",
                      "value": "1000",
                      "description": "The offset of the item at which to begin the response.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "c8d575b2-7c34-4e55-ae91-d98a8d605fa1",
                      "key": "group_id",
                      "value": "57645",
                      "type": "string",
                      "description": "The ID of the group."
                    }
                  ]
                },
                "description": "Retrieves all the collaborations for a group. The user\n\nhttps://developer.box.com/en/reference/get-groups-id-collaborations"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"total_count\": 5000,\n  \"limit\": 1000,\n  \"offset\": 2000,\n  \"order\": [\n    {\n      \"by\": \"type\",\n      \"direction\": \"ASC\"\n    }\n  ],\n  \"entries\": [\n    {\n      \"id\": \"11446498\",\n      \"type\": \"collaboration\",\n      \"item\": {\n        \"id\": \"11446498\",\n        \"type\": \"file\",\n        \"sequence_id\": \"3\",\n        \"etag\": \"1\",\n        \"name\": \"Pictures\"\n      },\n      \"accessible_by\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      },\n      \"invite_email\": \"john@example.com\",\n      \"role\": \"editor\",\n      \"expires_at\": \"2012-12-12T10:53:43-08:00\",\n      \"status\": \"accepted\",\n      \"acknowledged_at\": \"2012-12-12T10:53:43-08:00\",\n      \"created_by\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      },\n      \"created_at\": \"2012-12-12T10:53:43-08:00\",\n      \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n      \"acceptance_requirements_status\": {\n        \"terms_of_service_requirement\": {\n          \"is_accepted\": true,\n          \"terms_of_service\": {\n            \"id\": \"11446498\",\n            \"type\": \"terms_of_service\"\n          }\n        },\n        \"strong_password_requirement\": {\n          \"enterprise_has_strong_password_required_for_external_users\": true,\n          \"user_has_strong_password\": true\n        },\n        \"two_factor_authentication_requirement\": {\n          \"enterprise_has_two_factor_auth_enabled\": true,\n          \"user_has_two_factor_authentication_enabled\": true\n        }\n      }\n    }\n  ]\n}"
            }
          ]
        }
      ],
      "_postman_id": "2418bd2b-cbc7-4331-aaf9-49c01b14479e"
    },
    {
      "name": "Collaborations (Users)",
      "item": [
        {
          "name": "Get collaboration",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "fb898b21-53db-47a8-aed1-58d5245d7e0a",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "a8a847df-7150-4845-b533-f9393787db1d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/collaborations/:collaboration_id?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "collaborations",
                ":collaboration_id"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "dd2d35e2-7fa4-47dc-8ff7-70aac8e6b306",
                  "key": "collaboration_id",
                  "value": "1234",
                  "type": "string",
                  "description": "The ID of the collaboration"
                }
              ]
            },
            "description": "Retrieves a single collaboration.\n\nhttps://developer.box.com/en/reference/get-collaborations-id"
          },
          "response": [
            {
              "id": "609d9be2-450b-4dbc-9582-35321c142909",
              "name": "[200] Returns a collaboration object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/collaborations/:collaboration_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "collaborations",
                    ":collaboration_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "dd2d35e2-7fa4-47dc-8ff7-70aac8e6b306",
                      "key": "collaboration_id",
                      "value": "1234",
                      "type": "string",
                      "description": "The ID of the collaboration"
                    }
                  ]
                },
                "description": "Retrieves a single collaboration.\n\nhttps://developer.box.com/en/reference/get-collaborations-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"collaboration\",\n  \"item\": {\n    \"id\": \"11446498\",\n    \"type\": \"file\",\n    \"sequence_id\": \"3\",\n    \"etag\": \"1\",\n    \"name\": \"Pictures\"\n  },\n  \"accessible_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"invite_email\": \"john@example.com\",\n  \"role\": \"editor\",\n  \"expires_at\": \"2012-12-12T10:53:43-08:00\",\n  \"status\": \"accepted\",\n  \"acknowledged_at\": \"2012-12-12T10:53:43-08:00\",\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"acceptance_requirements_status\": {\n    \"terms_of_service_requirement\": {\n      \"is_accepted\": true,\n      \"terms_of_service\": {\n        \"id\": \"11446498\",\n        \"type\": \"terms_of_service\"\n      }\n    },\n    \"strong_password_requirement\": {\n      \"enterprise_has_strong_password_required_for_external_users\": true,\n      \"user_has_strong_password\": true\n    },\n    \"two_factor_authentication_requirement\": {\n      \"enterprise_has_two_factor_auth_enabled\": true,\n      \"user_has_two_factor_authentication_enabled\": true\n    }\n  }\n}"
            }
          ]
        },
        {
          "name": "List pending collaborations",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "32afe831-9f2c-4add-87c7-e5fcf54ef4b6",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "94f4da3e-b2af-494f-bc93-e71f1e70a937",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/collaborations?status=pending",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "collaborations"
              ],
              "query": [
                {
                  "key": "status",
                  "value": "pending",
                  "description": "The status of the collaborations to retrieve"
                },
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                },
                {
                  "key": "offset",
                  "value": "1000",
                  "description": "The offset of the item at which to begin the response.",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "1000",
                  "description": "The maximum number of items to return per page.",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieves all pending collaboration invites for this user.\n\nhttps://developer.box.com/en/reference/get-collaborations"
          },
          "response": [
            {
              "id": "bd09ee63-5d17-47ce-933f-a2fa921f1271",
              "name": "[200] Returns a collection of pending collaboration objects.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/collaborations?status=pending",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "collaborations"
                  ],
                  "query": [
                    {
                      "key": "status",
                      "value": "pending",
                      "description": "The status of the collaborations to retrieve"
                    },
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    },
                    {
                      "key": "offset",
                      "value": "1000",
                      "description": "The offset of the item at which to begin the response.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Retrieves all pending collaboration invites for this user.\n\nhttps://developer.box.com/en/reference/get-collaborations"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"total_count\": 5000,\n  \"limit\": 1000,\n  \"offset\": 2000,\n  \"order\": [\n    {\n      \"by\": \"type\",\n      \"direction\": \"ASC\"\n    }\n  ],\n  \"entries\": [\n    {\n      \"id\": \"11446498\",\n      \"type\": \"collaboration\",\n      \"item\": {\n        \"id\": \"11446498\",\n        \"type\": \"file\",\n        \"sequence_id\": \"3\",\n        \"etag\": \"1\",\n        \"name\": \"Pictures\"\n      },\n      \"accessible_by\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      },\n      \"invite_email\": \"john@example.com\",\n      \"role\": \"editor\",\n      \"expires_at\": \"2012-12-12T10:53:43-08:00\",\n      \"status\": \"accepted\",\n      \"acknowledged_at\": \"2012-12-12T10:53:43-08:00\",\n      \"created_by\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      },\n      \"created_at\": \"2012-12-12T10:53:43-08:00\",\n      \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n      \"acceptance_requirements_status\": {\n        \"terms_of_service_requirement\": {\n          \"is_accepted\": true,\n          \"terms_of_service\": {\n            \"id\": \"11446498\",\n            \"type\": \"terms_of_service\"\n          }\n        },\n        \"strong_password_requirement\": {\n          \"enterprise_has_strong_password_required_for_external_users\": true,\n          \"user_has_strong_password\": true\n        },\n        \"two_factor_authentication_requirement\": {\n          \"enterprise_has_two_factor_auth_enabled\": true,\n          \"user_has_two_factor_authentication_enabled\": true\n        }\n      }\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "Create collaboration",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "9acb47db-f594-4695-9926-0be60f646779",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "ff63a5e2-304e-46cb-9cc7-0b9cb868f446",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"item\": {\n    \"type\": \"file\",\n    \"id\": \"11446498\"\n  },\n  \"accessible_by\": {\n    \"type\": \"user\",\n    \"id\": \"23522323\",\n    \"login\": \"john@example.com\"\n  },\n  \"role\": \"editor\",\n  \"can_view_path\": true\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/collaborations?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "collaborations"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                },
                {
                  "key": "notify",
                  "value": "true",
                  "description": "Determines if users should receive email notification\nfor the action performed.",
                  "disabled": true
                }
              ]
            },
            "description": "Adds a collaboration for a single user or a single group to a file\n\nhttps://developer.box.com/en/reference/post-collaborations"
          },
          "response": [
            {
              "id": "3e37341d-d913-458e-b658-b653102400a2",
              "name": "[201] Returns a new collaboration object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"item\": {\n    \"type\": \"file\",\n    \"id\": \"11446498\"\n  },\n  \"accessible_by\": {\n    \"type\": \"user\",\n    \"id\": \"23522323\",\n    \"login\": \"john@example.com\"\n  },\n  \"role\": \"editor\",\n  \"can_view_path\": true\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/collaborations?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "collaborations"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    },
                    {
                      "key": "notify",
                      "value": "true",
                      "description": "Determines if users should receive email notification\nfor the action performed.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Adds a collaboration for a single user or a single group to a file\n\nhttps://developer.box.com/en/reference/post-collaborations"
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"collaboration\",\n  \"item\": {\n    \"id\": \"11446498\",\n    \"type\": \"file\",\n    \"sequence_id\": \"3\",\n    \"etag\": \"1\",\n    \"name\": \"Pictures\"\n  },\n  \"accessible_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"invite_email\": \"john@example.com\",\n  \"role\": \"editor\",\n  \"expires_at\": \"2012-12-12T10:53:43-08:00\",\n  \"status\": \"accepted\",\n  \"acknowledged_at\": \"2012-12-12T10:53:43-08:00\",\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"acceptance_requirements_status\": {\n    \"terms_of_service_requirement\": {\n      \"is_accepted\": true,\n      \"terms_of_service\": {\n        \"id\": \"11446498\",\n        \"type\": \"terms_of_service\"\n      }\n    },\n    \"strong_password_requirement\": {\n      \"enterprise_has_strong_password_required_for_external_users\": true,\n      \"user_has_strong_password\": true\n    },\n    \"two_factor_authentication_requirement\": {\n      \"enterprise_has_two_factor_auth_enabled\": true,\n      \"user_has_two_factor_authentication_enabled\": true\n    }\n  }\n}"
            }
          ]
        },
        {
          "name": "Update collaboration",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3cf6cf8a-b08e-4fcf-a9e7-df3b8ed9bff5",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "9b72aca1-e3b5-4cfc-b579-d6d94f6c266d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"role\": \"editor\",\n  \"status\": \"accepted\",\n  \"expires_at\": \"2019-08-29T23:59:00-07:00\",\n  \"can_view_path\": true\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/collaborations/:collaboration_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "collaborations",
                ":collaboration_id"
              ],
              "variable": [
                {
                  "id": "937ab2dd-fd58-48ee-81ef-c4346643b086",
                  "key": "collaboration_id",
                  "value": "1234",
                  "type": "string",
                  "description": "The ID of the collaboration"
                }
              ]
            },
            "description": "Updates a collaboration.\n\nhttps://developer.box.com/en/reference/put-collaborations-id"
          },
          "response": [
            {
              "id": "141154f2-763b-4de1-aa83-6aac9ba4b42f",
              "name": "[204] If the role is changed to `owner`, the collaboration is deleted",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"role\": \"editor\",\n  \"status\": \"accepted\",\n  \"expires_at\": \"2019-08-29T23:59:00-07:00\",\n  \"can_view_path\": true\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/collaborations/:collaboration_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "collaborations",
                    ":collaboration_id"
                  ],
                  "variable": [
                    {
                      "id": "937ab2dd-fd58-48ee-81ef-c4346643b086",
                      "key": "collaboration_id",
                      "value": "1234",
                      "type": "string",
                      "description": "The ID of the collaboration"
                    }
                  ]
                },
                "description": "Updates a collaboration.\n\nhttps://developer.box.com/en/reference/put-collaborations-id"
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"collaboration\",\n  \"item\": {\n    \"id\": \"11446498\",\n    \"type\": \"file\",\n    \"sequence_id\": \"3\",\n    \"etag\": \"1\",\n    \"name\": \"Pictures\"\n  },\n  \"accessible_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"invite_email\": \"john@example.com\",\n  \"role\": \"editor\",\n  \"expires_at\": \"2012-12-12T10:53:43-08:00\",\n  \"status\": \"accepted\",\n  \"acknowledged_at\": \"2012-12-12T10:53:43-08:00\",\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"acceptance_requirements_status\": {\n    \"terms_of_service_requirement\": {\n      \"is_accepted\": true,\n      \"terms_of_service\": {\n        \"id\": \"11446498\",\n        \"type\": \"terms_of_service\"\n      }\n    },\n    \"strong_password_requirement\": {\n      \"enterprise_has_strong_password_required_for_external_users\": true,\n      \"user_has_strong_password\": true\n    },\n    \"two_factor_authentication_requirement\": {\n      \"enterprise_has_two_factor_auth_enabled\": true,\n      \"user_has_two_factor_authentication_enabled\": true\n    }\n  }\n}"
            },
            {
              "id": "bff3f6c5-24e0-412a-90f9-58cc71ee7052",
              "name": "[200] Returns an updated collaboration object unless the owner has changed.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"role\": \"editor\",\n  \"status\": \"accepted\",\n  \"expires_at\": \"2019-08-29T23:59:00-07:00\",\n  \"can_view_path\": true\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/collaborations/:collaboration_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "collaborations",
                    ":collaboration_id"
                  ],
                  "variable": [
                    {
                      "id": "937ab2dd-fd58-48ee-81ef-c4346643b086",
                      "key": "collaboration_id",
                      "value": "1234",
                      "type": "string",
                      "description": "The ID of the collaboration"
                    }
                  ]
                },
                "description": "Updates a collaboration.\n\nhttps://developer.box.com/en/reference/put-collaborations-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"collaboration\",\n  \"item\": {\n    \"id\": \"11446498\",\n    \"type\": \"file\",\n    \"sequence_id\": \"3\",\n    \"etag\": \"1\",\n    \"name\": \"Pictures\"\n  },\n  \"accessible_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"invite_email\": \"john@example.com\",\n  \"role\": \"editor\",\n  \"expires_at\": \"2012-12-12T10:53:43-08:00\",\n  \"status\": \"accepted\",\n  \"acknowledged_at\": \"2012-12-12T10:53:43-08:00\",\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"acceptance_requirements_status\": {\n    \"terms_of_service_requirement\": {\n      \"is_accepted\": true,\n      \"terms_of_service\": {\n        \"id\": \"11446498\",\n        \"type\": \"terms_of_service\"\n      }\n    },\n    \"strong_password_requirement\": {\n      \"enterprise_has_strong_password_required_for_external_users\": true,\n      \"user_has_strong_password\": true\n    },\n    \"two_factor_authentication_requirement\": {\n      \"enterprise_has_two_factor_auth_enabled\": true,\n      \"user_has_two_factor_authentication_enabled\": true\n    }\n  }\n}"
            }
          ]
        },
        {
          "name": "Remove collaboration",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6fb7b7b4-24e3-407a-8e33-a57984cfbe85",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "1a02d859-e1fc-4049-bf80-b912696487c1",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/collaborations/:collaboration_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "collaborations",
                ":collaboration_id"
              ],
              "variable": [
                {
                  "id": "1cfdc1fb-596a-42b4-a9bc-6ee3c40d88c5",
                  "key": "collaboration_id",
                  "value": "1234",
                  "type": "string",
                  "description": "The ID of the collaboration"
                }
              ]
            },
            "description": "Deletes a single collaboration.\n\nhttps://developer.box.com/en/reference/delete-collaborations-id"
          },
          "response": [
            {
              "id": "d476526b-6a65-4195-8b5a-3e8cd345a3c7",
              "name": "[204] A blank response is returned if the collaboration was",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/collaborations/:collaboration_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "collaborations",
                    ":collaboration_id"
                  ],
                  "variable": [
                    {
                      "id": "1cfdc1fb-596a-42b4-a9bc-6ee3c40d88c5",
                      "key": "collaboration_id",
                      "value": "1234",
                      "type": "string",
                      "description": "The ID of the collaboration"
                    }
                  ]
                },
                "description": "Deletes a single collaboration.\n\nhttps://developer.box.com/en/reference/delete-collaborations-id"
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        }
      ],
      "_postman_id": "fa7e4647-7548-4eef-9cc3-6e1cb7bfe7de"
    },
    {
      "name": "Collections",
      "item": [
        {
          "name": "List all collections",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "139fd243-09ba-4cba-b06e-702d4f0bc039",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "0009092d-e598-4740-8da6-607f1dbf4a08",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/collections?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "collections"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                },
                {
                  "key": "offset",
                  "value": "1000",
                  "description": "The offset of the item at which to begin the response.",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "1000",
                  "description": "The maximum number of items to return per page.",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieves all collections for a given user.\n\nhttps://developer.box.com/en/reference/get-collections"
          },
          "response": [
            {
              "id": "1a32ecb1-f058-4291-8931-ef2b7df27c95",
              "name": "[200] Returns all collections for the given user",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/collections?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "collections"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    },
                    {
                      "key": "offset",
                      "value": "1000",
                      "description": "The offset of the item at which to begin the response.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Retrieves all collections for a given user.\n\nhttps://developer.box.com/en/reference/get-collections"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"total_count\": 5000,\n  \"limit\": 1000,\n  \"offset\": 2000,\n  \"order\": [\n    {\n      \"by\": \"type\",\n      \"direction\": \"ASC\"\n    }\n  ],\n  \"entries\": [\n    {\n      \"id\": \"11446498\",\n      \"type\": \"collection\",\n      \"name\": \"Favorites\",\n      \"collection_type\": \"favorites\"\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "List collection items",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "9cadb79d-c3df-4e3b-977c-65c134d9a62f",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "659e7826-f5a5-4a3d-bca0-576b9d2f7e64",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/collections/:collection_id/items?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "collections",
                ":collection_id",
                "items"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                },
                {
                  "key": "offset",
                  "value": "1000",
                  "description": "The offset of the item at which to begin the response.",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "1000",
                  "description": "The maximum number of items to return per page.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "b6831c2a-f8ba-498a-9b8b-65b42848225f",
                  "key": "collection_id",
                  "value": "926489",
                  "type": "string",
                  "description": "The ID of the collection."
                }
              ]
            },
            "description": "Retrieves the files and/or folders contained within\n\nhttps://developer.box.com/en/reference/get-collections-id-items"
          },
          "response": [
            {
              "id": "2c578d9c-538b-42ba-b08d-f89ecf69b9ee",
              "name": "[200] Returns an array of items in the collection.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/collections/:collection_id/items?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "collections",
                    ":collection_id",
                    "items"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    },
                    {
                      "key": "offset",
                      "value": "1000",
                      "description": "The offset of the item at which to begin the response.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "b6831c2a-f8ba-498a-9b8b-65b42848225f",
                      "key": "collection_id",
                      "value": "926489",
                      "type": "string",
                      "description": "The ID of the collection."
                    }
                  ]
                },
                "description": "Retrieves the files and/or folders contained within\n\nhttps://developer.box.com/en/reference/get-collections-id-items"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"total_count\": 5000,\n  \"limit\": 1000,\n  \"offset\": 2000,\n  \"order\": [\n    {\n      \"by\": \"type\",\n      \"direction\": \"ASC\"\n    }\n  ],\n  \"entries\": {\n    \"id\": \"12345\",\n    \"etag\": \"1\",\n    \"type\": \"file\",\n    \"sequence_id\": \"3\",\n    \"name\": \"Contract.pdf\"\n  }\n}"
            }
          ]
        }
      ],
      "_postman_id": "2a758f40-feb0-4b42-bdbc-19b5790faea4"
    },
    {
      "name": "Comments",
      "item": [
        {
          "name": "List file comments",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1243520b-05c8-411b-84a2-33ec96ac553d",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "97c89380-3a0d-44e0-a289-bcd90c7ee26e",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/files/:file_id/comments?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "files",
                ":file_id",
                "comments"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "1000",
                  "description": "The maximum number of items to return per page.",
                  "disabled": true
                },
                {
                  "key": "offset",
                  "value": "1000",
                  "description": "The offset of the item at which to begin the response.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "a2da45db-ce39-4462-b8ac-4694952eb30a",
                  "key": "file_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                }
              ]
            },
            "description": "Retrieves a list of comments for a file.\n\nhttps://developer.box.com/en/reference/get-files-id-comments"
          },
          "response": [
            {
              "id": "af7105e4-e436-4301-b0c9-64dd526c1cb4",
              "name": "[200] Returns a collection of comment objects. If there are no",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/comments?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "comments"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    },
                    {
                      "key": "offset",
                      "value": "1000",
                      "description": "The offset of the item at which to begin the response.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "a2da45db-ce39-4462-b8ac-4694952eb30a",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Retrieves a list of comments for a file.\n\nhttps://developer.box.com/en/reference/get-files-id-comments"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"total_count\": 5000,\n  \"limit\": 1000,\n  \"offset\": 2000,\n  \"order\": [\n    {\n      \"by\": \"type\",\n      \"direction\": \"ASC\"\n    }\n  ],\n  \"entries\": [\n    {\n      \"id\": \"11446498\",\n      \"type\": \"comment\",\n      \"is_reply_comment\": true,\n      \"message\": \"@Aaron Levie these tigers are cool!\",\n      \"created_by\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      },\n      \"created_at\": \"2012-12-12T10:53:43-08:00\",\n      \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n      \"item\": {\n        \"id\": \"11446498\"\n      },\n      \"tagged_message\": \"@[1234567:Aaron Levie] these tigers are cool!\"\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "Get comment",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "98594e69-b8ff-40ea-aeb7-28bd08079662",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "e7a8cfbb-5393-4936-85a9-68c5dc39495c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/comments/:comment_id?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "comments",
                ":comment_id"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "d8376bf0-0aaa-4191-b080-41cd0bff084b",
                  "key": "comment_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The ID of the comment."
                }
              ]
            },
            "description": "Retrieves the message and metadata for a specific comment, as well\n\nhttps://developer.box.com/en/reference/get-comments-id"
          },
          "response": [
            {
              "id": "1969013c-4548-472d-9827-7f3f97d348f9",
              "name": "[200] Returns a full comment object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/comments/:comment_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "comments",
                    ":comment_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "d8376bf0-0aaa-4191-b080-41cd0bff084b",
                      "key": "comment_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the comment."
                    }
                  ]
                },
                "description": "Retrieves the message and metadata for a specific comment, as well\n\nhttps://developer.box.com/en/reference/get-comments-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"comment\",\n  \"is_reply_comment\": true,\n  \"message\": \"@Aaron Levie these tigers are cool!\",\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"item\": {\n    \"id\": \"11446498\"\n  },\n  \"tagged_message\": \"@[1234567:Aaron Levie] these tigers are cool!\"\n}"
            }
          ]
        },
        {
          "name": "Create comment",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0629e4fe-f675-4d35-a1d0-7b1e8bcd66cb",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "3e7e28e0-8f57-4d2e-9887-6b1d239a6aa4",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Review completed!\",\n  \"tagged_message\": \"@[1234:John] Review completed!\",\n  \"item\": {\n    \"id\": \"11446498\",\n    \"type\": \"file\"\n  }\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/comments?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "comments"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ]
            },
            "description": "Adds a comment comment by the user to a specific file, or\n\nhttps://developer.box.com/en/reference/post-comments"
          },
          "response": [
            {
              "id": "91b70b81-8885-40d9-9280-9d16d086f678",
              "name": "[201] Returns the newly created comment object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Review completed!\",\n  \"tagged_message\": \"@[1234:John] Review completed!\",\n  \"item\": {\n    \"id\": \"11446498\",\n    \"type\": \"file\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/comments?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "comments"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Adds a comment comment by the user to a specific file, or\n\nhttps://developer.box.com/en/reference/post-comments"
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"comment\",\n  \"is_reply_comment\": true,\n  \"message\": \"@Aaron Levie these tigers are cool!\",\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"item\": {\n    \"id\": \"11446498\"\n  },\n  \"tagged_message\": \"@[1234567:Aaron Levie] these tigers are cool!\"\n}"
            }
          ]
        },
        {
          "name": "Update comment",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6ab4307a-7b50-45df-b251-8028dfd5f25e",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "f98cac29-f69f-4432-8042-647247d19755",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Review completed!\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/comments/:comment_id?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "comments",
                ":comment_id"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "5b1cba7e-1a93-497d-b2ae-220776aa8831",
                  "key": "comment_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The ID of the comment."
                }
              ]
            },
            "description": "Update the message of a comment.\n\nhttps://developer.box.com/en/reference/put-comments-id"
          },
          "response": [
            {
              "id": "e1da9542-2f36-4738-9731-51041e0f4267",
              "name": "[200] Returns the updated comment object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Review completed!\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/comments/:comment_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "comments",
                    ":comment_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "5b1cba7e-1a93-497d-b2ae-220776aa8831",
                      "key": "comment_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the comment."
                    }
                  ]
                },
                "description": "Update the message of a comment.\n\nhttps://developer.box.com/en/reference/put-comments-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"comment\",\n  \"is_reply_comment\": true,\n  \"message\": \"@Aaron Levie these tigers are cool!\",\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"item\": {\n    \"id\": \"11446498\"\n  },\n  \"tagged_message\": \"@[1234567:Aaron Levie] these tigers are cool!\"\n}"
            }
          ]
        },
        {
          "name": "Remove comment",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b7d835ff-29ce-4af3-b861-1e9a4b4a585b",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "a91e2b49-6ad2-4469-b234-97cc2f238122",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/comments/:comment_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "comments",
                ":comment_id"
              ],
              "variable": [
                {
                  "id": "4ff3b73a-76e5-40e8-9cdf-62ce1b432b74",
                  "key": "comment_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The ID of the comment."
                }
              ]
            },
            "description": "Permanently deletes a comment.\n\nhttps://developer.box.com/en/reference/delete-comments-id"
          },
          "response": [
            {
              "id": "97644bae-9e4b-43a3-ae03-7bc769bf9e8e",
              "name": "[204] Returns an empty response when the comment has been deleted.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/comments/:comment_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "comments",
                    ":comment_id"
                  ],
                  "variable": [
                    {
                      "id": "4ff3b73a-76e5-40e8-9cdf-62ce1b432b74",
                      "key": "comment_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the comment."
                    }
                  ]
                },
                "description": "Permanently deletes a comment.\n\nhttps://developer.box.com/en/reference/delete-comments-id"
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        }
      ],
      "_postman_id": "716c223b-6a19-4594-a04a-432bed43bc18"
    },
    {
      "name": "Device pinners",
      "item": [
        {
          "name": "Get device pin",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "faac90fb-aefc-4c88-943f-89e8a82ef559",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "d3ffc637-d14a-4e73-a7f2-30f549ba921a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/device_pinners/:device_pinner_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "device_pinners",
                ":device_pinner_id"
              ],
              "variable": [
                {
                  "id": "5e568e91-21d7-4ce1-a344-0189a944f59b",
                  "key": "device_pinner_id",
                  "value": "2324234",
                  "type": "string",
                  "description": "The ID of the device pin"
                }
              ]
            },
            "description": "Retrieves information about an individual device pin.\n\nhttps://developer.box.com/en/reference/get-device-pinners-id"
          },
          "response": [
            {
              "id": "cd837075-50e9-42ec-b446-9b3cf02661e9",
              "name": "[200] Returns information about a single device pin.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/device_pinners/:device_pinner_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "device_pinners",
                    ":device_pinner_id"
                  ],
                  "variable": [
                    {
                      "id": "5e568e91-21d7-4ce1-a344-0189a944f59b",
                      "key": "device_pinner_id",
                      "value": "2324234",
                      "type": "string",
                      "description": "The ID of the device pin"
                    }
                  ]
                },
                "description": "Retrieves information about an individual device pin.\n\nhttps://developer.box.com/en/reference/get-device-pinners-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"device_pinner\",\n  \"owned_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"product_name\": \"iPad\",\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\"\n}"
            }
          ]
        },
        {
          "name": "List enterprise device pins",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b6b16840-11bd-4b62-8edd-c57be8c730ba",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "93e72c67-b5d0-4f7a-8345-05380703766d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/enterprises/:enterprise_id/device_pinners?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "enterprises",
                ":enterprise_id",
                "device_pinners"
              ],
              "query": [
                {
                  "key": "marker",
                  "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                  "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "1000",
                  "description": "The maximum number of items to return per page.",
                  "disabled": true
                },
                {
                  "key": "direction",
                  "value": "ASC",
                  "description": "The direction to sort results in. This can be either in alphabetical ascending\n(`ASC`) or descending (`DESC`) order.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "3cebe118-eca6-434d-bca5-0030c90fd4fd",
                  "key": "enterprise_id",
                  "value": "3442311",
                  "type": "string",
                  "description": "The ID of the enterprise"
                }
              ]
            },
            "description": "Retrieves all the device pins within an enterprise.\n\nhttps://developer.box.com/en/reference/get-enterprises-id-device-pinners"
          },
          "response": [
            {
              "id": "4c557288-8ea7-4532-83d4-d10879ef31aa",
              "name": "[200] Returns a list of device pins for a given enterprise.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/enterprises/:enterprise_id/device_pinners?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "enterprises",
                    ":enterprise_id",
                    "device_pinners"
                  ],
                  "query": [
                    {
                      "key": "marker",
                      "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                      "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    },
                    {
                      "key": "direction",
                      "value": "ASC",
                      "description": "The direction to sort results in. This can be either in alphabetical ascending\n(`ASC`) or descending (`DESC`) order.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "3cebe118-eca6-434d-bca5-0030c90fd4fd",
                      "key": "enterprise_id",
                      "value": "3442311",
                      "type": "string",
                      "description": "The ID of the enterprise"
                    }
                  ]
                },
                "description": "Retrieves all the device pins within an enterprise.\n\nhttps://developer.box.com/en/reference/get-enterprises-id-device-pinners"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"limit\": 1000,\n  \"next_marker\": 3000,\n  \"prev_marker\": 1000,\n  \"entries\": [\n    {\n      \"id\": \"11446498\",\n      \"type\": \"device_pinner\",\n      \"owned_by\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      },\n      \"product_name\": \"iPad\",\n      \"created_at\": \"2012-12-12T10:53:43-08:00\",\n      \"modified_at\": \"2012-12-12T10:53:43-08:00\"\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "Remove device pin",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "bfe8f1eb-19d4-49fd-8efe-8636fc911359",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "4c820960-8420-48cb-9cbe-cf0672056d89",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/device_pinners/:device_pinner_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "device_pinners",
                ":device_pinner_id"
              ],
              "variable": [
                {
                  "id": "6bc9a29f-a120-4d4c-827c-cdea84228dfb",
                  "key": "device_pinner_id",
                  "value": "2324234",
                  "type": "string",
                  "description": "The ID of the device pin"
                }
              ]
            },
            "description": "Deletes an individual device pin.\n\nhttps://developer.box.com/en/reference/delete-device-pinners-id"
          },
          "response": [
            {
              "id": "abbe2b74-5759-43b0-a945-3665a1bc16ad",
              "name": "[204] Returns an empty response when the pin has been deleted.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/device_pinners/:device_pinner_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "device_pinners",
                    ":device_pinner_id"
                  ],
                  "variable": [
                    {
                      "id": "6bc9a29f-a120-4d4c-827c-cdea84228dfb",
                      "key": "device_pinner_id",
                      "value": "2324234",
                      "type": "string",
                      "description": "The ID of the device pin"
                    }
                  ]
                },
                "description": "Deletes an individual device pin.\n\nhttps://developer.box.com/en/reference/delete-device-pinners-id"
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        }
      ],
      "_postman_id": "dbfe7f5b-32a6-4847-9722-87822f314bf8"
    },
    {
      "name": "Downloads",
      "item": [
        {
          "name": "Download file",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "a30c442a-b7c5-4c51-bc64-06b4c3656aef",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "eefa25e2-e1b7-4e34-aeb8-1f4999061f71",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [
              {
                "key": "Range",
                "value": "0-1024",
                "description": "The byte range of the content to download.\n\nThe format `{start_byte}-{end_byte}` can be used to specify\nwhat section of the file to download.",
                "disabled": true
              },
              {
                "key": "BoxApi",
                "value": "shared_link=[link]",
                "description": "The URL and password for a file that has\nbeen shared using a shared link, as this file would otherwise\nnot be accessible to the user.\n\nUse the format `shared_link=SHARED_LINK_URL` or if a password was set\nuse `shared_link=[link]&shared_link_password=[password]`",
                "disabled": true
              }
            ],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/files/:file_id/content?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "files",
                ":file_id",
                "content"
              ],
              "query": [
                {
                  "key": "version",
                  "value": "4",
                  "description": "The file version to download",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "599804b2-05e5-49e1-b375-db3ff4dab30c",
                  "key": "file_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                }
              ]
            },
            "description": "Returns the contents of a file in binary format.\n\nhttps://developer.box.com/en/reference/get-files-id-content"
          },
          "response": [
            {
              "id": "9d9f160d-55ff-4c9f-8cfe-f6b1dc9a5cc7",
              "name": "[202] If the file is not ready to be downloaded yet `Retry-After` header will",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Range",
                    "value": "0-1024",
                    "description": "The byte range of the content to download.\n\nThe format `{start_byte}-{end_byte}` can be used to specify\nwhat section of the file to download.",
                    "disabled": true
                  },
                  {
                    "key": "BoxApi",
                    "value": "shared_link=[link]",
                    "description": "The URL and password for a file that has\nbeen shared using a shared link, as this file would otherwise\nnot be accessible to the user.\n\nUse the format `shared_link=SHARED_LINK_URL` or if a password was set\nuse `shared_link=[link]&shared_link_password=[password]`",
                    "disabled": true
                  }
                ],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/content?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "content"
                  ],
                  "query": [
                    {
                      "key": "version",
                      "value": "4",
                      "description": "The file version to download",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "599804b2-05e5-49e1-b375-db3ff4dab30c",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Returns the contents of a file in binary format.\n\nhttps://developer.box.com/en/reference/get-files-id-content"
              },
              "status": "Accepted",
              "code": 202,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Retry-After",
                  "value": "",
                  "description": "The time in seconds after which to retry the download"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "ada0094c-4d75-493e-955e-512c0ca3bb8c",
              "name": "[302] If the file is available to be downloaded the response will include a",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "Range",
                    "value": "0-1024",
                    "description": "The byte range of the content to download.\n\nThe format `{start_byte}-{end_byte}` can be used to specify\nwhat section of the file to download.",
                    "disabled": true
                  },
                  {
                    "key": "BoxApi",
                    "value": "shared_link=[link]",
                    "description": "The URL and password for a file that has\nbeen shared using a shared link, as this file would otherwise\nnot be accessible to the user.\n\nUse the format `shared_link=SHARED_LINK_URL` or if a password was set\nuse `shared_link=[link]&shared_link_password=[password]`",
                    "disabled": true
                  }
                ],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/content?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "content"
                  ],
                  "query": [
                    {
                      "key": "version",
                      "value": "4",
                      "description": "The file version to download",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "599804b2-05e5-49e1-b375-db3ff4dab30c",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Returns the contents of a file in binary format.\n\nhttps://developer.box.com/en/reference/get-files-id-content"
              },
              "status": "Found",
              "code": 302,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Location",
                  "value": "",
                  "description": "A pointer to the download URL"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        }
      ],
      "_postman_id": "09b45113-6534-404f-8d0d-7bed34e0a0c7"
    },
    {
      "name": "Email aliases",
      "item": [
        {
          "name": "List user's email aliases",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "58c2d237-3ded-439a-8a80-fb269003059e",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "7f696d7f-4a69-463f-9b4b-6b7f4a516e5d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/users/:user_id/email_aliases",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "users",
                ":user_id",
                "email_aliases"
              ],
              "variable": [
                {
                  "id": "c636f21a-9443-4ae0-bac6-67538325e281",
                  "key": "user_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The ID of the user."
                }
              ]
            },
            "description": "Retrieves all email aliases for a user. The collection\n\nhttps://developer.box.com/en/reference/get-users-id-email-aliases"
          },
          "response": [
            {
              "id": "f391f9e1-6746-49a7-894d-272ed2d7ced6",
              "name": "[200] Returns a collection of email aliases.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/users/:user_id/email_aliases",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "users",
                    ":user_id",
                    "email_aliases"
                  ],
                  "variable": [
                    {
                      "id": "c636f21a-9443-4ae0-bac6-67538325e281",
                      "key": "user_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the user."
                    }
                  ]
                },
                "description": "Retrieves all email aliases for a user. The collection\n\nhttps://developer.box.com/en/reference/get-users-id-email-aliases"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"total_count\": 5000,\n  \"entries\": [\n    {\n      \"id\": \"11446498\",\n      \"type\": \"email_alias\",\n      \"email\": \"alias@example.com\",\n      \"is_confirmed\": true\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "Create email alias",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "68b0104b-3941-4a61-bdbd-9df09c706099",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "bbc5bb3c-f607-46f0-98c3-25e0c8970086",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"alias@example.com\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/users/:user_id/email_aliases",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "users",
                ":user_id",
                "email_aliases"
              ],
              "variable": [
                {
                  "id": "329203e0-1ed8-424e-a20b-ed2389e5dea9",
                  "key": "user_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The ID of the user."
                }
              ]
            },
            "description": "Adds a new email alias to a user account..\n\nhttps://developer.box.com/en/reference/post-users-id-email-aliases"
          },
          "response": [
            {
              "id": "dc51ec74-8772-458d-b74c-ee182b91600f",
              "name": "[201] Returns the newly created email alias object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"alias@example.com\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/users/:user_id/email_aliases",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "users",
                    ":user_id",
                    "email_aliases"
                  ],
                  "variable": [
                    {
                      "id": "329203e0-1ed8-424e-a20b-ed2389e5dea9",
                      "key": "user_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the user."
                    }
                  ]
                },
                "description": "Adds a new email alias to a user account..\n\nhttps://developer.box.com/en/reference/post-users-id-email-aliases"
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"email_alias\",\n  \"email\": \"alias@example.com\",\n  \"is_confirmed\": true\n}"
            }
          ]
        },
        {
          "name": "Remove email alias",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "69697123-1376-4600-a97d-9cd6b721d8d7",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "0ce0c162-112e-4c59-8e79-6706d0cedec1",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/users/:user_id/email_aliases/:email_alias_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "users",
                ":user_id",
                "email_aliases",
                ":email_alias_id"
              ],
              "variable": [
                {
                  "id": "81c564a9-5a48-4069-b233-4c50741c479e",
                  "key": "user_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The ID of the user."
                },
                {
                  "id": "58f5ca32-594e-4942-8472-7e2977c9ec19",
                  "key": "email_alias_id",
                  "value": "23432",
                  "type": "string",
                  "description": "The ID of the email alias."
                }
              ]
            },
            "description": "Removes an email alias from a user.\n\nhttps://developer.box.com/en/reference/delete-users-id-email-aliases-id"
          },
          "response": [
            {
              "id": "f7d5c742-6cd2-4c3d-af5b-8d5696ebb9ed",
              "name": "[204] Removes the alias and returns an empty response.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/users/:user_id/email_aliases/:email_alias_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "users",
                    ":user_id",
                    "email_aliases",
                    ":email_alias_id"
                  ],
                  "variable": [
                    {
                      "id": "81c564a9-5a48-4069-b233-4c50741c479e",
                      "key": "user_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the user."
                    },
                    {
                      "id": "58f5ca32-594e-4942-8472-7e2977c9ec19",
                      "key": "email_alias_id",
                      "value": "23432",
                      "type": "string",
                      "description": "The ID of the email alias."
                    }
                  ]
                },
                "description": "Removes an email alias from a user.\n\nhttps://developer.box.com/en/reference/delete-users-id-email-aliases-id"
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        }
      ],
      "_postman_id": "bdfbc30d-edd2-4e7c-acac-32f2380713c7"
    },
    {
      "name": "Events",
      "item": [
        {
          "name": "List user and enterprise events",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "9910b137-76ee-40ba-94b2-3661273a7cb3",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "eaf8e6f5-b508-4244-bd49-e97d3053f27c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/events?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "events"
              ],
              "query": [
                {
                  "key": "stream_type",
                  "value": "all",
                  "description": "Defines the type of events that are returned\n\n* `all` returns everything for a user and is the default\n* `changes` returns events that may cause file tree changes\n  such as file updates or collaborations.\n* `sync` is similar to `changes` but only applies to synced folders\n* `admin_logs` returns all events for an entire enterprise and\n  requires the user making the API call to have admin permissions.",
                  "disabled": true
                },
                {
                  "key": "stream_position",
                  "value": "1348790499819",
                  "description": "The location in the event stream to start receiving events from.\n\n* `now` will return an empty list events and\nthe latest stream position for initialization.\n* `0` or `null` will return all events.",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "50",
                  "description": "Limits the number of events returned",
                  "disabled": true
                },
                {
                  "key": "event_type",
                  "value": "[\"ACCESS_GRANTED\"]",
                  "description": "A comma-separated list of events to filter by. This can only be used when\nrequesting the events with a `stream_type` of `admin_logs`. For any other\n`stream_type` this value will be ignored.",
                  "disabled": true
                },
                {
                  "key": "created_after",
                  "value": "2012-12-12T10:53:43-08:00",
                  "description": "The lower bound date and time to return events for.",
                  "disabled": true
                },
                {
                  "key": "created_before",
                  "value": "2013-12-12T10:53:43-08:00",
                  "description": "The upper bound date and time to return events for.",
                  "disabled": true
                }
              ]
            },
            "description": "Returns up to a year of past events for a given user\n\nhttps://developer.box.com/en/reference/get-events"
          },
          "response": [
            {
              "id": "eb4f097f-c95e-4f10-b041-f6dc60d55428",
              "name": "[200] Returns a list of event objects.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/events?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "events"
                  ],
                  "query": [
                    {
                      "key": "stream_type",
                      "value": "all",
                      "description": "Defines the type of events that are returned\n\n* `all` returns everything for a user and is the default\n* `changes` returns events that may cause file tree changes\n  such as file updates or collaborations.\n* `sync` is similar to `changes` but only applies to synced folders\n* `admin_logs` returns all events for an entire enterprise and\n  requires the user making the API call to have admin permissions.",
                      "disabled": true
                    },
                    {
                      "key": "stream_position",
                      "value": "1348790499819",
                      "description": "The location in the event stream to start receiving events from.\n\n* `now` will return an empty list events and\nthe latest stream position for initialization.\n* `0` or `null` will return all events.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "50",
                      "description": "Limits the number of events returned",
                      "disabled": true
                    },
                    {
                      "key": "event_type",
                      "value": "[\"ACCESS_GRANTED\"]",
                      "description": "A comma-separated list of events to filter by. This can only be used when\nrequesting the events with a `stream_type` of `admin_logs`. For any other\n`stream_type` this value will be ignored.",
                      "disabled": true
                    },
                    {
                      "key": "created_after",
                      "value": "2012-12-12T10:53:43-08:00",
                      "description": "The lower bound date and time to return events for.",
                      "disabled": true
                    },
                    {
                      "key": "created_before",
                      "value": "2013-12-12T10:53:43-08:00",
                      "description": "The upper bound date and time to return events for.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Returns up to a year of past events for a given user\n\nhttps://developer.box.com/en/reference/get-events"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"chunk_size\": 2,\n  \"next_stream_position\": \"1152922976252290886\",\n  \"entries\": [\n    {\n      \"type\": \"event\",\n      \"event_id\": \"f82c3ba03e41f7e8a7608363cc6c0390183c3f83\",\n      \"created_by\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      },\n      \"event_type\": \"FILE_MARKED_MALICIOUS\",\n      \"session_id\": \"70090280850c8d2a1933c1\",\n      \"source\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      },\n      \"additional_details\": \"\"\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "Get events long poll endpoint",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c8a15e10-eb4b-41ee-a4ec-ab8d1c092cc0",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "7d2d3b0b-50a3-4162-97b2-29d8b802e522",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "OPTIONS",
            "header": [],
            "url": "https://{{api.box.com}}/2.0/events",
            "description": "Returns a list of real-time servers that can be used for long-polling updates\n\nhttps://developer.box.com/en/reference/options-events"
          },
          "response": [
            {
              "id": "3b26647e-e944-40a7-960b-6e9d29c9180a",
              "name": "[200] Returns a paginated array of servers that can be used",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "OPTIONS",
                "header": [],
                "url": "https://{{api.box.com}}/2.0/events",
                "description": "Returns a list of real-time servers that can be used for long-polling updates\n\nhttps://developer.box.com/en/reference/options-events"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"chunk_size\": 1,\n  \"entries\": [\n    {\n      \"type\": \"realtime_server\",\n      \"url\": \"http://2.realtime.services.box.net/subscribe?channel=cc807c9c4869ffb1c81a&stream_type=all\",\n      \"ttl\": 10,\n      \"max_retries\": 10,\n      \"retry_timeout\": 610\n    }\n  ]\n}"
            }
          ]
        }
      ],
      "_postman_id": "cee2994a-41ca-47e0-bdc9-f5b576726a98"
    },
    {
      "name": "File version legal holds",
      "item": [
        {
          "name": "Get file version legal hold",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "133828c8-62be-48c5-9e2f-2ad8ae3a2240",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "21257841-07ba-44eb-aba0-e5f59a3ce805",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/file_version_legal_holds/:file_version_legal_hold_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "file_version_legal_holds",
                ":file_version_legal_hold_id"
              ],
              "variable": [
                {
                  "id": "36717982-27b4-4f83-a1e9-115e6ee6f100",
                  "key": "file_version_legal_hold_id",
                  "value": "2348213",
                  "type": "string",
                  "description": "The ID of the file version legal hold"
                }
              ]
            },
            "description": "Retrieves information about the legal hold policies\n\nhttps://developer.box.com/en/reference/get-file-version-legal-holds-id"
          },
          "response": [
            {
              "id": "2cfa46f1-db18-415e-bb07-d0fc8e8b6507",
              "name": "[200] Returns the legal hold policy assignments for the file version.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/file_version_legal_holds/:file_version_legal_hold_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "file_version_legal_holds",
                    ":file_version_legal_hold_id"
                  ],
                  "variable": [
                    {
                      "id": "36717982-27b4-4f83-a1e9-115e6ee6f100",
                      "key": "file_version_legal_hold_id",
                      "value": "2348213",
                      "type": "string",
                      "description": "The ID of the file version legal hold"
                    }
                  ]
                },
                "description": "Retrieves information about the legal hold policies\n\nhttps://developer.box.com/en/reference/get-file-version-legal-holds-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"file_version_legal_hold\",\n  \"file_version\": {\n    \"id\": \"12345\",\n    \"type\": \"file_version\",\n    \"sha1\": \"134b65991ed521fcfe4724b7d814ab8ded5185dc\"\n  },\n  \"file\": {\n    \"id\": \"12345\",\n    \"etag\": \"1\",\n    \"type\": \"file\",\n    \"sequence_id\": \"3\",\n    \"name\": \"Contract.pdf\"\n  },\n  \"legal_hold_policy_assignments\": [\n    {\n      \"id\": \"11446498\",\n      \"type\": \"legal_hold_policy_assignment\",\n      \"legal_hold_policy\": {\n        \"id\": \"11446498\",\n        \"type\": \"legal_hold_policy\"\n      },\n      \"assigned_to\": {\n        \"id\": \"11446498\",\n        \"type\": \"file\",\n        \"sequence_id\": \"3\",\n        \"etag\": \"1\",\n        \"name\": \"Pictures\"\n      },\n      \"assigned_by\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      },\n      \"assigned_at\": \"2012-12-12T10:53:43-08:00\",\n      \"deleted_at\": \"2012-12-12T10:53:43-08:00\"\n    }\n  ],\n  \"deleted_at\": \"2012-12-12T10:53:43-08:00\"\n}"
            }
          ]
        },
        {
          "name": "List file version legal holds",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "fe570a86-741f-4890-b948-40e836354966",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "dc48155c-bce2-4a4f-b666-68fcb0ed98f5",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/file_version_legal_holds?policy_id=133870",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "file_version_legal_holds"
              ],
              "query": [
                {
                  "key": "policy_id",
                  "value": "133870",
                  "description": "The ID of the legal hold policy to get the file version legal\nholds for."
                },
                {
                  "key": "marker",
                  "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                  "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "1000",
                  "description": "The maximum number of items to return per page.",
                  "disabled": true
                }
              ]
            },
            "description": "Get a list of file versions on legal hold for a legal hold\n\nhttps://developer.box.com/en/reference/get-file-version-legal-holds"
          },
          "response": [
            {
              "id": "b4a20885-7e95-42f1-a945-3d870b3e8127",
              "name": "[200] Returns the list of file version legal holds for a specific legal",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/file_version_legal_holds?policy_id=133870",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "file_version_legal_holds"
                  ],
                  "query": [
                    {
                      "key": "policy_id",
                      "value": "133870",
                      "description": "The ID of the legal hold policy to get the file version legal\nholds for."
                    },
                    {
                      "key": "marker",
                      "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                      "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Get a list of file versions on legal hold for a legal hold\n\nhttps://developer.box.com/en/reference/get-file-version-legal-holds"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"limit\": 1000,\n  \"next_marker\": 3000,\n  \"prev_marker\": 1000,\n  \"entries\": [\n    {\n      \"id\": \"11446498\",\n      \"type\": \"file_version_legal_hold\",\n      \"file_version\": {\n        \"id\": \"12345\",\n        \"type\": \"file_version\",\n        \"sha1\": \"134b65991ed521fcfe4724b7d814ab8ded5185dc\"\n      },\n      \"file\": {\n        \"id\": \"12345\",\n        \"etag\": \"1\",\n        \"type\": \"file\",\n        \"sequence_id\": \"3\",\n        \"name\": \"Contract.pdf\"\n      },\n      \"legal_hold_policy_assignments\": [\n        {\n          \"id\": \"11446498\",\n          \"type\": \"legal_hold_policy_assignment\",\n          \"legal_hold_policy\": {\n            \"id\": \"11446498\",\n            \"type\": \"legal_hold_policy\"\n          },\n          \"assigned_to\": {\n            \"id\": \"11446498\",\n            \"type\": \"file\",\n            \"sequence_id\": \"3\",\n            \"etag\": \"1\",\n            \"name\": \"Pictures\"\n          },\n          \"assigned_by\": {\n            \"id\": \"11446498\",\n            \"type\": \"user\",\n            \"name\": \"Aaron Levie\",\n            \"login\": \"ceo@example.com\"\n          },\n          \"assigned_at\": \"2012-12-12T10:53:43-08:00\",\n          \"deleted_at\": \"2012-12-12T10:53:43-08:00\"\n        }\n      ],\n      \"deleted_at\": \"2012-12-12T10:53:43-08:00\"\n    }\n  ]\n}"
            }
          ]
        }
      ],
      "_postman_id": "fea1f220-77b1-4deb-8215-ab84edd7b1ab"
    },
    {
      "name": "File version retentions",
      "item": [
        {
          "name": "Get retention on file",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "77cf1534-4821-4e86-a1c6-47a91ea16ec2",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "0f0213b7-0ec3-4a54-9b19-62534520b43e",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/file_version_retentions/:file_version_retention_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "file_version_retentions",
                ":file_version_retention_id"
              ],
              "variable": [
                {
                  "id": "58c21f99-2b60-4321-bc27-fb98f9b61207",
                  "key": "file_version_retention_id",
                  "value": "3424234",
                  "type": "string",
                  "description": "The ID of the file version retention"
                }
              ]
            },
            "description": "Returns information about a file version retention.\n\nhttps://developer.box.com/en/reference/get-file-version-retentions-id"
          },
          "response": [
            {
              "id": "1fdb6a21-a1b5-4699-bfb4-71684074ebe7",
              "name": "[200] Returns a file version retention object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/file_version_retentions/:file_version_retention_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "file_version_retentions",
                    ":file_version_retention_id"
                  ],
                  "variable": [
                    {
                      "id": "58c21f99-2b60-4321-bc27-fb98f9b61207",
                      "key": "file_version_retention_id",
                      "value": "3424234",
                      "type": "string",
                      "description": "The ID of the file version retention"
                    }
                  ]
                },
                "description": "Returns information about a file version retention.\n\nhttps://developer.box.com/en/reference/get-file-version-retentions-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"file_version_retention\",\n  \"file_version\": {\n    \"id\": \"12345\",\n    \"type\": \"file_version\",\n    \"sha1\": \"134b65991ed521fcfe4724b7d814ab8ded5185dc\"\n  },\n  \"file\": {\n    \"id\": \"12345\",\n    \"etag\": \"1\",\n    \"type\": \"file\",\n    \"sequence_id\": \"3\",\n    \"name\": \"Contract.pdf\"\n  },\n  \"applied_at\": \"2012-12-12T10:53:43-08:00\",\n  \"disposition_at\": \"2012-12-12T10:53:43-08:00\",\n  \"winning_retention_policy\": {\n    \"id\": \"12345\",\n    \"type\": \"file_version\",\n    \"policy_name\": \"Some Policy Name\",\n    \"retention_length\": \"0\",\n    \"disposition_action\": \"permanently_delete\"\n  }\n}"
            }
          ]
        },
        {
          "name": "List file version retentions",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "735a5275-b89a-4a79-85d5-d4403060c854",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "8015c8d6-ce6f-4274-9132-d785d6b7fcb2",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/file_version_retentions?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "file_version_retentions"
              ],
              "query": [
                {
                  "key": "file_id",
                  "value": "43123123",
                  "description": "Filters results by files with this ID.",
                  "disabled": true
                },
                {
                  "key": "file_version_id",
                  "value": "1",
                  "description": "Filters results by file versions with this ID.",
                  "disabled": true
                },
                {
                  "key": "policy_id",
                  "value": "982312",
                  "description": "Filters results by the retention policy with this ID.",
                  "disabled": true
                },
                {
                  "key": "disposition_action",
                  "value": "permanently_delete",
                  "description": "Filters results by the retention policy with this disposition\naction.",
                  "disabled": true
                },
                {
                  "key": "disposition_before",
                  "value": "2012-12-12T10:53:43-08:00",
                  "description": "Filters results by files that will have their disposition\ncome into effect before this date.",
                  "disabled": true
                },
                {
                  "key": "disposition_after",
                  "value": "2012-12-19T10:34:23-08:00",
                  "description": "Filters results by files that will have their disposition\ncome into effect after this date.",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "1000",
                  "description": "The maximum number of items to return per page.",
                  "disabled": true
                },
                {
                  "key": "marker",
                  "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                  "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieves all file version retentions for the given enterprise.\n\nhttps://developer.box.com/en/reference/get-file-version-retentions"
          },
          "response": [
            {
              "id": "f15e23cf-a72d-40d9-8b9c-faf361eb526c",
              "name": "[200] Returns a list of all file version retentions for the enterprise.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/file_version_retentions?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "file_version_retentions"
                  ],
                  "query": [
                    {
                      "key": "file_id",
                      "value": "43123123",
                      "description": "Filters results by files with this ID.",
                      "disabled": true
                    },
                    {
                      "key": "file_version_id",
                      "value": "1",
                      "description": "Filters results by file versions with this ID.",
                      "disabled": true
                    },
                    {
                      "key": "policy_id",
                      "value": "982312",
                      "description": "Filters results by the retention policy with this ID.",
                      "disabled": true
                    },
                    {
                      "key": "disposition_action",
                      "value": "permanently_delete",
                      "description": "Filters results by the retention policy with this disposition\naction.",
                      "disabled": true
                    },
                    {
                      "key": "disposition_before",
                      "value": "2012-12-12T10:53:43-08:00",
                      "description": "Filters results by files that will have their disposition\ncome into effect before this date.",
                      "disabled": true
                    },
                    {
                      "key": "disposition_after",
                      "value": "2012-12-19T10:34:23-08:00",
                      "description": "Filters results by files that will have their disposition\ncome into effect after this date.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    },
                    {
                      "key": "marker",
                      "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                      "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Retrieves all file version retentions for the given enterprise.\n\nhttps://developer.box.com/en/reference/get-file-version-retentions"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"limit\": 1000,\n  \"next_marker\": 3000,\n  \"prev_marker\": 1000,\n  \"entries\": [\n    {\n      \"id\": \"11446498\",\n      \"type\": \"file_version_retention\",\n      \"file_version\": {\n        \"id\": \"12345\",\n        \"type\": \"file_version\",\n        \"sha1\": \"134b65991ed521fcfe4724b7d814ab8ded5185dc\"\n      },\n      \"file\": {\n        \"id\": \"12345\",\n        \"etag\": \"1\",\n        \"type\": \"file\",\n        \"sequence_id\": \"3\",\n        \"name\": \"Contract.pdf\"\n      },\n      \"applied_at\": \"2012-12-12T10:53:43-08:00\",\n      \"disposition_at\": \"2012-12-12T10:53:43-08:00\",\n      \"winning_retention_policy\": {\n        \"id\": \"12345\",\n        \"type\": \"file_version\",\n        \"policy_name\": \"Some Policy Name\",\n        \"retention_length\": \"0\",\n        \"disposition_action\": \"permanently_delete\"\n      }\n    }\n  ]\n}"
            }
          ]
        }
      ],
      "_postman_id": "20efdf7b-228a-433c-a927-875d3f2c477e"
    },
    {
      "name": "File versions",
      "item": [
        {
          "name": "List all file versions",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1d060989-b5bf-4ddd-a4dc-b61c9abf04c5",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "98a92204-0606-43d7-9ea0-ab8d43f809d8",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/files/:file_id/versions?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "files",
                ":file_id",
                "versions"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "1000",
                  "description": "The maximum number of items to return per page.",
                  "disabled": true
                },
                {
                  "key": "offset",
                  "value": "1000",
                  "description": "The offset of the item at which to begin the response.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "f4f4a14a-42f5-4402-808f-b0b689facfd8",
                  "key": "file_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                }
              ]
            },
            "description": "Retrieve information on all version of a file. This endpoint can be used to\n\nhttps://developer.box.com/en/reference/get-files-id-versions"
          },
          "response": [
            {
              "id": "92c422da-3006-4bb5-813e-9e0f014f2883",
              "name": "[200] Returns an array of file versions.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/versions?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "versions"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    },
                    {
                      "key": "offset",
                      "value": "1000",
                      "description": "The offset of the item at which to begin the response.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "f4f4a14a-42f5-4402-808f-b0b689facfd8",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Retrieve information on all version of a file. This endpoint can be used to\n\nhttps://developer.box.com/en/reference/get-files-id-versions"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"total_count\": 5000,\n  \"limit\": 1000,\n  \"offset\": 2000,\n  \"order\": [\n    {\n      \"by\": \"type\",\n      \"direction\": \"ASC\"\n    }\n  ],\n  \"entries\": [\n    {\n      \"id\": \"12345\",\n      \"type\": \"file_version\",\n      \"sha1\": \"134b65991ed521fcfe4724b7d814ab8ded5185dc\",\n      \"name\": \"tigers.jpeg\",\n      \"size\": 629644,\n      \"created_at\": \"2012-12-12T10:53:43-08:00\",\n      \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n      \"modified_by\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      },\n      \"trashed_at\": \"2012-12-12T10:53:43-08:00\",\n      \"trashed_by\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      },\n      \"restored_at\": \"2012-12-12T10:53:43-08:00\",\n      \"restored_by\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      },\n      \"purged_at\": \"2012-12-12T10:53:43-08:00\"\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "Get file version",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "afa76e16-5f1f-4aae-9144-08cda7c6a2fb",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "88dd1c47-cc11-4a3d-b0e9-2af86ef3188f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/files/:file_id/versions/:file_version_id?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "files",
                ":file_id",
                "versions",
                ":file_version_id"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "c7e89a48-a7e5-4451-9d20-e9f277872318",
                  "key": "file_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                },
                {
                  "id": "1f3bdecf-fffc-4491-b0e5-d1572e2348f6",
                  "key": "file_version_id",
                  "value": "1234",
                  "type": "string",
                  "description": "The ID of the file version"
                }
              ]
            },
            "description": "Retrieve a specific older version of a file.\n\nhttps://developer.box.com/en/reference/get-files-id-versions-id"
          },
          "response": [
            {
              "id": "9b988c3c-4637-401d-bd23-e56c133024aa",
              "name": "[200] Returns a file object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/versions/:file_version_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "versions",
                    ":file_version_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "c7e89a48-a7e5-4451-9d20-e9f277872318",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    },
                    {
                      "id": "1f3bdecf-fffc-4491-b0e5-d1572e2348f6",
                      "key": "file_version_id",
                      "value": "1234",
                      "type": "string",
                      "description": "The ID of the file version"
                    }
                  ]
                },
                "description": "Retrieve a specific older version of a file.\n\nhttps://developer.box.com/en/reference/get-files-id-versions-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"12345\",\n  \"type\": \"file_version\",\n  \"sha1\": \"134b65991ed521fcfe4724b7d814ab8ded5185dc\",\n  \"name\": \"tigers.jpeg\",\n  \"size\": 629644,\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"trashed_at\": \"2012-12-12T10:53:43-08:00\",\n  \"trashed_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"restored_at\": \"2012-12-12T10:53:43-08:00\",\n  \"restored_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"purged_at\": \"2012-12-12T10:53:43-08:00\"\n}"
            }
          ]
        },
        {
          "name": "Revert file version",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "56bb37a2-d5f9-4dfa-aa7d-622da888e088",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "40511a86-ea38-4b15-976d-caf09990dcb9",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"id\": \"11446498\",\n  \"type\": \"file_version\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/files/:file_id/versions/current?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "files",
                ":file_id",
                "versions",
                "current"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "af1bed38-3c03-466a-bb50-228a1bd2ca21",
                  "key": "file_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                }
              ]
            },
            "description": "Revert to a previous version of a file.\n\nhttps://developer.box.com/en/reference/post-files-id-versions-current"
          },
          "response": [
            {
              "id": "8b580c39-13d8-45b4-aa2c-fffeae9c5eca",
              "name": "[201] Returns a newly created file version object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"id\": \"11446498\",\n  \"type\": \"file_version\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/versions/current?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "versions",
                    "current"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "af1bed38-3c03-466a-bb50-228a1bd2ca21",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Revert to a previous version of a file.\n\nhttps://developer.box.com/en/reference/post-files-id-versions-current"
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"12345\",\n  \"type\": \"file_version\",\n  \"sha1\": \"134b65991ed521fcfe4724b7d814ab8ded5185dc\",\n  \"name\": \"tigers.jpeg\",\n  \"size\": 629644,\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"trashed_at\": \"2012-12-12T10:53:43-08:00\",\n  \"trashed_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"restored_at\": \"2012-12-12T10:53:43-08:00\",\n  \"restored_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"purged_at\": \"2012-12-12T10:53:43-08:00\"\n}"
            }
          ]
        },
        {
          "name": "Remove file version",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7e8a9ad4-9e7f-4e7d-8b55-f870b36a623d",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "d9f6b446-e38c-42ca-85bc-48f04401b9fe",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "DELETE",
            "header": [
              {
                "key": "If-Match",
                "value": "1",
                "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                "disabled": true
              }
            ],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/files/:file_id/versions/:file_version_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "files",
                ":file_id",
                "versions",
                ":file_version_id"
              ],
              "variable": [
                {
                  "id": "cb04bccd-3fa5-4b2a-a0d5-8519337e3369",
                  "key": "file_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                },
                {
                  "id": "5f9a18f3-1976-4c44-8a7d-a8a26f816114",
                  "key": "file_version_id",
                  "value": "1234",
                  "type": "string",
                  "description": "The ID of the file version"
                }
              ]
            },
            "description": "Move a file version to the trash.\n\nhttps://developer.box.com/en/reference/delete-files-id-versions-id"
          },
          "response": [
            {
              "id": "15845d73-da20-4863-a945-64d972f75a65",
              "name": "[204] Returns an empty response when the file has been successfully",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [
                  {
                    "key": "If-Match",
                    "value": "1",
                    "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                    "disabled": true
                  }
                ],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/versions/:file_version_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "versions",
                    ":file_version_id"
                  ],
                  "variable": [
                    {
                      "id": "cb04bccd-3fa5-4b2a-a0d5-8519337e3369",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    },
                    {
                      "id": "5f9a18f3-1976-4c44-8a7d-a8a26f816114",
                      "key": "file_version_id",
                      "value": "1234",
                      "type": "string",
                      "description": "The ID of the file version"
                    }
                  ]
                },
                "description": "Move a file version to the trash.\n\nhttps://developer.box.com/en/reference/delete-files-id-versions-id"
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        }
      ],
      "_postman_id": "bdd63b75-73ad-4199-8e43-26f5bdc8516d"
    },
    {
      "name": "Files",
      "item": [
        {
          "name": "Get file information",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d1b289e4-d915-4bc7-8ce6-da840fc748fe",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "4edb067e-0027-44ee-a28b-88f0ad76da7e",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [
              {
                "key": "If-None-Match",
                "value": "1",
                "description": "Ensures an item is only returned if it has changed.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `304 Not Modified` if the item has not\nchanged since.",
                "disabled": true
              },
              {
                "key": "X-Rep-Hints",
                "value": "[pdf]",
                "description": "A header required to request specific `representations`\nof a file. Use this in combination with the `fields` query\nparameter to request a specific file representation.\n\nThe general format for these representations is\n`X-Rep-Hints: [...]` where `[...]` is one or many\nhints in the format `[fileType?query]`.\n\nFor example, to request a `png` representation in `32x32`\nas well as `94x94` pixel dimensions provide the following\nhints.\n\n`X-Rep-Hints: [jpg?dimensions=32x32][jpg?dimensions=94x94]`\n\nAdditionally, a `text` representation is available for all\ndocument file types in Box using the `[extracted_text]`\nrepresentation.\n\n`X-Rep-Hints: [extracted_text]`"
              }
            ],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/files/:file_id?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "files",
                ":file_id"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "9ca50755-4634-4429-9831-606191860912",
                  "key": "file_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                }
              ]
            },
            "description": "Retrieves the details about a file.\n\nhttps://developer.box.com/en/reference/get-files-id"
          },
          "response": [
            {
              "id": "238c7034-0f89-4c26-894f-32fc729fb542",
              "name": "[401] Returned when the access token provided in the `Authorization` header",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "If-None-Match",
                    "value": "1",
                    "description": "Ensures an item is only returned if it has changed.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `304 Not Modified` if the item has not\nchanged since.",
                    "disabled": true
                  },
                  {
                    "key": "X-Rep-Hints",
                    "value": "[pdf]",
                    "description": "A header required to request specific `representations`\nof a file. Use this in combination with the `fields` query\nparameter to request a specific file representation.\n\nThe general format for these representations is\n`X-Rep-Hints: [...]` where `[...]` is one or many\nhints in the format `[fileType?query]`.\n\nFor example, to request a `png` representation in `32x32`\nas well as `94x94` pixel dimensions provide the following\nhints.\n\n`X-Rep-Hints: [jpg?dimensions=32x32][jpg?dimensions=94x94]`\n\nAdditionally, a `text` representation is available for all\ndocument file types in Box using the `[extracted_text]`\nrepresentation.\n\n`X-Rep-Hints: [extracted_text]`"
                  }
                ],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "9ca50755-4634-4429-9831-606191860912",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Retrieves the details about a file.\n\nhttps://developer.box.com/en/reference/get-files-id"
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "28e721d7-a386-4405-a287-9a238932c69f",
              "name": "[304] Returns an empty response when the `If-None-Match` header matches",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "If-None-Match",
                    "value": "1",
                    "description": "Ensures an item is only returned if it has changed.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `304 Not Modified` if the item has not\nchanged since.",
                    "disabled": true
                  },
                  {
                    "key": "X-Rep-Hints",
                    "value": "[pdf]",
                    "description": "A header required to request specific `representations`\nof a file. Use this in combination with the `fields` query\nparameter to request a specific file representation.\n\nThe general format for these representations is\n`X-Rep-Hints: [...]` where `[...]` is one or many\nhints in the format `[fileType?query]`.\n\nFor example, to request a `png` representation in `32x32`\nas well as `94x94` pixel dimensions provide the following\nhints.\n\n`X-Rep-Hints: [jpg?dimensions=32x32][jpg?dimensions=94x94]`\n\nAdditionally, a `text` representation is available for all\ndocument file types in Box using the `[extracted_text]`\nrepresentation.\n\n`X-Rep-Hints: [extracted_text]`"
                  }
                ],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "9ca50755-4634-4429-9831-606191860912",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Retrieves the details about a file.\n\nhttps://developer.box.com/en/reference/get-files-id"
              },
              "status": "Not Modified",
              "code": 304,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "51622ff8-8bca-4547-93ad-7b4a165815f9",
              "name": "[415] Returns an error if an action is performed on a file with an",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "If-None-Match",
                    "value": "1",
                    "description": "Ensures an item is only returned if it has changed.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `304 Not Modified` if the item has not\nchanged since.",
                    "disabled": true
                  },
                  {
                    "key": "X-Rep-Hints",
                    "value": "[pdf]",
                    "description": "A header required to request specific `representations`\nof a file. Use this in combination with the `fields` query\nparameter to request a specific file representation.\n\nThe general format for these representations is\n`X-Rep-Hints: [...]` where `[...]` is one or many\nhints in the format `[fileType?query]`.\n\nFor example, to request a `png` representation in `32x32`\nas well as `94x94` pixel dimensions provide the following\nhints.\n\n`X-Rep-Hints: [jpg?dimensions=32x32][jpg?dimensions=94x94]`\n\nAdditionally, a `text` representation is available for all\ndocument file types in Box using the `[extracted_text]`\nrepresentation.\n\n`X-Rep-Hints: [extracted_text]`"
                  }
                ],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "9ca50755-4634-4429-9831-606191860912",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Retrieves the details about a file.\n\nhttps://developer.box.com/en/reference/get-files-id"
              },
              "status": "Unsupported Media Type",
              "code": 415,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "8da50534-cc11-4450-970d-9ad4fd5aca93",
              "name": "[405] Returned if the `file_id` is not in a recognized format.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "If-None-Match",
                    "value": "1",
                    "description": "Ensures an item is only returned if it has changed.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `304 Not Modified` if the item has not\nchanged since.",
                    "disabled": true
                  },
                  {
                    "key": "X-Rep-Hints",
                    "value": "[pdf]",
                    "description": "A header required to request specific `representations`\nof a file. Use this in combination with the `fields` query\nparameter to request a specific file representation.\n\nThe general format for these representations is\n`X-Rep-Hints: [...]` where `[...]` is one or many\nhints in the format `[fileType?query]`.\n\nFor example, to request a `png` representation in `32x32`\nas well as `94x94` pixel dimensions provide the following\nhints.\n\n`X-Rep-Hints: [jpg?dimensions=32x32][jpg?dimensions=94x94]`\n\nAdditionally, a `text` representation is available for all\ndocument file types in Box using the `[extracted_text]`\nrepresentation.\n\n`X-Rep-Hints: [extracted_text]`"
                  }
                ],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "9ca50755-4634-4429-9831-606191860912",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Retrieves the details about a file.\n\nhttps://developer.box.com/en/reference/get-files-id"
              },
              "status": "Method Not Allowed",
              "code": 405,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "af46b3bb-b19b-4fac-8423-e5240cfb4b5f",
              "name": "[404] Returned if the file is not found, or the user does not",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "If-None-Match",
                    "value": "1",
                    "description": "Ensures an item is only returned if it has changed.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `304 Not Modified` if the item has not\nchanged since.",
                    "disabled": true
                  },
                  {
                    "key": "X-Rep-Hints",
                    "value": "[pdf]",
                    "description": "A header required to request specific `representations`\nof a file. Use this in combination with the `fields` query\nparameter to request a specific file representation.\n\nThe general format for these representations is\n`X-Rep-Hints: [...]` where `[...]` is one or many\nhints in the format `[fileType?query]`.\n\nFor example, to request a `png` representation in `32x32`\nas well as `94x94` pixel dimensions provide the following\nhints.\n\n`X-Rep-Hints: [jpg?dimensions=32x32][jpg?dimensions=94x94]`\n\nAdditionally, a `text` representation is available for all\ndocument file types in Box using the `[extracted_text]`\nrepresentation.\n\n`X-Rep-Hints: [extracted_text]`"
                  }
                ],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "9ca50755-4634-4429-9831-606191860912",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Retrieves the details about a file.\n\nhttps://developer.box.com/en/reference/get-files-id"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "c53c102f-135e-483f-8ced-00eee8a36c0c",
              "name": "[200] Returns a file object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "If-None-Match",
                    "value": "1",
                    "description": "Ensures an item is only returned if it has changed.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `304 Not Modified` if the item has not\nchanged since.",
                    "disabled": true
                  },
                  {
                    "key": "X-Rep-Hints",
                    "value": "[pdf]",
                    "description": "A header required to request specific `representations`\nof a file. Use this in combination with the `fields` query\nparameter to request a specific file representation.\n\nThe general format for these representations is\n`X-Rep-Hints: [...]` where `[...]` is one or many\nhints in the format `[fileType?query]`.\n\nFor example, to request a `png` representation in `32x32`\nas well as `94x94` pixel dimensions provide the following\nhints.\n\n`X-Rep-Hints: [jpg?dimensions=32x32][jpg?dimensions=94x94]`\n\nAdditionally, a `text` representation is available for all\ndocument file types in Box using the `[extracted_text]`\nrepresentation.\n\n`X-Rep-Hints: [extracted_text]`"
                  }
                ],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "9ca50755-4634-4429-9831-606191860912",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Retrieves the details about a file.\n\nhttps://developer.box.com/en/reference/get-files-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"12345\",\n  \"etag\": \"1\",\n  \"type\": \"file\",\n  \"sequence_id\": \"3\",\n  \"name\": \"Contract.pdf\",\n  \"sha1\": \"85136C79CBF9FE36BB9D05D0639C70C265C18D37\",\n  \"description\": \"Contract for Q1 renewal\",\n  \"size\": 629644,\n  \"path_collection\": {\n    \"total_count\": 1,\n    \"entries\": [\n      {\n        \"id\": \"12345\",\n        \"etag\": \"1\",\n        \"type\": \"folder\",\n        \"sequence_id\": \"3\",\n        \"name\": \"Contracts\"\n      }\n    ]\n  },\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"trashed_at\": \"2012-12-12T10:53:43-08:00\",\n  \"purged_at\": \"2012-12-12T10:53:43-08:00\",\n  \"content_created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"content_modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"modified_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"owned_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"shared_link\": {\n    \"url\": \"https://www.box.com/s/vspke7y05sb214wjokpk\",\n    \"download_url\": \"https://www.box.com/shared/static/rh935iit6ewrmw0unyul.jpeg\",\n    \"vanity_url\": \"https://acme.app.box.com/v/my_url/\",\n    \"access\": \"open\",\n    \"effective_access\": \"company\",\n    \"effective_permission\": \"can_download\",\n    \"unshared_at\": \"2018-04-13T13:53:23-07:00\",\n    \"is_password_enabled\": true,\n    \"permissions\": {\n      \"can_download\": true,\n      \"can_preview\": true\n    },\n    \"download_count\": 3,\n    \"preview_count\": 3\n  },\n  \"parent\": {\n    \"id\": \"12345\",\n    \"etag\": \"1\",\n    \"type\": \"folder\",\n    \"sequence_id\": \"3\",\n    \"name\": \"Contracts\"\n  },\n  \"item_status\": \"active\",\n  \"version_number\": \"1\",\n  \"comment_count\": 10,\n  \"permissions\": {\n    \"can_delete\": true,\n    \"can_download\": true,\n    \"can_invite_collaborator\": true,\n    \"can_rename\": true,\n    \"can_set_share_access\": true,\n    \"can_share\": true,\n    \"can_annotate\": true,\n    \"can_comment\": true,\n    \"can_preview\": true,\n    \"can_upload\": true,\n    \"can_view_annotations_all\": true,\n    \"can_view_annotations_self\": true\n  },\n  \"tags\": [\n    \"approved\"\n  ],\n  \"lock\": {\n    \"id\": \"11446498\",\n    \"type\": \"lock\",\n    \"created_by\": {\n      \"id\": \"11446498\",\n      \"type\": \"user\",\n      \"name\": \"Aaron Levie\",\n      \"login\": \"ceo@example.com\"\n    },\n    \"created_at\": \"2012-12-12T10:53:43-08:00\",\n    \"expired_at\": \"2012-12-12T10:53:43-08:00\",\n    \"is_download_prevented\": true\n  },\n  \"extension\": \"pdf\",\n  \"is_package\": true,\n  \"expiring_embed_link\": {\n    \"access_token\": \"c3FIOG9vSGV4VHo4QzAyg5T1JvNnJoZ3ExaVNyQWw6WjRsanRKZG5lQk9qUE1BVQ\",\n    \"expires_in\": 3600,\n    \"token_type\": \"bearer\",\n    \"restricted_to\": [\n      {\n        \"scope\": \"item_download\",\n        \"object\": {\n          \"id\": \"12345\",\n          \"etag\": \"1\",\n          \"type\": \"file\",\n          \"sequence_id\": \"3\",\n          \"name\": \"Contract.pdf\"\n        }\n      }\n    ],\n    \"url\": \"https://cloud.app.box.com/preview/expiring_embed/...\"\n  },\n  \"watermark_info\": {\n    \"is_watermarked\": true\n  },\n  \"allowed_invitee_roles\": [\n    \"editor\"\n  ],\n  \"is_externally_owned\": true,\n  \"has_collaborations\": true,\n  \"metadata\": {\n    \"global\": {\n      \"marketingCollateral\": {\n        \"$canEdit\": true,\n        \"$id\": \"01234500-12f1-1234-aa12-b1d234cb567e\",\n        \"$parent\": \"folder_59449484661\",\n        \"$scope\": \"enterprise_27335\",\n        \"$template\": \"properties\",\n        \"$type\": \"properties-6bcba49f-ca6d-4d2a-a758-57fe6edf44d0\",\n        \"$typeVersion\": 2,\n        \"$version\": 1\n      }\n    }\n  },\n  \"expires_at\": \"2012-12-12T10:53:43-08:00\",\n  \"representations\": {\n    \"entries\": [\n      {\n        \"content\": {\n          \"url_template\": \"https://dl.boxcloud.com/api/2.0/internal_files/123/versions/345/representations/png_paged_2048x2048/content/{+asset_path}?watermark_content=4567\"\n        },\n        \"info\": {\n          \"url\": \"https://api.box.com/2.0/internal_files/123/versions/345/representations/png_paged_2048x2048\"\n        },\n        \"properties\": {\n          \"dimensions\": \"2048x2048\",\n          \"paged\": true,\n          \"thumb\": true\n        },\n        \"representation\": \"png\",\n        \"status\": {\n          \"state\": \"success\"\n        }\n      }\n    ]\n  }\n}"
            }
          ]
        },
        {
          "name": "Get file thumbnail",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "a5dc7c22-8c4b-4390-9c07-c6f21bd590aa",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "328df5d7-8292-4a2d-8971-226f88ff12a9",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/files/:file_id/thumbnail.:extension?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "files",
                ":file_id",
                "thumbnail.:extension"
              ],
              "query": [
                {
                  "key": "min_height",
                  "value": "32",
                  "description": "The minimum height of the thumbnail",
                  "disabled": true
                },
                {
                  "key": "min_width",
                  "value": "32",
                  "description": "The minimum width of the thumbnail",
                  "disabled": true
                },
                {
                  "key": "max_height",
                  "value": "320",
                  "description": "The maximum height of the thumbnail",
                  "disabled": true
                },
                {
                  "key": "max_width",
                  "value": "320",
                  "description": "The maximum width of the thumbnail",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "dc51ffd9-9a05-4dd8-a7f8-1c9e9c3c394c",
                  "key": "file_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                },
                {
                  "id": "1c437b7f-f642-4463-9a3c-85722bd9f667",
                  "key": "extension",
                  "value": "png",
                  "type": "string",
                  "description": "The file format for the thumbnail"
                }
              ]
            },
            "description": "Retrieves a thumbnail, or smaller image representation, of a file.\n\nhttps://developer.box.com/en/reference/get-files-id-thumbnail-id"
          },
          "response": [
            {
              "id": "5cc29b34-92f5-4160-bdd8-72b6c9ac1280",
              "name": "[302] Returns an error when Box is not able to create a thumbnail for this",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/thumbnail.:extension?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "thumbnail.:extension"
                  ],
                  "query": [
                    {
                      "key": "min_height",
                      "value": "32",
                      "description": "The minimum height of the thumbnail",
                      "disabled": true
                    },
                    {
                      "key": "min_width",
                      "value": "32",
                      "description": "The minimum width of the thumbnail",
                      "disabled": true
                    },
                    {
                      "key": "max_height",
                      "value": "320",
                      "description": "The maximum height of the thumbnail",
                      "disabled": true
                    },
                    {
                      "key": "max_width",
                      "value": "320",
                      "description": "The maximum width of the thumbnail",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "dc51ffd9-9a05-4dd8-a7f8-1c9e9c3c394c",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    },
                    {
                      "id": "1c437b7f-f642-4463-9a3c-85722bd9f667",
                      "key": "extension",
                      "value": "png",
                      "type": "string",
                      "description": "The file format for the thumbnail"
                    }
                  ]
                },
                "description": "Retrieves a thumbnail, or smaller image representation, of a file.\n\nhttps://developer.box.com/en/reference/get-files-id-thumbnail-id"
              },
              "status": "Found",
              "code": 302,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Location",
                  "value": "",
                  "description": "A pointer to a placeholder graphic that can be used for this\nfile type."
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "61f606e5-21f0-4669-a95f-c5552654571f",
              "name": "[400] Returns an error if some of the parameters are missing or",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/thumbnail.:extension?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "thumbnail.:extension"
                  ],
                  "query": [
                    {
                      "key": "min_height",
                      "value": "32",
                      "description": "The minimum height of the thumbnail",
                      "disabled": true
                    },
                    {
                      "key": "min_width",
                      "value": "32",
                      "description": "The minimum width of the thumbnail",
                      "disabled": true
                    },
                    {
                      "key": "max_height",
                      "value": "320",
                      "description": "The maximum height of the thumbnail",
                      "disabled": true
                    },
                    {
                      "key": "max_width",
                      "value": "320",
                      "description": "The maximum width of the thumbnail",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "dc51ffd9-9a05-4dd8-a7f8-1c9e9c3c394c",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    },
                    {
                      "id": "1c437b7f-f642-4463-9a3c-85722bd9f667",
                      "key": "extension",
                      "value": "png",
                      "type": "string",
                      "description": "The file format for the thumbnail"
                    }
                  ]
                },
                "description": "Retrieves a thumbnail, or smaller image representation, of a file.\n\nhttps://developer.box.com/en/reference/get-files-id-thumbnail-id"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "998b0259-bb95-426a-819b-886abbe98150",
              "name": "[404] Returned if the file is not found, or the user does not",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/thumbnail.:extension?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "thumbnail.:extension"
                  ],
                  "query": [
                    {
                      "key": "min_height",
                      "value": "32",
                      "description": "The minimum height of the thumbnail",
                      "disabled": true
                    },
                    {
                      "key": "min_width",
                      "value": "32",
                      "description": "The minimum width of the thumbnail",
                      "disabled": true
                    },
                    {
                      "key": "max_height",
                      "value": "320",
                      "description": "The maximum height of the thumbnail",
                      "disabled": true
                    },
                    {
                      "key": "max_width",
                      "value": "320",
                      "description": "The maximum width of the thumbnail",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "dc51ffd9-9a05-4dd8-a7f8-1c9e9c3c394c",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    },
                    {
                      "id": "1c437b7f-f642-4463-9a3c-85722bd9f667",
                      "key": "extension",
                      "value": "png",
                      "type": "string",
                      "description": "The file format for the thumbnail"
                    }
                  ]
                },
                "description": "Retrieves a thumbnail, or smaller image representation, of a file.\n\nhttps://developer.box.com/en/reference/get-files-id-thumbnail-id"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "9cebf9bc-2468-41cc-beb8-4e784f49c8ff",
              "name": "[403] Returned when the access token provided in the `Authorization` header",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/thumbnail.:extension?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "thumbnail.:extension"
                  ],
                  "query": [
                    {
                      "key": "min_height",
                      "value": "32",
                      "description": "The minimum height of the thumbnail",
                      "disabled": true
                    },
                    {
                      "key": "min_width",
                      "value": "32",
                      "description": "The minimum width of the thumbnail",
                      "disabled": true
                    },
                    {
                      "key": "max_height",
                      "value": "320",
                      "description": "The maximum height of the thumbnail",
                      "disabled": true
                    },
                    {
                      "key": "max_width",
                      "value": "320",
                      "description": "The maximum width of the thumbnail",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "dc51ffd9-9a05-4dd8-a7f8-1c9e9c3c394c",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    },
                    {
                      "id": "1c437b7f-f642-4463-9a3c-85722bd9f667",
                      "key": "extension",
                      "value": "png",
                      "type": "string",
                      "description": "The file format for the thumbnail"
                    }
                  ]
                },
                "description": "Retrieves a thumbnail, or smaller image representation, of a file.\n\nhttps://developer.box.com/en/reference/get-files-id-thumbnail-id"
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "da615682-f0c6-477c-bbd3-c3f3a922869d",
              "name": "[200] When a thumbnail can be created the thumbnail data will be",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/thumbnail.:extension?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "thumbnail.:extension"
                  ],
                  "query": [
                    {
                      "key": "min_height",
                      "value": "32",
                      "description": "The minimum height of the thumbnail",
                      "disabled": true
                    },
                    {
                      "key": "min_width",
                      "value": "32",
                      "description": "The minimum width of the thumbnail",
                      "disabled": true
                    },
                    {
                      "key": "max_height",
                      "value": "320",
                      "description": "The maximum height of the thumbnail",
                      "disabled": true
                    },
                    {
                      "key": "max_width",
                      "value": "320",
                      "description": "The maximum width of the thumbnail",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "dc51ffd9-9a05-4dd8-a7f8-1c9e9c3c394c",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    },
                    {
                      "id": "1c437b7f-f642-4463-9a3c-85722bd9f667",
                      "key": "extension",
                      "value": "png",
                      "type": "string",
                      "description": "The file format for the thumbnail"
                    }
                  ]
                },
                "description": "Retrieves a thumbnail, or smaller image representation, of a file.\n\nhttps://developer.box.com/en/reference/get-files-id-thumbnail-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "image/png"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "e7896a22-d1f4-45e6-8788-6859cdcdebd1",
              "name": "[202] Sometimes generating a thumbnail can take a few seconds. In these",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/thumbnail.:extension?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "thumbnail.:extension"
                  ],
                  "query": [
                    {
                      "key": "min_height",
                      "value": "32",
                      "description": "The minimum height of the thumbnail",
                      "disabled": true
                    },
                    {
                      "key": "min_width",
                      "value": "32",
                      "description": "The minimum width of the thumbnail",
                      "disabled": true
                    },
                    {
                      "key": "max_height",
                      "value": "320",
                      "description": "The maximum height of the thumbnail",
                      "disabled": true
                    },
                    {
                      "key": "max_width",
                      "value": "320",
                      "description": "The maximum width of the thumbnail",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "dc51ffd9-9a05-4dd8-a7f8-1c9e9c3c394c",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    },
                    {
                      "id": "1c437b7f-f642-4463-9a3c-85722bd9f667",
                      "key": "extension",
                      "value": "png",
                      "type": "string",
                      "description": "The file format for the thumbnail"
                    }
                  ]
                },
                "description": "Retrieves a thumbnail, or smaller image representation, of a file.\n\nhttps://developer.box.com/en/reference/get-files-id-thumbnail-id"
              },
              "status": "Accepted",
              "code": 202,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Retry-After",
                  "value": "",
                  "description": "The time in seconds after which the thumbnail will be available.\n\nYour application  only attempt to get the thumbnail again after\nthis time."
                },
                {
                  "key": "Location",
                  "value": "",
                  "description": "A pointer to a placeholder graphic that can be used until the\nthumbnail has been generated."
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        },
        {
          "name": "Copy file",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1a9615ee-a1fc-4398-835d-efb246ee00e6",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "28524c8c-96bf-43e1-a04b-2fd4f0ba6006",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"FileCopy.txt\",\n  \"version\": \"0\",\n  \"parent\": {\n    \"id\": \"0\"\n  }\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/files/:file_id/copy?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "files",
                ":file_id",
                "copy"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "5c6977c3-7c60-4e8c-99aa-a8b3b9a68f3a",
                  "key": "file_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                }
              ]
            },
            "description": "Creates a copy of a file.\n\nhttps://developer.box.com/en/reference/post-files-id-copy"
          },
          "response": [
            {
              "id": "02308cd6-b8a9-4aeb-968b-3f419c6ad6ec",
              "name": "[409] * `operation_blocked_temporary`: Returned if either of the destination",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"FileCopy.txt\",\n  \"version\": \"0\",\n  \"parent\": {\n    \"id\": \"0\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/copy?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "copy"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "5c6977c3-7c60-4e8c-99aa-a8b3b9a68f3a",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Creates a copy of a file.\n\nhttps://developer.box.com/en/reference/post-files-id-copy"
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "05e1508b-e644-4620-8c4d-5559bd4503b6",
              "name": "[201] Returns a new file object representing the copied file.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"FileCopy.txt\",\n  \"version\": \"0\",\n  \"parent\": {\n    \"id\": \"0\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/copy?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "copy"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "5c6977c3-7c60-4e8c-99aa-a8b3b9a68f3a",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Creates a copy of a file.\n\nhttps://developer.box.com/en/reference/post-files-id-copy"
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"12345\",\n  \"etag\": \"1\",\n  \"type\": \"file\",\n  \"sequence_id\": \"3\",\n  \"name\": \"Contract.pdf\",\n  \"sha1\": \"85136C79CBF9FE36BB9D05D0639C70C265C18D37\",\n  \"description\": \"Contract for Q1 renewal\",\n  \"size\": 629644,\n  \"path_collection\": {\n    \"total_count\": 1,\n    \"entries\": [\n      {\n        \"id\": \"12345\",\n        \"etag\": \"1\",\n        \"type\": \"folder\",\n        \"sequence_id\": \"3\",\n        \"name\": \"Contracts\"\n      }\n    ]\n  },\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"trashed_at\": \"2012-12-12T10:53:43-08:00\",\n  \"purged_at\": \"2012-12-12T10:53:43-08:00\",\n  \"content_created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"content_modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"modified_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"owned_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"shared_link\": {\n    \"url\": \"https://www.box.com/s/vspke7y05sb214wjokpk\",\n    \"download_url\": \"https://www.box.com/shared/static/rh935iit6ewrmw0unyul.jpeg\",\n    \"vanity_url\": \"https://acme.app.box.com/v/my_url/\",\n    \"access\": \"open\",\n    \"effective_access\": \"company\",\n    \"effective_permission\": \"can_download\",\n    \"unshared_at\": \"2018-04-13T13:53:23-07:00\",\n    \"is_password_enabled\": true,\n    \"permissions\": {\n      \"can_download\": true,\n      \"can_preview\": true\n    },\n    \"download_count\": 3,\n    \"preview_count\": 3\n  },\n  \"parent\": {\n    \"id\": \"12345\",\n    \"etag\": \"1\",\n    \"type\": \"folder\",\n    \"sequence_id\": \"3\",\n    \"name\": \"Contracts\"\n  },\n  \"item_status\": \"active\",\n  \"version_number\": \"1\",\n  \"comment_count\": 10,\n  \"permissions\": {\n    \"can_delete\": true,\n    \"can_download\": true,\n    \"can_invite_collaborator\": true,\n    \"can_rename\": true,\n    \"can_set_share_access\": true,\n    \"can_share\": true,\n    \"can_annotate\": true,\n    \"can_comment\": true,\n    \"can_preview\": true,\n    \"can_upload\": true,\n    \"can_view_annotations_all\": true,\n    \"can_view_annotations_self\": true\n  },\n  \"tags\": [\n    \"approved\"\n  ],\n  \"lock\": {\n    \"id\": \"11446498\",\n    \"type\": \"lock\",\n    \"created_by\": {\n      \"id\": \"11446498\",\n      \"type\": \"user\",\n      \"name\": \"Aaron Levie\",\n      \"login\": \"ceo@example.com\"\n    },\n    \"created_at\": \"2012-12-12T10:53:43-08:00\",\n    \"expired_at\": \"2012-12-12T10:53:43-08:00\",\n    \"is_download_prevented\": true\n  },\n  \"extension\": \"pdf\",\n  \"is_package\": true,\n  \"expiring_embed_link\": {\n    \"access_token\": \"c3FIOG9vSGV4VHo4QzAyg5T1JvNnJoZ3ExaVNyQWw6WjRsanRKZG5lQk9qUE1BVQ\",\n    \"expires_in\": 3600,\n    \"token_type\": \"bearer\",\n    \"restricted_to\": [\n      {\n        \"scope\": \"item_download\",\n        \"object\": {\n          \"id\": \"12345\",\n          \"etag\": \"1\",\n          \"type\": \"file\",\n          \"sequence_id\": \"3\",\n          \"name\": \"Contract.pdf\"\n        }\n      }\n    ],\n    \"url\": \"https://cloud.app.box.com/preview/expiring_embed/...\"\n  },\n  \"watermark_info\": {\n    \"is_watermarked\": true\n  },\n  \"allowed_invitee_roles\": [\n    \"editor\"\n  ],\n  \"is_externally_owned\": true,\n  \"has_collaborations\": true,\n  \"metadata\": {\n    \"global\": {\n      \"marketingCollateral\": {\n        \"$canEdit\": true,\n        \"$id\": \"01234500-12f1-1234-aa12-b1d234cb567e\",\n        \"$parent\": \"folder_59449484661\",\n        \"$scope\": \"enterprise_27335\",\n        \"$template\": \"properties\",\n        \"$type\": \"properties-6bcba49f-ca6d-4d2a-a758-57fe6edf44d0\",\n        \"$typeVersion\": 2,\n        \"$version\": 1\n      }\n    }\n  },\n  \"expires_at\": \"2012-12-12T10:53:43-08:00\",\n  \"representations\": {\n    \"entries\": [\n      {\n        \"content\": {\n          \"url_template\": \"https://dl.boxcloud.com/api/2.0/internal_files/123/versions/345/representations/png_paged_2048x2048/content/{+asset_path}?watermark_content=4567\"\n        },\n        \"info\": {\n          \"url\": \"https://api.box.com/2.0/internal_files/123/versions/345/representations/png_paged_2048x2048\"\n        },\n        \"properties\": {\n          \"dimensions\": \"2048x2048\",\n          \"paged\": true,\n          \"thumb\": true\n        },\n        \"representation\": \"png\",\n        \"status\": {\n          \"state\": \"success\"\n        }\n      }\n    ]\n  }\n}"
            },
            {
              "id": "1451bf08-e6e8-4354-b0c7-7854a5c0fd76",
              "name": "[404] Returns an error if either the source file or the destination",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"FileCopy.txt\",\n  \"version\": \"0\",\n  \"parent\": {\n    \"id\": \"0\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/copy?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "copy"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "5c6977c3-7c60-4e8c-99aa-a8b3b9a68f3a",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Creates a copy of a file.\n\nhttps://developer.box.com/en/reference/post-files-id-copy"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "4948cd13-ce82-48e6-948a-7a2533c3d7e4",
              "name": "[304] Returns an empty response when the `If-None-Match` header matches",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"FileCopy.txt\",\n  \"version\": \"0\",\n  \"parent\": {\n    \"id\": \"0\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/copy?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "copy"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "5c6977c3-7c60-4e8c-99aa-a8b3b9a68f3a",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Creates a copy of a file.\n\nhttps://developer.box.com/en/reference/post-files-id-copy"
              },
              "status": "Not Modified",
              "code": 304,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "f2e15825-7e43-445f-83aa-774fb5b16ef0",
              "name": "[400] Returns an error if some of the parameters are missing or",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"FileCopy.txt\",\n  \"version\": \"0\",\n  \"parent\": {\n    \"id\": \"0\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/copy?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "copy"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "5c6977c3-7c60-4e8c-99aa-a8b3b9a68f3a",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Creates a copy of a file.\n\nhttps://developer.box.com/en/reference/post-files-id-copy"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        },
        {
          "name": "Update file",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "227f3e9d-aed5-4f7c-abb5-059dc4c0578f",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "74a99bb1-d10c-4da8-8b2d-f3b8af4bc3d5",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "PUT",
            "header": [
              {
                "key": "If-Match",
                "value": "1",
                "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                "disabled": true
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"NewFile.txt\",\n  \"description\": \"The latest reports. Automatically updated\",\n  \"parent\": {\n    \"id\": \"123\"\n  },\n  \"shared_link\": {\n    \"access\": \"open\",\n    \"password\": \"do-not-use-this-password\",\n    \"unshared_at\": \"2012-12-12T10:53:43-08:00\",\n    \"permissions\": {\n      \"can_download\": true\n    }\n  },\n  \"lock\": {\n    \"access\": \"lock\",\n    \"expires_at\": \"2012-12-12T10:53:43-08:00\",\n    \"is_download_prevented\": true\n  },\n  \"permissions\": {\n    \"can_download\": \"open\"\n  },\n  \"tags\": [\n    \"approved\"\n  ]\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/files/:file_id?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "files",
                ":file_id"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "674e07e1-3351-4d2d-a4e4-24722fc06162",
                  "key": "file_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                }
              ]
            },
            "description": "Updates a file. This can be used to rename or move a file,\n\nhttps://developer.box.com/en/reference/put-files-id"
          },
          "response": [
            {
              "id": "0e625ac4-ab47-492b-a59e-f83a7ed5ec97",
              "name": "[200] Returns a file object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "If-Match",
                    "value": "1",
                    "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                    "disabled": true
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"NewFile.txt\",\n  \"description\": \"The latest reports. Automatically updated\",\n  \"parent\": {\n    \"id\": \"123\"\n  },\n  \"shared_link\": {\n    \"access\": \"open\",\n    \"password\": \"do-not-use-this-password\",\n    \"unshared_at\": \"2012-12-12T10:53:43-08:00\",\n    \"permissions\": {\n      \"can_download\": true\n    }\n  },\n  \"lock\": {\n    \"access\": \"lock\",\n    \"expires_at\": \"2012-12-12T10:53:43-08:00\",\n    \"is_download_prevented\": true\n  },\n  \"permissions\": {\n    \"can_download\": \"open\"\n  },\n  \"tags\": [\n    \"approved\"\n  ]\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "674e07e1-3351-4d2d-a4e4-24722fc06162",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Updates a file. This can be used to rename or move a file,\n\nhttps://developer.box.com/en/reference/put-files-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"12345\",\n  \"etag\": \"1\",\n  \"type\": \"file\",\n  \"sequence_id\": \"3\",\n  \"name\": \"Contract.pdf\",\n  \"sha1\": \"85136C79CBF9FE36BB9D05D0639C70C265C18D37\",\n  \"description\": \"Contract for Q1 renewal\",\n  \"size\": 629644,\n  \"path_collection\": {\n    \"total_count\": 1,\n    \"entries\": [\n      {\n        \"id\": \"12345\",\n        \"etag\": \"1\",\n        \"type\": \"folder\",\n        \"sequence_id\": \"3\",\n        \"name\": \"Contracts\"\n      }\n    ]\n  },\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"trashed_at\": \"2012-12-12T10:53:43-08:00\",\n  \"purged_at\": \"2012-12-12T10:53:43-08:00\",\n  \"content_created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"content_modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"modified_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"owned_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"shared_link\": {\n    \"url\": \"https://www.box.com/s/vspke7y05sb214wjokpk\",\n    \"download_url\": \"https://www.box.com/shared/static/rh935iit6ewrmw0unyul.jpeg\",\n    \"vanity_url\": \"https://acme.app.box.com/v/my_url/\",\n    \"access\": \"open\",\n    \"effective_access\": \"company\",\n    \"effective_permission\": \"can_download\",\n    \"unshared_at\": \"2018-04-13T13:53:23-07:00\",\n    \"is_password_enabled\": true,\n    \"permissions\": {\n      \"can_download\": true,\n      \"can_preview\": true\n    },\n    \"download_count\": 3,\n    \"preview_count\": 3\n  },\n  \"parent\": {\n    \"id\": \"12345\",\n    \"etag\": \"1\",\n    \"type\": \"folder\",\n    \"sequence_id\": \"3\",\n    \"name\": \"Contracts\"\n  },\n  \"item_status\": \"active\",\n  \"version_number\": \"1\",\n  \"comment_count\": 10,\n  \"permissions\": {\n    \"can_delete\": true,\n    \"can_download\": true,\n    \"can_invite_collaborator\": true,\n    \"can_rename\": true,\n    \"can_set_share_access\": true,\n    \"can_share\": true,\n    \"can_annotate\": true,\n    \"can_comment\": true,\n    \"can_preview\": true,\n    \"can_upload\": true,\n    \"can_view_annotations_all\": true,\n    \"can_view_annotations_self\": true\n  },\n  \"tags\": [\n    \"approved\"\n  ],\n  \"lock\": {\n    \"id\": \"11446498\",\n    \"type\": \"lock\",\n    \"created_by\": {\n      \"id\": \"11446498\",\n      \"type\": \"user\",\n      \"name\": \"Aaron Levie\",\n      \"login\": \"ceo@example.com\"\n    },\n    \"created_at\": \"2012-12-12T10:53:43-08:00\",\n    \"expired_at\": \"2012-12-12T10:53:43-08:00\",\n    \"is_download_prevented\": true\n  },\n  \"extension\": \"pdf\",\n  \"is_package\": true,\n  \"expiring_embed_link\": {\n    \"access_token\": \"c3FIOG9vSGV4VHo4QzAyg5T1JvNnJoZ3ExaVNyQWw6WjRsanRKZG5lQk9qUE1BVQ\",\n    \"expires_in\": 3600,\n    \"token_type\": \"bearer\",\n    \"restricted_to\": [\n      {\n        \"scope\": \"item_download\",\n        \"object\": {\n          \"id\": \"12345\",\n          \"etag\": \"1\",\n          \"type\": \"file\",\n          \"sequence_id\": \"3\",\n          \"name\": \"Contract.pdf\"\n        }\n      }\n    ],\n    \"url\": \"https://cloud.app.box.com/preview/expiring_embed/...\"\n  },\n  \"watermark_info\": {\n    \"is_watermarked\": true\n  },\n  \"allowed_invitee_roles\": [\n    \"editor\"\n  ],\n  \"is_externally_owned\": true,\n  \"has_collaborations\": true,\n  \"metadata\": {\n    \"global\": {\n      \"marketingCollateral\": {\n        \"$canEdit\": true,\n        \"$id\": \"01234500-12f1-1234-aa12-b1d234cb567e\",\n        \"$parent\": \"folder_59449484661\",\n        \"$scope\": \"enterprise_27335\",\n        \"$template\": \"properties\",\n        \"$type\": \"properties-6bcba49f-ca6d-4d2a-a758-57fe6edf44d0\",\n        \"$typeVersion\": 2,\n        \"$version\": 1\n      }\n    }\n  },\n  \"expires_at\": \"2012-12-12T10:53:43-08:00\",\n  \"representations\": {\n    \"entries\": [\n      {\n        \"content\": {\n          \"url_template\": \"https://dl.boxcloud.com/api/2.0/internal_files/123/versions/345/representations/png_paged_2048x2048/content/{+asset_path}?watermark_content=4567\"\n        },\n        \"info\": {\n          \"url\": \"https://api.box.com/2.0/internal_files/123/versions/345/representations/png_paged_2048x2048\"\n        },\n        \"properties\": {\n          \"dimensions\": \"2048x2048\",\n          \"paged\": true,\n          \"thumb\": true\n        },\n        \"representation\": \"png\",\n        \"status\": {\n          \"state\": \"success\"\n        }\n      }\n    ]\n  }\n}"
            },
            {
              "id": "2cf5acdd-b34e-4cae-a2ba-e818d6c0a49d",
              "name": "[412] Returns an error when the `If-Match` header does not match",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "If-Match",
                    "value": "1",
                    "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                    "disabled": true
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"NewFile.txt\",\n  \"description\": \"The latest reports. Automatically updated\",\n  \"parent\": {\n    \"id\": \"123\"\n  },\n  \"shared_link\": {\n    \"access\": \"open\",\n    \"password\": \"do-not-use-this-password\",\n    \"unshared_at\": \"2012-12-12T10:53:43-08:00\",\n    \"permissions\": {\n      \"can_download\": true\n    }\n  },\n  \"lock\": {\n    \"access\": \"lock\",\n    \"expires_at\": \"2012-12-12T10:53:43-08:00\",\n    \"is_download_prevented\": true\n  },\n  \"permissions\": {\n    \"can_download\": \"open\"\n  },\n  \"tags\": [\n    \"approved\"\n  ]\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "674e07e1-3351-4d2d-a4e4-24722fc06162",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Updates a file. This can be used to rename or move a file,\n\nhttps://developer.box.com/en/reference/put-files-id"
              },
              "status": "Precondition Failed",
              "code": 412,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "4bc6118c-727b-4c48-9f17-a7e92143bb34",
              "name": "[404] Returned if the file is not found, or the user does not",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "If-Match",
                    "value": "1",
                    "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                    "disabled": true
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"NewFile.txt\",\n  \"description\": \"The latest reports. Automatically updated\",\n  \"parent\": {\n    \"id\": \"123\"\n  },\n  \"shared_link\": {\n    \"access\": \"open\",\n    \"password\": \"do-not-use-this-password\",\n    \"unshared_at\": \"2012-12-12T10:53:43-08:00\",\n    \"permissions\": {\n      \"can_download\": true\n    }\n  },\n  \"lock\": {\n    \"access\": \"lock\",\n    \"expires_at\": \"2012-12-12T10:53:43-08:00\",\n    \"is_download_prevented\": true\n  },\n  \"permissions\": {\n    \"can_download\": \"open\"\n  },\n  \"tags\": [\n    \"approved\"\n  ]\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "674e07e1-3351-4d2d-a4e4-24722fc06162",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Updates a file. This can be used to rename or move a file,\n\nhttps://developer.box.com/en/reference/put-files-id"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "77eb4212-b335-4e9e-a23d-7cbe0f942808",
              "name": "[403] Returned if the user does not have all the permissions to complete the",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "If-Match",
                    "value": "1",
                    "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                    "disabled": true
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"NewFile.txt\",\n  \"description\": \"The latest reports. Automatically updated\",\n  \"parent\": {\n    \"id\": \"123\"\n  },\n  \"shared_link\": {\n    \"access\": \"open\",\n    \"password\": \"do-not-use-this-password\",\n    \"unshared_at\": \"2012-12-12T10:53:43-08:00\",\n    \"permissions\": {\n      \"can_download\": true\n    }\n  },\n  \"lock\": {\n    \"access\": \"lock\",\n    \"expires_at\": \"2012-12-12T10:53:43-08:00\",\n    \"is_download_prevented\": true\n  },\n  \"permissions\": {\n    \"can_download\": \"open\"\n  },\n  \"tags\": [\n    \"approved\"\n  ]\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "674e07e1-3351-4d2d-a4e4-24722fc06162",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Updates a file. This can be used to rename or move a file,\n\nhttps://developer.box.com/en/reference/put-files-id"
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "98349ddf-b477-4a01-9651-cc0558d65f0e",
              "name": "[401] Returned when the access token provided in the `Authorization` header",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "If-Match",
                    "value": "1",
                    "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                    "disabled": true
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"NewFile.txt\",\n  \"description\": \"The latest reports. Automatically updated\",\n  \"parent\": {\n    \"id\": \"123\"\n  },\n  \"shared_link\": {\n    \"access\": \"open\",\n    \"password\": \"do-not-use-this-password\",\n    \"unshared_at\": \"2012-12-12T10:53:43-08:00\",\n    \"permissions\": {\n      \"can_download\": true\n    }\n  },\n  \"lock\": {\n    \"access\": \"lock\",\n    \"expires_at\": \"2012-12-12T10:53:43-08:00\",\n    \"is_download_prevented\": true\n  },\n  \"permissions\": {\n    \"can_download\": \"open\"\n  },\n  \"tags\": [\n    \"approved\"\n  ]\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "674e07e1-3351-4d2d-a4e4-24722fc06162",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Updates a file. This can be used to rename or move a file,\n\nhttps://developer.box.com/en/reference/put-files-id"
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "e36c8cf2-29ab-464d-a3e3-6638e65e4735",
              "name": "[405] Returned if the `file_id` is not in a recognized format.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "If-Match",
                    "value": "1",
                    "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                    "disabled": true
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"NewFile.txt\",\n  \"description\": \"The latest reports. Automatically updated\",\n  \"parent\": {\n    \"id\": \"123\"\n  },\n  \"shared_link\": {\n    \"access\": \"open\",\n    \"password\": \"do-not-use-this-password\",\n    \"unshared_at\": \"2012-12-12T10:53:43-08:00\",\n    \"permissions\": {\n      \"can_download\": true\n    }\n  },\n  \"lock\": {\n    \"access\": \"lock\",\n    \"expires_at\": \"2012-12-12T10:53:43-08:00\",\n    \"is_download_prevented\": true\n  },\n  \"permissions\": {\n    \"can_download\": \"open\"\n  },\n  \"tags\": [\n    \"approved\"\n  ]\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "674e07e1-3351-4d2d-a4e4-24722fc06162",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Updates a file. This can be used to rename or move a file,\n\nhttps://developer.box.com/en/reference/put-files-id"
              },
              "status": "Method Not Allowed",
              "code": 405,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        },
        {
          "name": "Delete file",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "90e30bf9-c2a9-4c8e-a8fc-bd0a5dd6913c",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "3b7b7a7b-bdb7-4701-873f-6e68dacd2d04",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "DELETE",
            "header": [
              {
                "key": "If-Match",
                "value": "1",
                "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                "disabled": true
              }
            ],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/files/:file_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "files",
                ":file_id"
              ],
              "variable": [
                {
                  "id": "fe4cda2c-0e0c-415d-a859-6a0d4ee51d6f",
                  "key": "file_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                }
              ]
            },
            "description": "Deletes a file, either permanently or by moving it to\n\nhttps://developer.box.com/en/reference/delete-files-id"
          },
          "response": [
            {
              "id": "13da09ec-2348-4f1c-bcee-79cd349cc2f2",
              "name": "[401] Returned when the access token provided in the `Authorization` header",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [
                  {
                    "key": "If-Match",
                    "value": "1",
                    "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                    "disabled": true
                  }
                ],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id"
                  ],
                  "variable": [
                    {
                      "id": "fe4cda2c-0e0c-415d-a859-6a0d4ee51d6f",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Deletes a file, either permanently or by moving it to\n\nhttps://developer.box.com/en/reference/delete-files-id"
              },
              "status": "Unauthorized",
              "code": 401,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "1bac3011-42d1-4490-a3d8-82f189464006",
              "name": "[412] Returns an error when the `If-Match` header does not match",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [
                  {
                    "key": "If-Match",
                    "value": "1",
                    "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                    "disabled": true
                  }
                ],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id"
                  ],
                  "variable": [
                    {
                      "id": "fe4cda2c-0e0c-415d-a859-6a0d4ee51d6f",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Deletes a file, either permanently or by moving it to\n\nhttps://developer.box.com/en/reference/delete-files-id"
              },
              "status": "Precondition Failed",
              "code": 412,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "c77843f6-c33e-44b6-b450-2dc4b79afc99",
              "name": "[204] Returns an empty response when the file has been successfully",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [
                  {
                    "key": "If-Match",
                    "value": "1",
                    "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                    "disabled": true
                  }
                ],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id"
                  ],
                  "variable": [
                    {
                      "id": "fe4cda2c-0e0c-415d-a859-6a0d4ee51d6f",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Deletes a file, either permanently or by moving it to\n\nhttps://developer.box.com/en/reference/delete-files-id"
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "c86f6617-29f0-471e-ba4e-738c2b260406",
              "name": "[404] Returned if the file is not found or has already been deleted, or the user",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [
                  {
                    "key": "If-Match",
                    "value": "1",
                    "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                    "disabled": true
                  }
                ],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id"
                  ],
                  "variable": [
                    {
                      "id": "fe4cda2c-0e0c-415d-a859-6a0d4ee51d6f",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Deletes a file, either permanently or by moving it to\n\nhttps://developer.box.com/en/reference/delete-files-id"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "fe61a235-2d43-40c5-8a56-e8672de0b458",
              "name": "[405] Returned if the `file_id` is not in a recognized format.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [
                  {
                    "key": "If-Match",
                    "value": "1",
                    "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                    "disabled": true
                  }
                ],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id"
                  ],
                  "variable": [
                    {
                      "id": "fe4cda2c-0e0c-415d-a859-6a0d4ee51d6f",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Deletes a file, either permanently or by moving it to\n\nhttps://developer.box.com/en/reference/delete-files-id"
              },
              "status": "Method Not Allowed",
              "code": 405,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        }
      ],
      "_postman_id": "1cac9dae-f991-4918-a3a0-88abe90504d8"
    },
    {
      "name": "Folders",
      "item": [
        {
          "name": "Get folder information",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "99d74c86-1afc-49ba-92c4-4df0da4c5546",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "48b8aa41-da8d-41d8-a275-fcdd9f5af5b6",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [
              {
                "key": "If-None-Match",
                "value": "1",
                "description": "Ensures an item is only returned if it has changed.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `304 Not Modified` if the item has not\nchanged since.",
                "disabled": true
              }
            ],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/folders/:folder_id?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "folders",
                ":folder_id"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "2ac12993-bcf2-4c54-aa23-ff3aa05b255a",
                  "key": "folder_id",
                  "value": "0",
                  "type": "string",
                  "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                }
              ]
            },
            "description": "Retrieves details for a folder, including the first 100 entries\n\nhttps://developer.box.com/en/reference/get-folders-id"
          },
          "response": [
            {
              "id": "0fa9793b-ff0e-4e1c-a158-d4fde559a343",
              "name": "[403] Returned when the access token provided in the `Authorization` header",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "If-None-Match",
                    "value": "1",
                    "description": "Ensures an item is only returned if it has changed.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `304 Not Modified` if the item has not\nchanged since.",
                    "disabled": true
                  }
                ],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "2ac12993-bcf2-4c54-aa23-ff3aa05b255a",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Retrieves details for a folder, including the first 100 entries\n\nhttps://developer.box.com/en/reference/get-folders-id"
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "29c1309a-fe85-4384-90c0-07cc1fbc8847",
              "name": "[200] Returns a folder, including the first 100 entries in the folder.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "If-None-Match",
                    "value": "1",
                    "description": "Ensures an item is only returned if it has changed.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `304 Not Modified` if the item has not\nchanged since.",
                    "disabled": true
                  }
                ],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "2ac12993-bcf2-4c54-aa23-ff3aa05b255a",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Retrieves details for a folder, including the first 100 entries\n\nhttps://developer.box.com/en/reference/get-folders-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"12345\",\n  \"etag\": \"1\",\n  \"type\": \"folder\",\n  \"sequence_id\": \"3\",\n  \"name\": \"Contracts\",\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"description\": \"Legal contracts for the new ACME deal\",\n  \"size\": 629644,\n  \"path_collection\": {\n    \"total_count\": 1,\n    \"entries\": [\n      {\n        \"id\": \"12345\",\n        \"etag\": \"1\",\n        \"type\": \"folder\",\n        \"sequence_id\": \"3\",\n        \"name\": \"Contracts\"\n      }\n    ]\n  },\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"modified_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"trashed_at\": \"2012-12-12T10:53:43-08:00\",\n  \"purged_at\": \"2012-12-12T10:53:43-08:00\",\n  \"content_created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"content_modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"expires_at\": \"2012-12-12T10:53:43-08:00\",\n  \"owned_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"shared_link\": {\n    \"url\": \"https://www.box.com/s/vspke7y05sb214wjokpk\",\n    \"download_url\": \"https://www.box.com/shared/static/rh935iit6ewrmw0unyul.jpeg\",\n    \"vanity_url\": \"https://acme.app.box.com/v/my_url/\",\n    \"access\": \"open\",\n    \"effective_access\": \"company\",\n    \"effective_permission\": \"can_download\",\n    \"unshared_at\": \"2018-04-13T13:53:23-07:00\",\n    \"is_password_enabled\": true,\n    \"permissions\": {\n      \"can_download\": true,\n      \"can_preview\": true\n    },\n    \"download_count\": 3,\n    \"preview_count\": 3\n  },\n  \"folder_upload_email\": {\n    \"access\": \"open\",\n    \"email\": \"upload.Contracts.asd7asd@u.box.com\"\n  },\n  \"parent\": {\n    \"id\": \"12345\",\n    \"etag\": \"1\",\n    \"type\": \"folder\",\n    \"sequence_id\": \"3\",\n    \"name\": \"Contracts\"\n  },\n  \"item_status\": \"active\",\n  \"item_collection\": {\n    \"total_count\": 5000,\n    \"limit\": 1000,\n    \"offset\": 2000,\n    \"order\": [\n      {\n        \"by\": \"type\",\n        \"direction\": \"ASC\"\n      }\n    ],\n    \"entries\": {\n      \"id\": \"12345\",\n      \"etag\": \"1\",\n      \"type\": \"file\",\n      \"sequence_id\": \"3\",\n      \"name\": \"Contract.pdf\"\n    }\n  },\n  \"sync_state\": \"synced\",\n  \"has_collaborations\": true,\n  \"permissions\": {\n    \"can_delete\": true,\n    \"can_download\": true,\n    \"can_invite_collaborator\": true,\n    \"can_rename\": true,\n    \"can_set_share_access\": true,\n    \"can_share\": true,\n    \"can_upload\": true\n  },\n  \"tags\": [\n    \"approved\"\n  ],\n  \"can_non_owners_invite\": true,\n  \"is_externally_owned\": true,\n  \"is_collaboration_restricted_to_enterprise\": true,\n  \"allowed_shared_link_access_levels\": [\n    \"open\"\n  ],\n  \"allowed_invitee_roles\": [\n    \"editor\"\n  ],\n  \"watermark_info\": {\n    \"is_watermarked\": true\n  },\n  \"can_non_owners_view_collaborators\": true\n}"
            },
            {
              "id": "5ffe7fc9-9fbc-47b8-9221-9c19dab6f7f0",
              "name": "[405] Returned if the `folder_id` is not in a recognized format.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "If-None-Match",
                    "value": "1",
                    "description": "Ensures an item is only returned if it has changed.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `304 Not Modified` if the item has not\nchanged since.",
                    "disabled": true
                  }
                ],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "2ac12993-bcf2-4c54-aa23-ff3aa05b255a",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Retrieves details for a folder, including the first 100 entries\n\nhttps://developer.box.com/en/reference/get-folders-id"
              },
              "status": "Method Not Allowed",
              "code": 405,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "648b7cd3-8c9b-45a8-987d-c104a1c97fb3",
              "name": "[404] Returned if the folder is not found, or the user does not",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "If-None-Match",
                    "value": "1",
                    "description": "Ensures an item is only returned if it has changed.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `304 Not Modified` if the item has not\nchanged since.",
                    "disabled": true
                  }
                ],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "2ac12993-bcf2-4c54-aa23-ff3aa05b255a",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Retrieves details for a folder, including the first 100 entries\n\nhttps://developer.box.com/en/reference/get-folders-id"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "70f90152-5192-4752-a813-0e423e19fa97",
              "name": "[304] Returns an empty response when the `If-None-Match` header matches",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "If-None-Match",
                    "value": "1",
                    "description": "Ensures an item is only returned if it has changed.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `304 Not Modified` if the item has not\nchanged since.",
                    "disabled": true
                  }
                ],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "2ac12993-bcf2-4c54-aa23-ff3aa05b255a",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Retrieves details for a folder, including the first 100 entries\n\nhttps://developer.box.com/en/reference/get-folders-id"
              },
              "status": "Not Modified",
              "code": 304,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        },
        {
          "name": "List items in folder",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "a0a23919-a014-41db-a7ae-bee48502dac3",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "9b55a55f-7638-4c53-a505-8c853f96e2a2",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/items?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "folders",
                ":folder_id",
                "items"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                },
                {
                  "key": "usemarker",
                  "value": "true",
                  "description": "Specifies whether to use marker-based pagination instead of\noffset-based pagination. Only one pagination method can\nbe used at a time.\n\nBy setting this value to true, the API will return a `marker` field\nthat can be passed as a parameter to this endpoint to get the next\npage of the response.",
                  "disabled": true
                },
                {
                  "key": "marker",
                  "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                  "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                  "disabled": true
                },
                {
                  "key": "offset",
                  "value": "1000",
                  "description": "The offset of the item at which to begin the response.",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "1000",
                  "description": "The maximum number of items to return per page.",
                  "disabled": true
                },
                {
                  "key": "sort",
                  "value": "id",
                  "description": "Defines the **second** attribute by which items\nare sorted.\n\nItems are always sorted by their `type` first, with\nfolders listed before files, and files listed\nbefore web links.\n\nThis parameter is not supported for marker-based pagination\non the root folder (the folder with an ID of `0`).",
                  "disabled": true
                },
                {
                  "key": "direction",
                  "value": "ASC",
                  "description": "The direction to sort results in. This can be either in alphabetical ascending\n(`ASC`) or descending (`DESC`) order.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "7cdb5c5e-30ba-4084-869d-1adbf252371b",
                  "key": "folder_id",
                  "value": "0",
                  "type": "string",
                  "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                }
              ]
            },
            "description": "Retrieves a page of items in a folder. These items can be files,\n\nhttps://developer.box.com/en/reference/get-folders-id-items"
          },
          "response": [
            {
              "id": "0a7f0c48-fa38-4ccc-9d46-2162aec3d534",
              "name": "[404] Returned if the folder is not found, or the user does not",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/items?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "items"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    },
                    {
                      "key": "usemarker",
                      "value": "true",
                      "description": "Specifies whether to use marker-based pagination instead of\noffset-based pagination. Only one pagination method can\nbe used at a time.\n\nBy setting this value to true, the API will return a `marker` field\nthat can be passed as a parameter to this endpoint to get the next\npage of the response.",
                      "disabled": true
                    },
                    {
                      "key": "marker",
                      "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                      "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                      "disabled": true
                    },
                    {
                      "key": "offset",
                      "value": "1000",
                      "description": "The offset of the item at which to begin the response.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "id",
                      "description": "Defines the **second** attribute by which items\nare sorted.\n\nItems are always sorted by their `type` first, with\nfolders listed before files, and files listed\nbefore web links.\n\nThis parameter is not supported for marker-based pagination\non the root folder (the folder with an ID of `0`).",
                      "disabled": true
                    },
                    {
                      "key": "direction",
                      "value": "ASC",
                      "description": "The direction to sort results in. This can be either in alphabetical ascending\n(`ASC`) or descending (`DESC`) order.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "7cdb5c5e-30ba-4084-869d-1adbf252371b",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Retrieves a page of items in a folder. These items can be files,\n\nhttps://developer.box.com/en/reference/get-folders-id-items"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "34667f63-2a3e-437f-a6bd-67d34abc3de6",
              "name": "[405] Returned if the `folder_id` is not in a recognized format.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/items?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "items"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    },
                    {
                      "key": "usemarker",
                      "value": "true",
                      "description": "Specifies whether to use marker-based pagination instead of\noffset-based pagination. Only one pagination method can\nbe used at a time.\n\nBy setting this value to true, the API will return a `marker` field\nthat can be passed as a parameter to this endpoint to get the next\npage of the response.",
                      "disabled": true
                    },
                    {
                      "key": "marker",
                      "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                      "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                      "disabled": true
                    },
                    {
                      "key": "offset",
                      "value": "1000",
                      "description": "The offset of the item at which to begin the response.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "id",
                      "description": "Defines the **second** attribute by which items\nare sorted.\n\nItems are always sorted by their `type` first, with\nfolders listed before files, and files listed\nbefore web links.\n\nThis parameter is not supported for marker-based pagination\non the root folder (the folder with an ID of `0`).",
                      "disabled": true
                    },
                    {
                      "key": "direction",
                      "value": "ASC",
                      "description": "The direction to sort results in. This can be either in alphabetical ascending\n(`ASC`) or descending (`DESC`) order.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "7cdb5c5e-30ba-4084-869d-1adbf252371b",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Retrieves a page of items in a folder. These items can be files,\n\nhttps://developer.box.com/en/reference/get-folders-id-items"
              },
              "status": "Method Not Allowed",
              "code": 405,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "88e649d8-0ae3-48c5-adb3-8a9ef64df30a",
              "name": "[403] Returned when the access token provided in the `Authorization` header",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/items?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "items"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    },
                    {
                      "key": "usemarker",
                      "value": "true",
                      "description": "Specifies whether to use marker-based pagination instead of\noffset-based pagination. Only one pagination method can\nbe used at a time.\n\nBy setting this value to true, the API will return a `marker` field\nthat can be passed as a parameter to this endpoint to get the next\npage of the response.",
                      "disabled": true
                    },
                    {
                      "key": "marker",
                      "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                      "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                      "disabled": true
                    },
                    {
                      "key": "offset",
                      "value": "1000",
                      "description": "The offset of the item at which to begin the response.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "id",
                      "description": "Defines the **second** attribute by which items\nare sorted.\n\nItems are always sorted by their `type` first, with\nfolders listed before files, and files listed\nbefore web links.\n\nThis parameter is not supported for marker-based pagination\non the root folder (the folder with an ID of `0`).",
                      "disabled": true
                    },
                    {
                      "key": "direction",
                      "value": "ASC",
                      "description": "The direction to sort results in. This can be either in alphabetical ascending\n(`ASC`) or descending (`DESC`) order.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "7cdb5c5e-30ba-4084-869d-1adbf252371b",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Retrieves a page of items in a folder. These items can be files,\n\nhttps://developer.box.com/en/reference/get-folders-id-items"
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "9c0dcf87-dd7d-468b-9105-c0a6daa2f58c",
              "name": "[200] Returns a collection of files, folders, and web links contained in a folder.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/items?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "items"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    },
                    {
                      "key": "usemarker",
                      "value": "true",
                      "description": "Specifies whether to use marker-based pagination instead of\noffset-based pagination. Only one pagination method can\nbe used at a time.\n\nBy setting this value to true, the API will return a `marker` field\nthat can be passed as a parameter to this endpoint to get the next\npage of the response.",
                      "disabled": true
                    },
                    {
                      "key": "marker",
                      "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                      "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                      "disabled": true
                    },
                    {
                      "key": "offset",
                      "value": "1000",
                      "description": "The offset of the item at which to begin the response.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "id",
                      "description": "Defines the **second** attribute by which items\nare sorted.\n\nItems are always sorted by their `type` first, with\nfolders listed before files, and files listed\nbefore web links.\n\nThis parameter is not supported for marker-based pagination\non the root folder (the folder with an ID of `0`).",
                      "disabled": true
                    },
                    {
                      "key": "direction",
                      "value": "ASC",
                      "description": "The direction to sort results in. This can be either in alphabetical ascending\n(`ASC`) or descending (`DESC`) order.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "7cdb5c5e-30ba-4084-869d-1adbf252371b",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Retrieves a page of items in a folder. These items can be files,\n\nhttps://developer.box.com/en/reference/get-folders-id-items"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"total_count\": 5000,\n  \"limit\": 1000,\n  \"offset\": 2000,\n  \"order\": [\n    {\n      \"by\": \"type\",\n      \"direction\": \"ASC\"\n    }\n  ],\n  \"entries\": {\n    \"id\": \"12345\",\n    \"etag\": \"1\",\n    \"type\": \"file\",\n    \"sequence_id\": \"3\",\n    \"name\": \"Contract.pdf\"\n  }\n}"
            }
          ]
        },
        {
          "name": "Create folder",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "322418f2-84d7-4153-bfd8-3b5715ca95d6",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "16e1d892-5167-4cbf-a7cc-009aafc3ce7d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"New Folder\",\n  \"parent\": {\n    \"id\": \"0\"\n  },\n  \"folder_upload_email\": {\n    \"access\": \"open\"\n  },\n  \"sync_state\": \"synced\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/folders?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "folders"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ]
            },
            "description": "Creates a new empty folder within the specified parent folder.\n\nhttps://developer.box.com/en/reference/post-folders"
          },
          "response": [
            {
              "id": "2a775382-44ad-4864-9db1-b2e4ac8ee4e4",
              "name": "[403] Returns an error if the user does not have the required",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"New Folder\",\n  \"parent\": {\n    \"id\": \"0\"\n  },\n  \"folder_upload_email\": {\n    \"access\": \"open\"\n  },\n  \"sync_state\": \"synced\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Creates a new empty folder within the specified parent folder.\n\nhttps://developer.box.com/en/reference/post-folders"
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "38a2d3bf-4cab-4e67-bb1f-a6f72ab3d659",
              "name": "[400] Returns an error if some of the parameters are missing or",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"New Folder\",\n  \"parent\": {\n    \"id\": \"0\"\n  },\n  \"folder_upload_email\": {\n    \"access\": \"open\"\n  },\n  \"sync_state\": \"synced\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Creates a new empty folder within the specified parent folder.\n\nhttps://developer.box.com/en/reference/post-folders"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "8935f0c0-4b65-47ee-8911-01012eac8810",
              "name": "[404] Returns an error if the parent folder could not be found,",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"New Folder\",\n  \"parent\": {\n    \"id\": \"0\"\n  },\n  \"folder_upload_email\": {\n    \"access\": \"open\"\n  },\n  \"sync_state\": \"synced\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Creates a new empty folder within the specified parent folder.\n\nhttps://developer.box.com/en/reference/post-folders"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "b6e08b96-d9f2-4b57-a423-5e237c6a0b83",
              "name": "[201] Returns a folder object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"New Folder\",\n  \"parent\": {\n    \"id\": \"0\"\n  },\n  \"folder_upload_email\": {\n    \"access\": \"open\"\n  },\n  \"sync_state\": \"synced\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Creates a new empty folder within the specified parent folder.\n\nhttps://developer.box.com/en/reference/post-folders"
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"12345\",\n  \"etag\": \"1\",\n  \"type\": \"folder\",\n  \"sequence_id\": \"3\",\n  \"name\": \"Contracts\",\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"description\": \"Legal contracts for the new ACME deal\",\n  \"size\": 629644,\n  \"path_collection\": {\n    \"total_count\": 1,\n    \"entries\": [\n      {\n        \"id\": \"12345\",\n        \"etag\": \"1\",\n        \"type\": \"folder\",\n        \"sequence_id\": \"3\",\n        \"name\": \"Contracts\"\n      }\n    ]\n  },\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"modified_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"trashed_at\": \"2012-12-12T10:53:43-08:00\",\n  \"purged_at\": \"2012-12-12T10:53:43-08:00\",\n  \"content_created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"content_modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"expires_at\": \"2012-12-12T10:53:43-08:00\",\n  \"owned_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"shared_link\": {\n    \"url\": \"https://www.box.com/s/vspke7y05sb214wjokpk\",\n    \"download_url\": \"https://www.box.com/shared/static/rh935iit6ewrmw0unyul.jpeg\",\n    \"vanity_url\": \"https://acme.app.box.com/v/my_url/\",\n    \"access\": \"open\",\n    \"effective_access\": \"company\",\n    \"effective_permission\": \"can_download\",\n    \"unshared_at\": \"2018-04-13T13:53:23-07:00\",\n    \"is_password_enabled\": true,\n    \"permissions\": {\n      \"can_download\": true,\n      \"can_preview\": true\n    },\n    \"download_count\": 3,\n    \"preview_count\": 3\n  },\n  \"folder_upload_email\": {\n    \"access\": \"open\",\n    \"email\": \"upload.Contracts.asd7asd@u.box.com\"\n  },\n  \"parent\": {\n    \"id\": \"12345\",\n    \"etag\": \"1\",\n    \"type\": \"folder\",\n    \"sequence_id\": \"3\",\n    \"name\": \"Contracts\"\n  },\n  \"item_status\": \"active\",\n  \"item_collection\": {\n    \"total_count\": 5000,\n    \"limit\": 1000,\n    \"offset\": 2000,\n    \"order\": [\n      {\n        \"by\": \"type\",\n        \"direction\": \"ASC\"\n      }\n    ],\n    \"entries\": {\n      \"id\": \"12345\",\n      \"etag\": \"1\",\n      \"type\": \"file\",\n      \"sequence_id\": \"3\",\n      \"name\": \"Contract.pdf\"\n    }\n  },\n  \"sync_state\": \"synced\",\n  \"has_collaborations\": true,\n  \"permissions\": {\n    \"can_delete\": true,\n    \"can_download\": true,\n    \"can_invite_collaborator\": true,\n    \"can_rename\": true,\n    \"can_set_share_access\": true,\n    \"can_share\": true,\n    \"can_upload\": true\n  },\n  \"tags\": [\n    \"approved\"\n  ],\n  \"can_non_owners_invite\": true,\n  \"is_externally_owned\": true,\n  \"is_collaboration_restricted_to_enterprise\": true,\n  \"allowed_shared_link_access_levels\": [\n    \"open\"\n  ],\n  \"allowed_invitee_roles\": [\n    \"editor\"\n  ],\n  \"watermark_info\": {\n    \"is_watermarked\": true\n  },\n  \"can_non_owners_view_collaborators\": true\n}"
            },
            {
              "id": "d86dda6a-a9d2-4cb7-91ce-ece1b1d225e8",
              "name": "[409] * `operation_blocked_temporary`: Returned if either of the destination",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"New Folder\",\n  \"parent\": {\n    \"id\": \"0\"\n  },\n  \"folder_upload_email\": {\n    \"access\": \"open\"\n  },\n  \"sync_state\": \"synced\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Creates a new empty folder within the specified parent folder.\n\nhttps://developer.box.com/en/reference/post-folders"
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        },
        {
          "name": "Copy folder",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ca3cdd08-a632-4862-a0c6-14daeb351cdc",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "d9fc5f5c-ee6e-4cd0-bbf0-144a43d255cb",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"New Folder\",\n  \"parent\": {\n    \"id\": \"0\"\n  }\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/copy?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "folders",
                ":folder_id",
                "copy"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "13198fdf-ddbb-4fa6-942b-d45d65442ea3",
                  "key": "folder_id",
                  "value": "0",
                  "type": "string",
                  "description": "The unique identifier of the folder to copy.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder with the ID `0` can not be copied."
                }
              ]
            },
            "description": "Creates a copy of a folder within a destination folder.\n\nhttps://developer.box.com/en/reference/post-folders-id-copy"
          },
          "response": [
            {
              "id": "183be0c6-fbbf-467b-b86f-1c1dae7102dd",
              "name": "[304] Returns an empty response when the `If-None-Match` header matches",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"New Folder\",\n  \"parent\": {\n    \"id\": \"0\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/copy?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "copy"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "13198fdf-ddbb-4fa6-942b-d45d65442ea3",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier of the folder to copy.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder with the ID `0` can not be copied."
                    }
                  ]
                },
                "description": "Creates a copy of a folder within a destination folder.\n\nhttps://developer.box.com/en/reference/post-folders-id-copy"
              },
              "status": "Not Modified",
              "code": 304,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "3b173b9d-9102-4c60-8d4b-97276c2bbfef",
              "name": "[404] Returns an error if either the source or destination folder",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"New Folder\",\n  \"parent\": {\n    \"id\": \"0\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/copy?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "copy"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "13198fdf-ddbb-4fa6-942b-d45d65442ea3",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier of the folder to copy.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder with the ID `0` can not be copied."
                    }
                  ]
                },
                "description": "Creates a copy of a folder within a destination folder.\n\nhttps://developer.box.com/en/reference/post-folders-id-copy"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "3db67773-f5ad-4a9a-bc55-f523062b0e98",
              "name": "[500] Returns an error when trying to copy the root folder.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"New Folder\",\n  \"parent\": {\n    \"id\": \"0\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/copy?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "copy"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "13198fdf-ddbb-4fa6-942b-d45d65442ea3",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier of the folder to copy.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder with the ID `0` can not be copied."
                    }
                  ]
                },
                "description": "Creates a copy of a folder within a destination folder.\n\nhttps://developer.box.com/en/reference/post-folders-id-copy"
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "56885765-0df9-43fd-b4ed-87a12925230c",
              "name": "[201] Returns a new folder object representing the copied folder.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"New Folder\",\n  \"parent\": {\n    \"id\": \"0\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/copy?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "copy"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "13198fdf-ddbb-4fa6-942b-d45d65442ea3",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier of the folder to copy.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder with the ID `0` can not be copied."
                    }
                  ]
                },
                "description": "Creates a copy of a folder within a destination folder.\n\nhttps://developer.box.com/en/reference/post-folders-id-copy"
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"12345\",\n  \"etag\": \"1\",\n  \"type\": \"folder\",\n  \"sequence_id\": \"3\",\n  \"name\": \"Contracts\",\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"description\": \"Legal contracts for the new ACME deal\",\n  \"size\": 629644,\n  \"path_collection\": {\n    \"total_count\": 1,\n    \"entries\": [\n      {\n        \"id\": \"12345\",\n        \"etag\": \"1\",\n        \"type\": \"folder\",\n        \"sequence_id\": \"3\",\n        \"name\": \"Contracts\"\n      }\n    ]\n  },\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"modified_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"trashed_at\": \"2012-12-12T10:53:43-08:00\",\n  \"purged_at\": \"2012-12-12T10:53:43-08:00\",\n  \"content_created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"content_modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"expires_at\": \"2012-12-12T10:53:43-08:00\",\n  \"owned_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"shared_link\": {\n    \"url\": \"https://www.box.com/s/vspke7y05sb214wjokpk\",\n    \"download_url\": \"https://www.box.com/shared/static/rh935iit6ewrmw0unyul.jpeg\",\n    \"vanity_url\": \"https://acme.app.box.com/v/my_url/\",\n    \"access\": \"open\",\n    \"effective_access\": \"company\",\n    \"effective_permission\": \"can_download\",\n    \"unshared_at\": \"2018-04-13T13:53:23-07:00\",\n    \"is_password_enabled\": true,\n    \"permissions\": {\n      \"can_download\": true,\n      \"can_preview\": true\n    },\n    \"download_count\": 3,\n    \"preview_count\": 3\n  },\n  \"folder_upload_email\": {\n    \"access\": \"open\",\n    \"email\": \"upload.Contracts.asd7asd@u.box.com\"\n  },\n  \"parent\": {\n    \"id\": \"12345\",\n    \"etag\": \"1\",\n    \"type\": \"folder\",\n    \"sequence_id\": \"3\",\n    \"name\": \"Contracts\"\n  },\n  \"item_status\": \"active\",\n  \"item_collection\": {\n    \"total_count\": 5000,\n    \"limit\": 1000,\n    \"offset\": 2000,\n    \"order\": [\n      {\n        \"by\": \"type\",\n        \"direction\": \"ASC\"\n      }\n    ],\n    \"entries\": {\n      \"id\": \"12345\",\n      \"etag\": \"1\",\n      \"type\": \"file\",\n      \"sequence_id\": \"3\",\n      \"name\": \"Contract.pdf\"\n    }\n  },\n  \"sync_state\": \"synced\",\n  \"has_collaborations\": true,\n  \"permissions\": {\n    \"can_delete\": true,\n    \"can_download\": true,\n    \"can_invite_collaborator\": true,\n    \"can_rename\": true,\n    \"can_set_share_access\": true,\n    \"can_share\": true,\n    \"can_upload\": true\n  },\n  \"tags\": [\n    \"approved\"\n  ],\n  \"can_non_owners_invite\": true,\n  \"is_externally_owned\": true,\n  \"is_collaboration_restricted_to_enterprise\": true,\n  \"allowed_shared_link_access_levels\": [\n    \"open\"\n  ],\n  \"allowed_invitee_roles\": [\n    \"editor\"\n  ],\n  \"watermark_info\": {\n    \"is_watermarked\": true\n  },\n  \"can_non_owners_view_collaborators\": true\n}"
            },
            {
              "id": "cbccdf16-9b9f-43bc-a7e1-bcd944afca45",
              "name": "[409] Returns an error if a folder by this name already exists",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"New Folder\",\n  \"parent\": {\n    \"id\": \"0\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/copy?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "copy"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "13198fdf-ddbb-4fa6-942b-d45d65442ea3",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier of the folder to copy.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder with the ID `0` can not be copied."
                    }
                  ]
                },
                "description": "Creates a copy of a folder within a destination folder.\n\nhttps://developer.box.com/en/reference/post-folders-id-copy"
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "ec56fe83-d07f-484e-8386-e3cfa6101fbb",
              "name": "[400] Returns an error if some of the parameters are missing or",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"New Folder\",\n  \"parent\": {\n    \"id\": \"0\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/copy?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "copy"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "13198fdf-ddbb-4fa6-942b-d45d65442ea3",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier of the folder to copy.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder with the ID `0` can not be copied."
                    }
                  ]
                },
                "description": "Creates a copy of a folder within a destination folder.\n\nhttps://developer.box.com/en/reference/post-folders-id-copy"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        },
        {
          "name": "Update folder",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "07be1d73-5c14-4987-bf4f-ac1bc8ec6d61",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "18d71d5c-4873-4195-8ccf-83431e843781",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "PUT",
            "header": [
              {
                "key": "If-Match",
                "value": "1",
                "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                "disabled": true
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"New Folder\",\n  \"description\": \"Legal contracts for the new ACME deal\",\n  \"sync_state\": \"synced\",\n  \"can_non_owners_invite\": true,\n  \"parent\": {\n    \"id\": \"0\"\n  },\n  \"shared_link\": {\n    \"access\": \"open\",\n    \"password\": \"do-not-use-this-password\",\n    \"unshared_at\": \"2012-12-12T10:53:43-08:00\",\n    \"permissions\": {\n      \"can_download\": true\n    }\n  },\n  \"folder_upload_email\": {\n    \"access\": \"open\"\n  },\n  \"tags\": [\n    \"approved\"\n  ],\n  \"is_collaboration_restricted_to_enterprise\": true,\n  \"collections\": [\n    {\n      \"id\": \"11446498\"\n    }\n  ],\n  \"can_non_owners_view_collaborators\": true\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/folders/:folder_id?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "folders",
                ":folder_id"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "ee58c3a6-4596-4995-aecb-606f6668fb2e",
                  "key": "folder_id",
                  "value": "0",
                  "type": "string",
                  "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                }
              ]
            },
            "description": "Updates a folder. This can be also be used to move the folder,\n\nhttps://developer.box.com/en/reference/put-folders-id"
          },
          "response": [
            {
              "id": "09ad6331-eb82-4016-b5d1-2ebea887862f",
              "name": "[403] Returns an error if the user does not have the required",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "If-Match",
                    "value": "1",
                    "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                    "disabled": true
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"New Folder\",\n  \"description\": \"Legal contracts for the new ACME deal\",\n  \"sync_state\": \"synced\",\n  \"can_non_owners_invite\": true,\n  \"parent\": {\n    \"id\": \"0\"\n  },\n  \"shared_link\": {\n    \"access\": \"open\",\n    \"password\": \"do-not-use-this-password\",\n    \"unshared_at\": \"2012-12-12T10:53:43-08:00\",\n    \"permissions\": {\n      \"can_download\": true\n    }\n  },\n  \"folder_upload_email\": {\n    \"access\": \"open\"\n  },\n  \"tags\": [\n    \"approved\"\n  ],\n  \"is_collaboration_restricted_to_enterprise\": true,\n  \"collections\": [\n    {\n      \"id\": \"11446498\"\n    }\n  ],\n  \"can_non_owners_view_collaborators\": true\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "ee58c3a6-4596-4995-aecb-606f6668fb2e",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Updates a folder. This can be also be used to move the folder,\n\nhttps://developer.box.com/en/reference/put-folders-id"
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "5db2e7c6-31e6-452e-8710-6d1decaa855b",
              "name": "[400] Returns an error if some of the parameters are missing or",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "If-Match",
                    "value": "1",
                    "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                    "disabled": true
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"New Folder\",\n  \"description\": \"Legal contracts for the new ACME deal\",\n  \"sync_state\": \"synced\",\n  \"can_non_owners_invite\": true,\n  \"parent\": {\n    \"id\": \"0\"\n  },\n  \"shared_link\": {\n    \"access\": \"open\",\n    \"password\": \"do-not-use-this-password\",\n    \"unshared_at\": \"2012-12-12T10:53:43-08:00\",\n    \"permissions\": {\n      \"can_download\": true\n    }\n  },\n  \"folder_upload_email\": {\n    \"access\": \"open\"\n  },\n  \"tags\": [\n    \"approved\"\n  ],\n  \"is_collaboration_restricted_to_enterprise\": true,\n  \"collections\": [\n    {\n      \"id\": \"11446498\"\n    }\n  ],\n  \"can_non_owners_view_collaborators\": true\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "ee58c3a6-4596-4995-aecb-606f6668fb2e",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Updates a folder. This can be also be used to move the folder,\n\nhttps://developer.box.com/en/reference/put-folders-id"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "63a1fb99-7a94-4570-8bac-d6590af9b7e7",
              "name": "[404] Returns an error if the folder or parent folder could not be found,",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "If-Match",
                    "value": "1",
                    "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                    "disabled": true
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"New Folder\",\n  \"description\": \"Legal contracts for the new ACME deal\",\n  \"sync_state\": \"synced\",\n  \"can_non_owners_invite\": true,\n  \"parent\": {\n    \"id\": \"0\"\n  },\n  \"shared_link\": {\n    \"access\": \"open\",\n    \"password\": \"do-not-use-this-password\",\n    \"unshared_at\": \"2012-12-12T10:53:43-08:00\",\n    \"permissions\": {\n      \"can_download\": true\n    }\n  },\n  \"folder_upload_email\": {\n    \"access\": \"open\"\n  },\n  \"tags\": [\n    \"approved\"\n  ],\n  \"is_collaboration_restricted_to_enterprise\": true,\n  \"collections\": [\n    {\n      \"id\": \"11446498\"\n    }\n  ],\n  \"can_non_owners_view_collaborators\": true\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "ee58c3a6-4596-4995-aecb-606f6668fb2e",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Updates a folder. This can be also be used to move the folder,\n\nhttps://developer.box.com/en/reference/put-folders-id"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "642ae901-874b-47cb-8b56-d9d92cdc2a83",
              "name": "[412] Returns an error when the `If-Match` header does not match",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "If-Match",
                    "value": "1",
                    "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                    "disabled": true
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"New Folder\",\n  \"description\": \"Legal contracts for the new ACME deal\",\n  \"sync_state\": \"synced\",\n  \"can_non_owners_invite\": true,\n  \"parent\": {\n    \"id\": \"0\"\n  },\n  \"shared_link\": {\n    \"access\": \"open\",\n    \"password\": \"do-not-use-this-password\",\n    \"unshared_at\": \"2012-12-12T10:53:43-08:00\",\n    \"permissions\": {\n      \"can_download\": true\n    }\n  },\n  \"folder_upload_email\": {\n    \"access\": \"open\"\n  },\n  \"tags\": [\n    \"approved\"\n  ],\n  \"is_collaboration_restricted_to_enterprise\": true,\n  \"collections\": [\n    {\n      \"id\": \"11446498\"\n    }\n  ],\n  \"can_non_owners_view_collaborators\": true\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "ee58c3a6-4596-4995-aecb-606f6668fb2e",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Updates a folder. This can be also be used to move the folder,\n\nhttps://developer.box.com/en/reference/put-folders-id"
              },
              "status": "Precondition Failed",
              "code": 412,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "85190103-28fc-4c49-a224-7d06c3ddc04b",
              "name": "[503] Returns an error when the operation takes longer",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "If-Match",
                    "value": "1",
                    "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                    "disabled": true
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"New Folder\",\n  \"description\": \"Legal contracts for the new ACME deal\",\n  \"sync_state\": \"synced\",\n  \"can_non_owners_invite\": true,\n  \"parent\": {\n    \"id\": \"0\"\n  },\n  \"shared_link\": {\n    \"access\": \"open\",\n    \"password\": \"do-not-use-this-password\",\n    \"unshared_at\": \"2012-12-12T10:53:43-08:00\",\n    \"permissions\": {\n      \"can_download\": true\n    }\n  },\n  \"folder_upload_email\": {\n    \"access\": \"open\"\n  },\n  \"tags\": [\n    \"approved\"\n  ],\n  \"is_collaboration_restricted_to_enterprise\": true,\n  \"collections\": [\n    {\n      \"id\": \"11446498\"\n    }\n  ],\n  \"can_non_owners_view_collaborators\": true\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "ee58c3a6-4596-4995-aecb-606f6668fb2e",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Updates a folder. This can be also be used to move the folder,\n\nhttps://developer.box.com/en/reference/put-folders-id"
              },
              "status": "Service Unavailable",
              "code": 503,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "af4fb8c9-3e49-44c3-8a60-706318f8b0fa",
              "name": "[200] Returns a folder object for the updated folder",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "If-Match",
                    "value": "1",
                    "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                    "disabled": true
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"New Folder\",\n  \"description\": \"Legal contracts for the new ACME deal\",\n  \"sync_state\": \"synced\",\n  \"can_non_owners_invite\": true,\n  \"parent\": {\n    \"id\": \"0\"\n  },\n  \"shared_link\": {\n    \"access\": \"open\",\n    \"password\": \"do-not-use-this-password\",\n    \"unshared_at\": \"2012-12-12T10:53:43-08:00\",\n    \"permissions\": {\n      \"can_download\": true\n    }\n  },\n  \"folder_upload_email\": {\n    \"access\": \"open\"\n  },\n  \"tags\": [\n    \"approved\"\n  ],\n  \"is_collaboration_restricted_to_enterprise\": true,\n  \"collections\": [\n    {\n      \"id\": \"11446498\"\n    }\n  ],\n  \"can_non_owners_view_collaborators\": true\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "ee58c3a6-4596-4995-aecb-606f6668fb2e",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Updates a folder. This can be also be used to move the folder,\n\nhttps://developer.box.com/en/reference/put-folders-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"12345\",\n  \"etag\": \"1\",\n  \"type\": \"folder\",\n  \"sequence_id\": \"3\",\n  \"name\": \"Contracts\",\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"description\": \"Legal contracts for the new ACME deal\",\n  \"size\": 629644,\n  \"path_collection\": {\n    \"total_count\": 1,\n    \"entries\": [\n      {\n        \"id\": \"12345\",\n        \"etag\": \"1\",\n        \"type\": \"folder\",\n        \"sequence_id\": \"3\",\n        \"name\": \"Contracts\"\n      }\n    ]\n  },\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"modified_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"trashed_at\": \"2012-12-12T10:53:43-08:00\",\n  \"purged_at\": \"2012-12-12T10:53:43-08:00\",\n  \"content_created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"content_modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"expires_at\": \"2012-12-12T10:53:43-08:00\",\n  \"owned_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"shared_link\": {\n    \"url\": \"https://www.box.com/s/vspke7y05sb214wjokpk\",\n    \"download_url\": \"https://www.box.com/shared/static/rh935iit6ewrmw0unyul.jpeg\",\n    \"vanity_url\": \"https://acme.app.box.com/v/my_url/\",\n    \"access\": \"open\",\n    \"effective_access\": \"company\",\n    \"effective_permission\": \"can_download\",\n    \"unshared_at\": \"2018-04-13T13:53:23-07:00\",\n    \"is_password_enabled\": true,\n    \"permissions\": {\n      \"can_download\": true,\n      \"can_preview\": true\n    },\n    \"download_count\": 3,\n    \"preview_count\": 3\n  },\n  \"folder_upload_email\": {\n    \"access\": \"open\",\n    \"email\": \"upload.Contracts.asd7asd@u.box.com\"\n  },\n  \"parent\": {\n    \"id\": \"12345\",\n    \"etag\": \"1\",\n    \"type\": \"folder\",\n    \"sequence_id\": \"3\",\n    \"name\": \"Contracts\"\n  },\n  \"item_status\": \"active\",\n  \"item_collection\": {\n    \"total_count\": 5000,\n    \"limit\": 1000,\n    \"offset\": 2000,\n    \"order\": [\n      {\n        \"by\": \"type\",\n        \"direction\": \"ASC\"\n      }\n    ],\n    \"entries\": {\n      \"id\": \"12345\",\n      \"etag\": \"1\",\n      \"type\": \"file\",\n      \"sequence_id\": \"3\",\n      \"name\": \"Contract.pdf\"\n    }\n  },\n  \"sync_state\": \"synced\",\n  \"has_collaborations\": true,\n  \"permissions\": {\n    \"can_delete\": true,\n    \"can_download\": true,\n    \"can_invite_collaborator\": true,\n    \"can_rename\": true,\n    \"can_set_share_access\": true,\n    \"can_share\": true,\n    \"can_upload\": true\n  },\n  \"tags\": [\n    \"approved\"\n  ],\n  \"can_non_owners_invite\": true,\n  \"is_externally_owned\": true,\n  \"is_collaboration_restricted_to_enterprise\": true,\n  \"allowed_shared_link_access_levels\": [\n    \"open\"\n  ],\n  \"allowed_invitee_roles\": [\n    \"editor\"\n  ],\n  \"watermark_info\": {\n    \"is_watermarked\": true\n  },\n  \"can_non_owners_view_collaborators\": true\n}"
            },
            {
              "id": "d8ccca42-65ed-492b-81b5-47b2ff285022",
              "name": "[409] * `operation_blocked_temporary`: Returned if either of the destination",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "If-Match",
                    "value": "1",
                    "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                    "disabled": true
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"New Folder\",\n  \"description\": \"Legal contracts for the new ACME deal\",\n  \"sync_state\": \"synced\",\n  \"can_non_owners_invite\": true,\n  \"parent\": {\n    \"id\": \"0\"\n  },\n  \"shared_link\": {\n    \"access\": \"open\",\n    \"password\": \"do-not-use-this-password\",\n    \"unshared_at\": \"2012-12-12T10:53:43-08:00\",\n    \"permissions\": {\n      \"can_download\": true\n    }\n  },\n  \"folder_upload_email\": {\n    \"access\": \"open\"\n  },\n  \"tags\": [\n    \"approved\"\n  ],\n  \"is_collaboration_restricted_to_enterprise\": true,\n  \"collections\": [\n    {\n      \"id\": \"11446498\"\n    }\n  ],\n  \"can_non_owners_view_collaborators\": true\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "ee58c3a6-4596-4995-aecb-606f6668fb2e",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Updates a folder. This can be also be used to move the folder,\n\nhttps://developer.box.com/en/reference/put-folders-id"
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        },
        {
          "name": "Delete folder",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "335e23dc-5388-4b1a-bf2b-63c0f8a7b6eb",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "a407e1b5-b3fe-43da-9c01-edea0e80c156",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "DELETE",
            "header": [
              {
                "key": "If-Match",
                "value": "1",
                "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                "disabled": true
              }
            ],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/folders/:folder_id?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "folders",
                ":folder_id"
              ],
              "query": [
                {
                  "key": "recursive",
                  "value": "true",
                  "description": "Delete a folder that is not empty by recursively deleting the\nfolder and all of its content.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "fff9abd7-e0d7-4e8e-b1fc-186d6d239d61",
                  "key": "folder_id",
                  "value": "0",
                  "type": "string",
                  "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                }
              ]
            },
            "description": "Deletes a folder, either permanently or by moving it to\n\nhttps://developer.box.com/en/reference/delete-folders-id"
          },
          "response": [
            {
              "id": "073da5e8-df61-475f-b387-4cbc56f9f9ef",
              "name": "[404] Returns an error if the folder could not be found,",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [
                  {
                    "key": "If-Match",
                    "value": "1",
                    "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                    "disabled": true
                  }
                ],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id"
                  ],
                  "query": [
                    {
                      "key": "recursive",
                      "value": "true",
                      "description": "Delete a folder that is not empty by recursively deleting the\nfolder and all of its content.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "fff9abd7-e0d7-4e8e-b1fc-186d6d239d61",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Deletes a folder, either permanently or by moving it to\n\nhttps://developer.box.com/en/reference/delete-folders-id"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "1116d65f-4c86-4bda-bbf1-c7ec3395851a",
              "name": "[409] * `folder_not_empty`: Returned if the folder is not empty. Use the",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [
                  {
                    "key": "If-Match",
                    "value": "1",
                    "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                    "disabled": true
                  }
                ],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id"
                  ],
                  "query": [
                    {
                      "key": "recursive",
                      "value": "true",
                      "description": "Delete a folder that is not empty by recursively deleting the\nfolder and all of its content.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "fff9abd7-e0d7-4e8e-b1fc-186d6d239d61",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Deletes a folder, either permanently or by moving it to\n\nhttps://developer.box.com/en/reference/delete-folders-id"
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "72a36da6-a5de-453e-9024-9c01defc9b26",
              "name": "[503] Returns an error when the operation takes longer",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [
                  {
                    "key": "If-Match",
                    "value": "1",
                    "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                    "disabled": true
                  }
                ],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id"
                  ],
                  "query": [
                    {
                      "key": "recursive",
                      "value": "true",
                      "description": "Delete a folder that is not empty by recursively deleting the\nfolder and all of its content.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "fff9abd7-e0d7-4e8e-b1fc-186d6d239d61",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Deletes a folder, either permanently or by moving it to\n\nhttps://developer.box.com/en/reference/delete-folders-id"
              },
              "status": "Service Unavailable",
              "code": 503,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "b7ea666d-bc8f-437e-ac1f-e294c0d60776",
              "name": "[204] Returns an empty response when the folder is successfully deleted",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [
                  {
                    "key": "If-Match",
                    "value": "1",
                    "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                    "disabled": true
                  }
                ],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id"
                  ],
                  "query": [
                    {
                      "key": "recursive",
                      "value": "true",
                      "description": "Delete a folder that is not empty by recursively deleting the\nfolder and all of its content.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "fff9abd7-e0d7-4e8e-b1fc-186d6d239d61",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Deletes a folder, either permanently or by moving it to\n\nhttps://developer.box.com/en/reference/delete-folders-id"
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "f126e0df-123f-4a3d-b530-93ccaa9971a6",
              "name": "[412] Returns an error when the `If-Match` header does not match",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [
                  {
                    "key": "If-Match",
                    "value": "1",
                    "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                    "disabled": true
                  }
                ],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id"
                  ],
                  "query": [
                    {
                      "key": "recursive",
                      "value": "true",
                      "description": "Delete a folder that is not empty by recursively deleting the\nfolder and all of its content.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "fff9abd7-e0d7-4e8e-b1fc-186d6d239d61",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Deletes a folder, either permanently or by moving it to\n\nhttps://developer.box.com/en/reference/delete-folders-id"
              },
              "status": "Precondition Failed",
              "code": 412,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "f542e09e-15dd-4610-a411-eb64526f56da",
              "name": "[403] Returns an error if the user does not have the required",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [
                  {
                    "key": "If-Match",
                    "value": "1",
                    "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                    "disabled": true
                  }
                ],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id"
                  ],
                  "query": [
                    {
                      "key": "recursive",
                      "value": "true",
                      "description": "Delete a folder that is not empty by recursively deleting the\nfolder and all of its content.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "fff9abd7-e0d7-4e8e-b1fc-186d6d239d61",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Deletes a folder, either permanently or by moving it to\n\nhttps://developer.box.com/en/reference/delete-folders-id"
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        }
      ],
      "_postman_id": "2fdac662-6842-40ca-b662-f2862cd46240",
      "description": "Folders represent a collection of files, web links,\nand other folders. They are a key building block when\nusing Box Platform.\n\nFolders also contain metadata about itself, including\nwho owns the folder, when it was created, and when it was\nlast modified."
    },
    {
      "name": "Group memberships",
      "item": [
        {
          "name": "List user's groups",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "38201f34-073f-46f1-9500-ddf83f3e6759",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "78e3f85d-2849-4686-8ff2-c29e5393d985",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/users/:user_id/memberships?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "users",
                ":user_id",
                "memberships"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "1000",
                  "description": "The maximum number of items to return per page.",
                  "disabled": true
                },
                {
                  "key": "offset",
                  "value": "1000",
                  "description": "The offset of the item at which to begin the response.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "847117af-b89d-4056-bfa0-a7a776ffcebe",
                  "key": "user_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The ID of the user."
                }
              ]
            },
            "description": "Retrieves all the groups for a user. The user making\n\nhttps://developer.box.com/en/reference/get-users-id-memberships"
          },
          "response": [
            {
              "id": "426c4854-849b-40c6-bd63-ab8b07adf5d0",
              "name": "[200] Returns a collection of membership objects. If there are no",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/users/:user_id/memberships?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "users",
                    ":user_id",
                    "memberships"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    },
                    {
                      "key": "offset",
                      "value": "1000",
                      "description": "The offset of the item at which to begin the response.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "847117af-b89d-4056-bfa0-a7a776ffcebe",
                      "key": "user_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the user."
                    }
                  ]
                },
                "description": "Retrieves all the groups for a user. The user making\n\nhttps://developer.box.com/en/reference/get-users-id-memberships"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"total_count\": 5000,\n  \"limit\": 1000,\n  \"offset\": 2000,\n  \"order\": [\n    {\n      \"by\": \"type\",\n      \"direction\": \"ASC\"\n    }\n  ],\n  \"entries\": [\n    {\n      \"id\": \"11446498\",\n      \"type\": \"group_membership\",\n      \"user\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      },\n      \"group\": {\n        \"id\": \"11446498\",\n        \"type\": \"group\",\n        \"name\": \"Support\",\n        \"group_type\": \"managed_group\"\n      },\n      \"role\": \"member\",\n      \"created_at\": \"2012-12-12T10:53:43-08:00\",\n      \"modified_at\": \"2012-12-12T10:53:43-08:00\"\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "List members of group",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8c4ccb75-92e7-49a7-890e-d760282456f0",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "e2d5398b-5cf8-407e-98fa-35384a833d5a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/groups/:group_id/memberships?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "groups",
                ":group_id",
                "memberships"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "1000",
                  "description": "The maximum number of items to return per page.",
                  "disabled": true
                },
                {
                  "key": "offset",
                  "value": "1000",
                  "description": "The offset of the item at which to begin the response.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "1ed4a119-824a-470b-97b5-98bdbb282b99",
                  "key": "group_id",
                  "value": "57645",
                  "type": "string",
                  "description": "The ID of the group."
                }
              ]
            },
            "description": "Retrieves all the members for a group. The user\n\nhttps://developer.box.com/en/reference/get-groups-id-memberships"
          },
          "response": [
            {
              "id": "f783eec8-2257-4608-baef-213e7ff59c90",
              "name": "[200] Returns a collection of membership objects. If there are no",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/groups/:group_id/memberships?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "groups",
                    ":group_id",
                    "memberships"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    },
                    {
                      "key": "offset",
                      "value": "1000",
                      "description": "The offset of the item at which to begin the response.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "1ed4a119-824a-470b-97b5-98bdbb282b99",
                      "key": "group_id",
                      "value": "57645",
                      "type": "string",
                      "description": "The ID of the group."
                    }
                  ]
                },
                "description": "Retrieves all the members for a group. The user\n\nhttps://developer.box.com/en/reference/get-groups-id-memberships"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"total_count\": 5000,\n  \"limit\": 1000,\n  \"offset\": 2000,\n  \"order\": [\n    {\n      \"by\": \"type\",\n      \"direction\": \"ASC\"\n    }\n  ],\n  \"entries\": [\n    {\n      \"id\": \"11446498\",\n      \"type\": \"group_membership\",\n      \"user\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      },\n      \"group\": {\n        \"id\": \"11446498\",\n        \"type\": \"group\",\n        \"name\": \"Support\",\n        \"group_type\": \"managed_group\"\n      },\n      \"role\": \"member\",\n      \"created_at\": \"2012-12-12T10:53:43-08:00\",\n      \"modified_at\": \"2012-12-12T10:53:43-08:00\"\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "Get group membership",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "19cf39db-cade-4a33-a3e6-907084b6b29f",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "89a5cb88-3710-445a-9875-4e22ba32670c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/group_memberships/:group_membership_id?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "group_memberships",
                ":group_membership_id"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "59fe03cc-a869-44ec-bf25-7fd44c323bda",
                  "key": "group_membership_id",
                  "value": "434534",
                  "type": "string",
                  "description": "The ID of the group membership."
                }
              ]
            },
            "description": "Retrieves a specific group membership.\n\nhttps://developer.box.com/en/reference/get-group-memberships-id"
          },
          "response": [
            {
              "id": "63f7035a-fffe-4ee1-b0b6-40ee8f46f631",
              "name": "[200] Returns the group membership object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/group_memberships/:group_membership_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "group_memberships",
                    ":group_membership_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "59fe03cc-a869-44ec-bf25-7fd44c323bda",
                      "key": "group_membership_id",
                      "value": "434534",
                      "type": "string",
                      "description": "The ID of the group membership."
                    }
                  ]
                },
                "description": "Retrieves a specific group membership.\n\nhttps://developer.box.com/en/reference/get-group-memberships-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"group_membership\",\n  \"user\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"group\": {\n    \"id\": \"11446498\",\n    \"type\": \"group\",\n    \"name\": \"Support\",\n    \"group_type\": \"managed_group\"\n  },\n  \"role\": \"member\",\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\"\n}"
            }
          ]
        },
        {
          "name": "Add user to group",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f643e112-4c81-4ed5-b55c-00a82fe610aa",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "615b89fd-b4d9-4d80-a219-389847581db5",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"user\": {\n    \"id\": \"1434325\"\n  },\n  \"group\": {\n    \"id\": \"4545523\"\n  },\n  \"role\": \"member\",\n  \"configurable_permissions\": {\n    \"can_run_reports\": true\n  }\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/group_memberships?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "group_memberships"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ]
            },
            "description": "Creates a group membership\n\nhttps://developer.box.com/en/reference/post-group-memberships"
          },
          "response": [
            {
              "id": "58fc0b44-0144-46e5-ac12-7f67083807ab",
              "name": "[201] Returns a new group membership object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"user\": {\n    \"id\": \"1434325\"\n  },\n  \"group\": {\n    \"id\": \"4545523\"\n  },\n  \"role\": \"member\",\n  \"configurable_permissions\": {\n    \"can_run_reports\": true\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/group_memberships?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "group_memberships"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Creates a group membership\n\nhttps://developer.box.com/en/reference/post-group-memberships"
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"group_membership\",\n  \"user\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"group\": {\n    \"id\": \"11446498\",\n    \"type\": \"group\",\n    \"name\": \"Support\",\n    \"group_type\": \"managed_group\"\n  },\n  \"role\": \"member\",\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\"\n}"
            }
          ]
        },
        {
          "name": "Update group membership",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3aa5b5d6-92ad-4761-9a9b-2ca2f291a642",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "e163beac-5fcb-4537-a4b4-a21f38d595c7",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"role\": \"member\",\n  \"configurable_permissions\": {\n    \"can_run_reports\": true\n  }\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/group_memberships/:group_membership_id?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "group_memberships",
                ":group_membership_id"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "40332949-7ddd-46b9-960e-c2d8fc2b0bf2",
                  "key": "group_membership_id",
                  "value": "434534",
                  "type": "string",
                  "description": "The ID of the group membership."
                }
              ]
            },
            "description": "Updates a user's group membership.\n\nhttps://developer.box.com/en/reference/put-group-memberships-id"
          },
          "response": [
            {
              "id": "03adfc35-2c10-4890-97f6-785950dda7a1",
              "name": "[200] Returns a new group membership object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"role\": \"member\",\n  \"configurable_permissions\": {\n    \"can_run_reports\": true\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/group_memberships/:group_membership_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "group_memberships",
                    ":group_membership_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "40332949-7ddd-46b9-960e-c2d8fc2b0bf2",
                      "key": "group_membership_id",
                      "value": "434534",
                      "type": "string",
                      "description": "The ID of the group membership."
                    }
                  ]
                },
                "description": "Updates a user's group membership.\n\nhttps://developer.box.com/en/reference/put-group-memberships-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"group_membership\",\n  \"user\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"group\": {\n    \"id\": \"11446498\",\n    \"type\": \"group\",\n    \"name\": \"Support\",\n    \"group_type\": \"managed_group\"\n  },\n  \"role\": \"member\",\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\"\n}"
            }
          ]
        },
        {
          "name": "Remove user from group",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1138d945-8f46-4080-8bcb-570f1c21fc5b",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "150e2f2a-7b91-4881-9663-b2117c109065",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/group_memberships/:group_membership_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "group_memberships",
                ":group_membership_id"
              ],
              "variable": [
                {
                  "id": "461d504d-465e-46a7-81d4-58609467371e",
                  "key": "group_membership_id",
                  "value": "434534",
                  "type": "string",
                  "description": "The ID of the group membership."
                }
              ]
            },
            "description": "Deletes a specific group membership.\n\nhttps://developer.box.com/en/reference/delete-group-memberships-id"
          },
          "response": [
            {
              "id": "3d8322ce-d84f-4190-b7dd-e011a2a462ed",
              "name": "[204] A blank response is returned if the membership was",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/group_memberships/:group_membership_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "group_memberships",
                    ":group_membership_id"
                  ],
                  "variable": [
                    {
                      "id": "461d504d-465e-46a7-81d4-58609467371e",
                      "key": "group_membership_id",
                      "value": "434534",
                      "type": "string",
                      "description": "The ID of the group membership."
                    }
                  ]
                },
                "description": "Deletes a specific group membership.\n\nhttps://developer.box.com/en/reference/delete-group-memberships-id"
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        }
      ],
      "_postman_id": "8b1029e4-ba93-4094-8ff9-b95ec4ed72f5"
    },
    {
      "name": "Groups",
      "item": [
        {
          "name": "List groups for enterprise",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f9712e20-6373-4220-a397-4fbfb18b4d34",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "29dfd579-cfbb-44d4-af2f-3441df479126",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/groups?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "groups"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "1000",
                  "description": "The maximum number of items to return per page.",
                  "disabled": true
                },
                {
                  "key": "offset",
                  "value": "1000",
                  "description": "The offset of the item at which to begin the response.",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieves all of the groups for a given enterprise. The user\n\nhttps://developer.box.com/en/reference/get-groups"
          },
          "response": [
            {
              "id": "b81cea2b-a8a8-4570-8f67-55a6ba9ae77e",
              "name": "[200] Returns a collection of group objects. If there are no groups, an",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/groups?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "groups"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    },
                    {
                      "key": "offset",
                      "value": "1000",
                      "description": "The offset of the item at which to begin the response.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Retrieves all of the groups for a given enterprise. The user\n\nhttps://developer.box.com/en/reference/get-groups"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"total_count\": 5000,\n  \"limit\": 1000,\n  \"offset\": 2000,\n  \"order\": [\n    {\n      \"by\": \"type\",\n      \"direction\": \"ASC\"\n    }\n  ],\n  \"entries\": [\n    {\n      \"id\": \"11446498\",\n      \"type\": \"group\",\n      \"name\": \"Support\",\n      \"group_type\": \"managed_group\",\n      \"created_at\": \"2012-12-12T10:53:43-08:00\",\n      \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n      \"provenance\": \"Active Directory\",\n      \"external_sync_identifier\": \"AD:123456\",\n      \"description\": \"Support Group - as imported from Active Directory\",\n      \"invitability_level\": \"admins_only\",\n      \"member_viewability_level\": \"admins_only\"\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "Get group",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3393d593-f0bd-4e66-8ad4-62b502a66831",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "e374131a-0e16-4490-b360-05d516188f22",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/groups/:group_id?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "groups",
                ":group_id"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "512eeb91-8f7d-45e5-ba43-c1707ed8dad3",
                  "key": "group_id",
                  "value": "57645",
                  "type": "string",
                  "description": "The ID of the group."
                }
              ]
            },
            "description": "Retrieves information about a group.\n\nhttps://developer.box.com/en/reference/get-groups-id"
          },
          "response": [
            {
              "id": "6e7908f2-68da-4e8c-8968-a00fbf731e81",
              "name": "[200] Returns the group object",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/groups/:group_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "groups",
                    ":group_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "512eeb91-8f7d-45e5-ba43-c1707ed8dad3",
                      "key": "group_id",
                      "value": "57645",
                      "type": "string",
                      "description": "The ID of the group."
                    }
                  ]
                },
                "description": "Retrieves information about a group.\n\nhttps://developer.box.com/en/reference/get-groups-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"group\",\n  \"name\": \"Support\",\n  \"group_type\": \"managed_group\",\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"provenance\": \"Active Directory\",\n  \"external_sync_identifier\": \"AD:123456\",\n  \"description\": \"Support Group - as imported from Active Directory\",\n  \"invitability_level\": \"admins_only\",\n  \"member_viewability_level\": \"admins_only\"\n}"
            }
          ]
        },
        {
          "name": "Create group",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "a7cdf668-6b99-4ff0-9323-5eab34b66f5d",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "8f738aff-a05f-4417-9028-9b59a6a02f87",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Customer Support\",\n  \"provenance\": \"Active Directory\",\n  \"external_sync_identifier\": \"AD:123456\",\n  \"description\": \"\\\"Customer Support Group - as imported from Active Directory\\\"\",\n  \"invitability_level\": \"admins_only\",\n  \"member_viewability_level\": \"admins_only\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/groups?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "groups"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ]
            },
            "description": "Creates a new group of users in an enterprise. Only users with admin\n\nhttps://developer.box.com/en/reference/post-groups"
          },
          "response": [
            {
              "id": "5206db33-ee04-41ea-8a7e-805e12d67538",
              "name": "[201] Returns the new group object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Customer Support\",\n  \"provenance\": \"Active Directory\",\n  \"external_sync_identifier\": \"AD:123456\",\n  \"description\": \"\\\"Customer Support Group - as imported from Active Directory\\\"\",\n  \"invitability_level\": \"admins_only\",\n  \"member_viewability_level\": \"admins_only\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/groups?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "groups"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Creates a new group of users in an enterprise. Only users with admin\n\nhttps://developer.box.com/en/reference/post-groups"
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"group\",\n  \"name\": \"Support\",\n  \"group_type\": \"managed_group\",\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"provenance\": \"Active Directory\",\n  \"external_sync_identifier\": \"AD:123456\",\n  \"description\": \"Support Group - as imported from Active Directory\",\n  \"invitability_level\": \"admins_only\",\n  \"member_viewability_level\": \"admins_only\"\n}"
            },
            {
              "id": "9507cd8b-1fd6-4ad1-a684-496ab933b0d8",
              "name": "[409] Returns an error a conflict is stopping the group from being created.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Customer Support\",\n  \"provenance\": \"Active Directory\",\n  \"external_sync_identifier\": \"AD:123456\",\n  \"description\": \"\\\"Customer Support Group - as imported from Active Directory\\\"\",\n  \"invitability_level\": \"admins_only\",\n  \"member_viewability_level\": \"admins_only\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/groups?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "groups"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Creates a new group of users in an enterprise. Only users with admin\n\nhttps://developer.box.com/en/reference/post-groups"
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        },
        {
          "name": "Update group",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "17aa1a2d-c293-4c42-a63c-0c59cb1e0bfa",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "96544465-2f62-4525-a513-4434938f42eb",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Customer Support\",\n  \"provenance\": \"Active Directory\",\n  \"external_sync_identifier\": \"AD:123456\",\n  \"description\": \"\\\"Customer Support Group - as imported from Active Directory\\\"\",\n  \"invitability_level\": \"admins_only\",\n  \"member_viewability_level\": \"admins_only\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/groups/:group_id?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "groups",
                ":group_id"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "d9aee5f9-16f2-4d4c-b18c-008d061b8093",
                  "key": "group_id",
                  "value": "57645",
                  "type": "string",
                  "description": "The ID of the group."
                }
              ]
            },
            "description": "Updates a specific group.\n\nhttps://developer.box.com/en/reference/put-groups-id"
          },
          "response": [
            {
              "id": "01eb7a84-8e19-496e-a1d0-27df81455ce2",
              "name": "[409] Returns an error a conflict is stopping the group from being created.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Customer Support\",\n  \"provenance\": \"Active Directory\",\n  \"external_sync_identifier\": \"AD:123456\",\n  \"description\": \"\\\"Customer Support Group - as imported from Active Directory\\\"\",\n  \"invitability_level\": \"admins_only\",\n  \"member_viewability_level\": \"admins_only\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/groups/:group_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "groups",
                    ":group_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "d9aee5f9-16f2-4d4c-b18c-008d061b8093",
                      "key": "group_id",
                      "value": "57645",
                      "type": "string",
                      "description": "The ID of the group."
                    }
                  ]
                },
                "description": "Updates a specific group.\n\nhttps://developer.box.com/en/reference/put-groups-id"
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "3e26fdd6-faf9-497f-9c47-d54acc02286e",
              "name": "[200] Returns the updated group object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Customer Support\",\n  \"provenance\": \"Active Directory\",\n  \"external_sync_identifier\": \"AD:123456\",\n  \"description\": \"\\\"Customer Support Group - as imported from Active Directory\\\"\",\n  \"invitability_level\": \"admins_only\",\n  \"member_viewability_level\": \"admins_only\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/groups/:group_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "groups",
                    ":group_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "d9aee5f9-16f2-4d4c-b18c-008d061b8093",
                      "key": "group_id",
                      "value": "57645",
                      "type": "string",
                      "description": "The ID of the group."
                    }
                  ]
                },
                "description": "Updates a specific group.\n\nhttps://developer.box.com/en/reference/put-groups-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"group\",\n  \"name\": \"Support\",\n  \"group_type\": \"managed_group\",\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"provenance\": \"Active Directory\",\n  \"external_sync_identifier\": \"AD:123456\",\n  \"description\": \"Support Group - as imported from Active Directory\",\n  \"invitability_level\": \"admins_only\",\n  \"member_viewability_level\": \"admins_only\"\n}"
            }
          ]
        },
        {
          "name": "Remove group",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "4fb9cfbd-bc4d-40d6-933f-d1141b2ccce0",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "ae146e8c-6a61-44c2-a2af-60c3dca7adb7",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/groups/:group_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "groups",
                ":group_id"
              ],
              "variable": [
                {
                  "id": "db811210-af3e-46ae-9945-9ea222c1c522",
                  "key": "group_id",
                  "value": "57645",
                  "type": "string",
                  "description": "The ID of the group."
                }
              ]
            },
            "description": "Permanently deletes a group.\n\nhttps://developer.box.com/en/reference/delete-groups-id"
          },
          "response": [
            {
              "id": "0b7da21c-d16c-4823-bae6-7d79f71daaa8",
              "name": "[204] A blank response is returned if the group was",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/groups/:group_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "groups",
                    ":group_id"
                  ],
                  "variable": [
                    {
                      "id": "db811210-af3e-46ae-9945-9ea222c1c522",
                      "key": "group_id",
                      "value": "57645",
                      "type": "string",
                      "description": "The ID of the group."
                    }
                  ]
                },
                "description": "Permanently deletes a group.\n\nhttps://developer.box.com/en/reference/delete-groups-id"
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        }
      ],
      "_postman_id": "9dd15745-ad61-47f7-888a-a6d6a266e492"
    },
    {
      "name": "Invites",
      "item": [
        {
          "name": "Get user invite status",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "381d4a0d-8f51-4cf1-860a-f95205c5875c",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "3e19dc0d-ca08-4873-bea3-c7f9f3170179",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/invites/:invite_id?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "invites",
                ":invite_id"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "36768fde-627b-4f5a-a1c6-7bb2f194ba96",
                  "key": "invite_id",
                  "value": "213723",
                  "type": "string",
                  "description": "The ID of an invite."
                }
              ]
            },
            "description": "Returns the status of a user invite.\n\nhttps://developer.box.com/en/reference/get-invites-id"
          },
          "response": [
            {
              "id": "c374ae0d-ac70-40e7-95a8-687eca80a547",
              "name": "[200] Returns an invite object",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/invites/:invite_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "invites",
                    ":invite_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "36768fde-627b-4f5a-a1c6-7bb2f194ba96",
                      "key": "invite_id",
                      "value": "213723",
                      "type": "string",
                      "description": "The ID of an invite."
                    }
                  ]
                },
                "description": "Returns the status of a user invite.\n\nhttps://developer.box.com/en/reference/get-invites-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"invite\",\n  \"invited_to\": {\n    \"id\": \"11446498\",\n    \"type\": \"enterprise\",\n    \"name\": \"Acme Inc.\"\n  },\n  \"actionable_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"invited_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"status\": \"pending\",\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\"\n}"
            }
          ]
        },
        {
          "name": "Create user invite",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c2ef940f-87f6-4724-ae35-4d7f461885e2",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "c5340901-88de-4615-8181-a740d7b4acde",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"enterprise\": {\n    \"id\": \"1232234\"\n  },\n  \"actionable_by\": {\n    \"login\": \"john@example.com\"\n  }\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/invites?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "invites"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ]
            },
            "description": "Invites an existing external user to join an enterprise.\n\nhttps://developer.box.com/en/reference/post-invites"
          },
          "response": [
            {
              "id": "512db3f3-5c8b-4ea1-ad95-839450b4d99a",
              "name": "[200] Returns a new invite object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"enterprise\": {\n    \"id\": \"1232234\"\n  },\n  \"actionable_by\": {\n    \"login\": \"john@example.com\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/invites?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "invites"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Invites an existing external user to join an enterprise.\n\nhttps://developer.box.com/en/reference/post-invites"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"invite\",\n  \"invited_to\": {\n    \"id\": \"11446498\",\n    \"type\": \"enterprise\",\n    \"name\": \"Acme Inc.\"\n  },\n  \"actionable_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"invited_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"status\": \"pending\",\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\"\n}"
            }
          ]
        }
      ],
      "_postman_id": "af180c48-6bf0-4cfb-a5a7-e48a329f4cbf"
    },
    {
      "name": "Legal hold policies",
      "item": [
        {
          "name": "List all legal hold policies",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "fb0d8dac-1721-4b55-ab20-92a2f495edd6",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "2e241258-c5af-4524-a46c-23b6ac4f8519",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/legal_hold_policies?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "legal_hold_policies"
              ],
              "query": [
                {
                  "key": "policy_name",
                  "value": "Sales Policy",
                  "description": "Limits results to policies for which the names start with\nthis search term. This is a case-insensitive prefix.",
                  "disabled": true
                },
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                },
                {
                  "key": "marker",
                  "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                  "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "1000",
                  "description": "The maximum number of items to return per page.",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieves a list of legal hold policies that belong to\n\nhttps://developer.box.com/en/reference/get-legal-hold-policies"
          },
          "response": [
            {
              "id": "79c9dbc8-3b51-4061-ae00-74f608ec24ff",
              "name": "[200] Returns a list of legal hold policies.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/legal_hold_policies?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "legal_hold_policies"
                  ],
                  "query": [
                    {
                      "key": "policy_name",
                      "value": "Sales Policy",
                      "description": "Limits results to policies for which the names start with\nthis search term. This is a case-insensitive prefix.",
                      "disabled": true
                    },
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    },
                    {
                      "key": "marker",
                      "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                      "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Retrieves a list of legal hold policies that belong to\n\nhttps://developer.box.com/en/reference/get-legal-hold-policies"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"limit\": 1000,\n  \"next_marker\": 3000,\n  \"prev_marker\": 1000,\n  \"entries\": [\n    {\n      \"id\": \"11446498\",\n      \"type\": \"legal_hold_policy\",\n      \"policy_name\": \"Policy 4\",\n      \"description\": \"Postman created policy\",\n      \"status\": \"active\",\n      \"assignment_counts\": {\n        \"user\": 1,\n        \"folder\": 2,\n        \"file\": 3,\n        \"file_version\": 4\n      },\n      \"created_by\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      },\n      \"created_at\": \"2012-12-12T10:53:43-08:00\",\n      \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n      \"deleted_at\": \"2012-12-12T10:53:43-08:00\",\n      \"filter_started_at\": \"2012-12-12T10:53:43-08:00\",\n      \"filter_ended_at\": \"2012-12-12T10:53:43-08:00\",\n      \"release_notes\": \"Example\"\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "Get legal hold policy",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "745c0489-7701-429b-bcb4-a47d6f8850d8",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "1da99cb1-716e-42e0-9c2f-8f9daa8aa968",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/legal_hold_policies/:legal_hold_policy_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "legal_hold_policies",
                ":legal_hold_policy_id"
              ],
              "variable": [
                {
                  "id": "9f0fb7d0-a2a1-4869-9b40-0b135e6db2ac",
                  "key": "legal_hold_policy_id",
                  "value": "324432",
                  "type": "string",
                  "description": "The ID of the legal hold policy"
                }
              ]
            },
            "description": "Retrieve a legal hold policy.\n\nhttps://developer.box.com/en/reference/get-legal-hold-policies-id"
          },
          "response": [
            {
              "id": "4d165d5c-216b-47f8-bcdb-b08fa8785a9b",
              "name": "[200] Returns a legal hold policy object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/legal_hold_policies/:legal_hold_policy_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "legal_hold_policies",
                    ":legal_hold_policy_id"
                  ],
                  "variable": [
                    {
                      "id": "9f0fb7d0-a2a1-4869-9b40-0b135e6db2ac",
                      "key": "legal_hold_policy_id",
                      "value": "324432",
                      "type": "string",
                      "description": "The ID of the legal hold policy"
                    }
                  ]
                },
                "description": "Retrieve a legal hold policy.\n\nhttps://developer.box.com/en/reference/get-legal-hold-policies-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"legal_hold_policy\",\n  \"policy_name\": \"Policy 4\",\n  \"description\": \"Postman created policy\",\n  \"status\": \"active\",\n  \"assignment_counts\": {\n    \"user\": 1,\n    \"folder\": 2,\n    \"file\": 3,\n    \"file_version\": 4\n  },\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"deleted_at\": \"2012-12-12T10:53:43-08:00\",\n  \"filter_started_at\": \"2012-12-12T10:53:43-08:00\",\n  \"filter_ended_at\": \"2012-12-12T10:53:43-08:00\",\n  \"release_notes\": \"Example\"\n}"
            }
          ]
        },
        {
          "name": "Create legal hold policy",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f3859c15-06ca-4760-b962-6af6df5b980f",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "d4257864-ceaa-4873-b182-b7c09185a800",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"policy_name\": \"Sales Policy\",\n  \"description\": \"A custom policy for the sales team\",\n  \"filter_started_at\": \"2012-12-12T10:53:43-08:00\",\n  \"filter_ended_at\": \"2012-12-18T10:53:43-08:00\",\n  \"is_ongoing\": true\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "https://{{api.box.com}}/2.0/legal_hold_policies",
            "description": "Create a new legal hold policy.\n\nhttps://developer.box.com/en/reference/post-legal-hold-policies"
          },
          "response": [
            {
              "id": "77dae3b4-4901-4a38-85d8-fdc3792d4088",
              "name": "[400] Returns an error if required parameters are missing,",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"policy_name\": \"Sales Policy\",\n  \"description\": \"A custom policy for the sales team\",\n  \"filter_started_at\": \"2012-12-12T10:53:43-08:00\",\n  \"filter_ended_at\": \"2012-12-18T10:53:43-08:00\",\n  \"is_ongoing\": true\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/legal_hold_policies",
                "description": "Create a new legal hold policy.\n\nhttps://developer.box.com/en/reference/post-legal-hold-policies"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"legal_hold_policy\",\n  \"policy_name\": \"Policy 4\",\n  \"description\": \"Postman created policy\",\n  \"status\": \"active\",\n  \"assignment_counts\": {\n    \"user\": 1,\n    \"folder\": 2,\n    \"file\": 3,\n    \"file_version\": 4\n  },\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"deleted_at\": \"2012-12-12T10:53:43-08:00\",\n  \"filter_started_at\": \"2012-12-12T10:53:43-08:00\",\n  \"filter_ended_at\": \"2012-12-12T10:53:43-08:00\",\n  \"release_notes\": \"Example\"\n}"
            },
            {
              "id": "93b3000a-9fbb-4328-93c0-975af3a1de58",
              "name": "[409] Returns an error if a policy with this name already exists.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"policy_name\": \"Sales Policy\",\n  \"description\": \"A custom policy for the sales team\",\n  \"filter_started_at\": \"2012-12-12T10:53:43-08:00\",\n  \"filter_ended_at\": \"2012-12-18T10:53:43-08:00\",\n  \"is_ongoing\": true\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/legal_hold_policies",
                "description": "Create a new legal hold policy.\n\nhttps://developer.box.com/en/reference/post-legal-hold-policies"
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "c507e9c0-bf82-40e7-976c-ba4b922c3bb6",
              "name": "[201] Returns a new legal hold policy object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"policy_name\": \"Sales Policy\",\n  \"description\": \"A custom policy for the sales team\",\n  \"filter_started_at\": \"2012-12-12T10:53:43-08:00\",\n  \"filter_ended_at\": \"2012-12-18T10:53:43-08:00\",\n  \"is_ongoing\": true\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/legal_hold_policies",
                "description": "Create a new legal hold policy.\n\nhttps://developer.box.com/en/reference/post-legal-hold-policies"
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"legal_hold_policy\",\n  \"policy_name\": \"Policy 4\",\n  \"description\": \"Postman created policy\",\n  \"status\": \"active\",\n  \"assignment_counts\": {\n    \"user\": 1,\n    \"folder\": 2,\n    \"file\": 3,\n    \"file_version\": 4\n  },\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"deleted_at\": \"2012-12-12T10:53:43-08:00\",\n  \"filter_started_at\": \"2012-12-12T10:53:43-08:00\",\n  \"filter_ended_at\": \"2012-12-12T10:53:43-08:00\",\n  \"release_notes\": \"Example\"\n}"
            }
          ]
        },
        {
          "name": "Update legal hold policy",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "cd50af3d-4e12-498f-9456-00a142bd0b5a",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "83dd9d31-654c-4c67-b2fa-3d817d485414",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"policy_name\": \"Sales Policy\",\n  \"description\": \"A custom policy for the sales team\",\n  \"release_notes\": \"Required for GDPR\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/legal_hold_policies/:legal_hold_policy_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "legal_hold_policies",
                ":legal_hold_policy_id"
              ],
              "variable": [
                {
                  "id": "98cf6d29-6f9f-4169-b8f4-7e27d1b4bad6",
                  "key": "legal_hold_policy_id",
                  "value": "324432",
                  "type": "string",
                  "description": "The ID of the legal hold policy"
                }
              ]
            },
            "description": "Update legal hold policy.\n\nhttps://developer.box.com/en/reference/put-legal-hold-policies-id"
          },
          "response": [
            {
              "id": "72c6e22f-0a30-4d8b-beec-2f488f48f9b4",
              "name": "[200] Returns a new legal hold policy object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"policy_name\": \"Sales Policy\",\n  \"description\": \"A custom policy for the sales team\",\n  \"release_notes\": \"Required for GDPR\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/legal_hold_policies/:legal_hold_policy_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "legal_hold_policies",
                    ":legal_hold_policy_id"
                  ],
                  "variable": [
                    {
                      "id": "98cf6d29-6f9f-4169-b8f4-7e27d1b4bad6",
                      "key": "legal_hold_policy_id",
                      "value": "324432",
                      "type": "string",
                      "description": "The ID of the legal hold policy"
                    }
                  ]
                },
                "description": "Update legal hold policy.\n\nhttps://developer.box.com/en/reference/put-legal-hold-policies-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"legal_hold_policy\",\n  \"policy_name\": \"Policy 4\",\n  \"description\": \"Postman created policy\",\n  \"status\": \"active\",\n  \"assignment_counts\": {\n    \"user\": 1,\n    \"folder\": 2,\n    \"file\": 3,\n    \"file_version\": 4\n  },\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"deleted_at\": \"2012-12-12T10:53:43-08:00\",\n  \"filter_started_at\": \"2012-12-12T10:53:43-08:00\",\n  \"filter_ended_at\": \"2012-12-12T10:53:43-08:00\",\n  \"release_notes\": \"Example\"\n}"
            },
            {
              "id": "dead971d-bbd0-4c47-badb-794149c33c89",
              "name": "[409] Returns an error if a policy with this name already exists.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"policy_name\": \"Sales Policy\",\n  \"description\": \"A custom policy for the sales team\",\n  \"release_notes\": \"Required for GDPR\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/legal_hold_policies/:legal_hold_policy_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "legal_hold_policies",
                    ":legal_hold_policy_id"
                  ],
                  "variable": [
                    {
                      "id": "98cf6d29-6f9f-4169-b8f4-7e27d1b4bad6",
                      "key": "legal_hold_policy_id",
                      "value": "324432",
                      "type": "string",
                      "description": "The ID of the legal hold policy"
                    }
                  ]
                },
                "description": "Update legal hold policy.\n\nhttps://developer.box.com/en/reference/put-legal-hold-policies-id"
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        },
        {
          "name": "Remove legal hold policy",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c0a6e0ba-5866-48f9-84a3-69810616ad0e",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "d0ce2b01-a0ad-41b0-8a5c-6b38cfe12f5b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/legal_hold_policies/:legal_hold_policy_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "legal_hold_policies",
                ":legal_hold_policy_id"
              ],
              "variable": [
                {
                  "id": "abcd8519-a0c9-41b7-bbc5-878215ba6cbe",
                  "key": "legal_hold_policy_id",
                  "value": "324432",
                  "type": "string",
                  "description": "The ID of the legal hold policy"
                }
              ]
            },
            "description": "Delete an existing legal hold policy.\n\nhttps://developer.box.com/en/reference/delete-legal-hold-policies-id"
          },
          "response": [
            {
              "id": "ff77e558-cb05-464f-aa8c-b94bf3674efd",
              "name": "[202] A blank response is returned if the policy was",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/legal_hold_policies/:legal_hold_policy_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "legal_hold_policies",
                    ":legal_hold_policy_id"
                  ],
                  "variable": [
                    {
                      "id": "abcd8519-a0c9-41b7-bbc5-878215ba6cbe",
                      "key": "legal_hold_policy_id",
                      "value": "324432",
                      "type": "string",
                      "description": "The ID of the legal hold policy"
                    }
                  ]
                },
                "description": "Delete an existing legal hold policy.\n\nhttps://developer.box.com/en/reference/delete-legal-hold-policies-id"
              },
              "status": "Accepted",
              "code": 202,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        }
      ],
      "_postman_id": "d42ed745-dd9b-44d5-81e2-6ecf8fc70635"
    },
    {
      "name": "Legal hold policy assignments",
      "item": [
        {
          "name": "List legal hold policy assignments",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3dc25df3-5750-4aab-98cb-cc66bb6fc116",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "5f9d06f4-7368-46d1-b0a8-ad01af1367f7",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/legal_hold_policy_assignments?policy_id=324432",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "legal_hold_policy_assignments"
              ],
              "query": [
                {
                  "key": "policy_id",
                  "value": "324432",
                  "description": "The ID of the legal hold policy"
                },
                {
                  "key": "assign_to_type",
                  "value": "file",
                  "description": "Filters the results by the type of item the\npolicy was applied to.",
                  "disabled": true
                },
                {
                  "key": "assign_to_id",
                  "value": "1234323",
                  "description": "Filters the results by the ID of item the\npolicy was applied to.",
                  "disabled": true
                },
                {
                  "key": "marker",
                  "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                  "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "1000",
                  "description": "The maximum number of items to return per page.",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieves a list of items a legal hold policy has been assigned to.\n\nhttps://developer.box.com/en/reference/get-legal-hold-policy-assignments"
          },
          "response": [
            {
              "id": "33f38666-791d-4d60-bc6d-b12e8cfd8c80",
              "name": "[200] Returns a list of legal hold policy assignments.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/legal_hold_policy_assignments?policy_id=324432",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "legal_hold_policy_assignments"
                  ],
                  "query": [
                    {
                      "key": "policy_id",
                      "value": "324432",
                      "description": "The ID of the legal hold policy"
                    },
                    {
                      "key": "assign_to_type",
                      "value": "file",
                      "description": "Filters the results by the type of item the\npolicy was applied to.",
                      "disabled": true
                    },
                    {
                      "key": "assign_to_id",
                      "value": "1234323",
                      "description": "Filters the results by the ID of item the\npolicy was applied to.",
                      "disabled": true
                    },
                    {
                      "key": "marker",
                      "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                      "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Retrieves a list of items a legal hold policy has been assigned to.\n\nhttps://developer.box.com/en/reference/get-legal-hold-policy-assignments"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"limit\": 1000,\n  \"next_marker\": 3000,\n  \"prev_marker\": 1000,\n  \"entries\": [\n    {\n      \"id\": \"11446498\",\n      \"type\": \"legal_hold_policy_assignment\",\n      \"legal_hold_policy\": {\n        \"id\": \"11446498\",\n        \"type\": \"legal_hold_policy\"\n      },\n      \"assigned_to\": {\n        \"id\": \"11446498\",\n        \"type\": \"file\",\n        \"sequence_id\": \"3\",\n        \"etag\": \"1\",\n        \"name\": \"Pictures\"\n      },\n      \"assigned_by\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      },\n      \"assigned_at\": \"2012-12-12T10:53:43-08:00\",\n      \"deleted_at\": \"2012-12-12T10:53:43-08:00\"\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "Get legal hold policy assignment",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3282e648-8608-4464-8af5-474d830af234",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "ec2df618-625b-4bff-baae-87e187d314b2",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/legal_hold_policy_assignments/:legal_hold_policy_assignment_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "legal_hold_policy_assignments",
                ":legal_hold_policy_assignment_id"
              ],
              "variable": [
                {
                  "id": "11b6525c-f676-4686-88ea-45eb73058502",
                  "key": "legal_hold_policy_assignment_id",
                  "value": "753465",
                  "type": "string",
                  "description": "The ID of the legal hold policy assignment"
                }
              ]
            },
            "description": "Retrieve a legal hold policy assignment.\n\nhttps://developer.box.com/en/reference/get-legal-hold-policy-assignments-id"
          },
          "response": [
            {
              "id": "56c60cef-b4f5-4304-9dd2-1951157d0615",
              "name": "[200] Returns a legal hold policy object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/legal_hold_policy_assignments/:legal_hold_policy_assignment_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "legal_hold_policy_assignments",
                    ":legal_hold_policy_assignment_id"
                  ],
                  "variable": [
                    {
                      "id": "11b6525c-f676-4686-88ea-45eb73058502",
                      "key": "legal_hold_policy_assignment_id",
                      "value": "753465",
                      "type": "string",
                      "description": "The ID of the legal hold policy assignment"
                    }
                  ]
                },
                "description": "Retrieve a legal hold policy assignment.\n\nhttps://developer.box.com/en/reference/get-legal-hold-policy-assignments-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"legal_hold_policy_assignment\",\n  \"legal_hold_policy\": {\n    \"id\": \"11446498\",\n    \"type\": \"legal_hold_policy\"\n  },\n  \"assigned_to\": {\n    \"id\": \"11446498\",\n    \"type\": \"file\",\n    \"sequence_id\": \"3\",\n    \"etag\": \"1\",\n    \"name\": \"Pictures\"\n  },\n  \"assigned_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"assigned_at\": \"2012-12-12T10:53:43-08:00\",\n  \"deleted_at\": \"2012-12-12T10:53:43-08:00\"\n}"
            }
          ]
        },
        {
          "name": "List current file versions for legal hold policy assignment",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1627a139-ed80-476b-8abc-6dbf985501b7",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "36a073f5-bda2-4ec2-9c42-0c102cf7d7d7",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/legal_hold_policy_assignments/:legal_hold_policy_assignment_id/files_on_hold?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "legal_hold_policy_assignments",
                ":legal_hold_policy_assignment_id",
                "files_on_hold"
              ],
              "query": [
                {
                  "key": "marker",
                  "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                  "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "1000",
                  "description": "The maximum number of items to return per page.",
                  "disabled": true
                },
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "45c94cc2-76a1-40fb-bfc6-5e177354aa73",
                  "key": "legal_hold_policy_assignment_id",
                  "value": "753465",
                  "type": "string",
                  "description": "The ID of the legal hold policy assignment"
                }
              ]
            },
            "description": "Get a list of current file versions for a legal hold\n\nhttps://developer.box.com/en/reference/get-legal-hold-policy-assignments-id-files-on-hold"
          },
          "response": [
            {
              "id": "75bafc70-8d98-4a72-a206-013dee267f8b",
              "name": "[200] Returns the list of current file versions held under legal hold for a",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/legal_hold_policy_assignments/:legal_hold_policy_assignment_id/files_on_hold?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "legal_hold_policy_assignments",
                    ":legal_hold_policy_assignment_id",
                    "files_on_hold"
                  ],
                  "query": [
                    {
                      "key": "marker",
                      "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                      "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    },
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "45c94cc2-76a1-40fb-bfc6-5e177354aa73",
                      "key": "legal_hold_policy_assignment_id",
                      "value": "753465",
                      "type": "string",
                      "description": "The ID of the legal hold policy assignment"
                    }
                  ]
                },
                "description": "Get a list of current file versions for a legal hold\n\nhttps://developer.box.com/en/reference/get-legal-hold-policy-assignments-id-files-on-hold"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"limit\": 1000,\n  \"next_marker\": 3000,\n  \"prev_marker\": 1000,\n  \"entries\": [\n    {\n      \"id\": \"11446498\",\n      \"type\": \"file_version_legal_hold\",\n      \"file_version\": {\n        \"id\": \"12345\",\n        \"type\": \"file_version\",\n        \"sha1\": \"134b65991ed521fcfe4724b7d814ab8ded5185dc\"\n      },\n      \"file\": {\n        \"id\": \"12345\",\n        \"etag\": \"1\",\n        \"type\": \"file\",\n        \"sequence_id\": \"3\",\n        \"name\": \"Contract.pdf\"\n      },\n      \"legal_hold_policy_assignments\": [\n        {\n          \"id\": \"11446498\",\n          \"type\": \"legal_hold_policy_assignment\",\n          \"legal_hold_policy\": {\n            \"id\": \"11446498\",\n            \"type\": \"legal_hold_policy\"\n          },\n          \"assigned_to\": {\n            \"id\": \"11446498\",\n            \"type\": \"file\",\n            \"sequence_id\": \"3\",\n            \"etag\": \"1\",\n            \"name\": \"Pictures\"\n          },\n          \"assigned_by\": {\n            \"id\": \"11446498\",\n            \"type\": \"user\",\n            \"name\": \"Aaron Levie\",\n            \"login\": \"ceo@example.com\"\n          },\n          \"assigned_at\": \"2012-12-12T10:53:43-08:00\",\n          \"deleted_at\": \"2012-12-12T10:53:43-08:00\"\n        }\n      ],\n      \"deleted_at\": \"2012-12-12T10:53:43-08:00\"\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "List previous file versions for legal hold policy assignment",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "88f26293-22ac-4248-9cfa-259d33f19056",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "1ca31eb0-f21d-4e1a-86ec-b97f38544deb",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/legal_hold_policy_assignments/:legal_hold_policy_assignment_id/file_versions_on_hold?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "legal_hold_policy_assignments",
                ":legal_hold_policy_assignment_id",
                "file_versions_on_hold"
              ],
              "query": [
                {
                  "key": "marker",
                  "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                  "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "1000",
                  "description": "The maximum number of items to return per page.",
                  "disabled": true
                },
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "d34de399-2f7c-4162-a0b3-351d2130c004",
                  "key": "legal_hold_policy_assignment_id",
                  "value": "753465",
                  "type": "string",
                  "description": "The ID of the legal hold policy assignment"
                }
              ]
            },
            "description": "Get a list of previous file versions for a legal hold\n\nhttps://developer.box.com/en/reference/get-legal-hold-policy-assignments-id-file-versions-on-hold"
          },
          "response": [
            {
              "id": "8f83dc16-0313-4c3c-9e40-ace3482bf13d",
              "name": "[200] Returns the list of previous file versions held under legal hold for a",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/legal_hold_policy_assignments/:legal_hold_policy_assignment_id/file_versions_on_hold?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "legal_hold_policy_assignments",
                    ":legal_hold_policy_assignment_id",
                    "file_versions_on_hold"
                  ],
                  "query": [
                    {
                      "key": "marker",
                      "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                      "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    },
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "d34de399-2f7c-4162-a0b3-351d2130c004",
                      "key": "legal_hold_policy_assignment_id",
                      "value": "753465",
                      "type": "string",
                      "description": "The ID of the legal hold policy assignment"
                    }
                  ]
                },
                "description": "Get a list of previous file versions for a legal hold\n\nhttps://developer.box.com/en/reference/get-legal-hold-policy-assignments-id-file-versions-on-hold"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"limit\": 1000,\n  \"next_marker\": 3000,\n  \"prev_marker\": 1000,\n  \"entries\": [\n    {\n      \"id\": \"11446498\",\n      \"type\": \"file_version_legal_hold\",\n      \"file_version\": {\n        \"id\": \"12345\",\n        \"type\": \"file_version\",\n        \"sha1\": \"134b65991ed521fcfe4724b7d814ab8ded5185dc\"\n      },\n      \"file\": {\n        \"id\": \"12345\",\n        \"etag\": \"1\",\n        \"type\": \"file\",\n        \"sequence_id\": \"3\",\n        \"name\": \"Contract.pdf\"\n      },\n      \"legal_hold_policy_assignments\": [\n        {\n          \"id\": \"11446498\",\n          \"type\": \"legal_hold_policy_assignment\",\n          \"legal_hold_policy\": {\n            \"id\": \"11446498\",\n            \"type\": \"legal_hold_policy\"\n          },\n          \"assigned_to\": {\n            \"id\": \"11446498\",\n            \"type\": \"file\",\n            \"sequence_id\": \"3\",\n            \"etag\": \"1\",\n            \"name\": \"Pictures\"\n          },\n          \"assigned_by\": {\n            \"id\": \"11446498\",\n            \"type\": \"user\",\n            \"name\": \"Aaron Levie\",\n            \"login\": \"ceo@example.com\"\n          },\n          \"assigned_at\": \"2012-12-12T10:53:43-08:00\",\n          \"deleted_at\": \"2012-12-12T10:53:43-08:00\"\n        }\n      ],\n      \"deleted_at\": \"2012-12-12T10:53:43-08:00\"\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "Assign legal hold policy",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "39934d63-95ca-4265-9952-6242217d3bd3",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "56e7b6bf-cfee-4d67-942b-35a1e7070e4f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"policy_id\": \"123244\",\n  \"assign_to\": {\n    \"type\": \"folder\",\n    \"id\": \"6564564\"\n  }\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "https://{{api.box.com}}/2.0/legal_hold_policy_assignments",
            "description": "Assign a legal hold to a file, file version, folder, or user.\n\nhttps://developer.box.com/en/reference/post-legal-hold-policy-assignments"
          },
          "response": [
            {
              "id": "b0e1dbf6-2c06-46ae-bb89-d2373f388b37",
              "name": "[201] Returns a new legal hold policy assignment.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"policy_id\": \"123244\",\n  \"assign_to\": {\n    \"type\": \"folder\",\n    \"id\": \"6564564\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/legal_hold_policy_assignments",
                "description": "Assign a legal hold to a file, file version, folder, or user.\n\nhttps://developer.box.com/en/reference/post-legal-hold-policy-assignments"
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"legal_hold_policy_assignment\",\n  \"legal_hold_policy\": {\n    \"id\": \"11446498\",\n    \"type\": \"legal_hold_policy\"\n  },\n  \"assigned_to\": {\n    \"id\": \"11446498\",\n    \"type\": \"file\",\n    \"sequence_id\": \"3\",\n    \"etag\": \"1\",\n    \"name\": \"Pictures\"\n  },\n  \"assigned_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"assigned_at\": \"2012-12-12T10:53:43-08:00\",\n  \"deleted_at\": \"2012-12-12T10:53:43-08:00\"\n}"
            }
          ]
        },
        {
          "name": "Unassign legal hold policy",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "67d410d3-c2b1-4c0d-8fd3-c261c0229289",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "b19648b9-4903-4bc5-a146-ec672275e45b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/legal_hold_policy_assignments/:legal_hold_policy_assignment_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "legal_hold_policy_assignments",
                ":legal_hold_policy_assignment_id"
              ],
              "variable": [
                {
                  "id": "9b4f543f-42a8-4f97-b6df-bbdaab766e95",
                  "key": "legal_hold_policy_assignment_id",
                  "value": "753465",
                  "type": "string",
                  "description": "The ID of the legal hold policy assignment"
                }
              ]
            },
            "description": "Remove a legal hold from an item.\n\nhttps://developer.box.com/en/reference/delete-legal-hold-policy-assignments-id"
          },
          "response": [
            {
              "id": "954f9d4c-3c95-420d-83aa-e4fdda28048f",
              "name": "[202] A blank response is returned if the assignment was",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/legal_hold_policy_assignments/:legal_hold_policy_assignment_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "legal_hold_policy_assignments",
                    ":legal_hold_policy_assignment_id"
                  ],
                  "variable": [
                    {
                      "id": "9b4f543f-42a8-4f97-b6df-bbdaab766e95",
                      "key": "legal_hold_policy_assignment_id",
                      "value": "753465",
                      "type": "string",
                      "description": "The ID of the legal hold policy assignment"
                    }
                  ]
                },
                "description": "Remove a legal hold from an item.\n\nhttps://developer.box.com/en/reference/delete-legal-hold-policy-assignments-id"
              },
              "status": "Accepted",
              "code": 202,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        }
      ],
      "_postman_id": "f5c900d8-af77-4689-bd0c-5153fced2684"
    },
    {
      "name": "Metadata cascade policies (Beta)",
      "item": [
        {
          "name": "List metadata cascade policies",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "dddec02d-7032-4a53-89e8-518c26f375e3",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "405c501a-4e7a-423e-8aeb-b9dd4254ccd0",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/metadata_cascade_policies?folder_id=31232",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "metadata_cascade_policies"
              ],
              "query": [
                {
                  "key": "folder_id",
                  "value": "31232",
                  "description": "Specifies which folder to return policies for. This can not be used on the\nroot folder with ID `0`."
                },
                {
                  "key": "owner_enterprise_id",
                  "value": "31232",
                  "description": "The ID of the enterprise ID for which to find metadata\ncascade policies. If not specified, it defaults to the\ncurrent enterprise.",
                  "disabled": true
                },
                {
                  "key": "marker",
                  "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                  "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                  "disabled": true
                },
                {
                  "key": "offset",
                  "value": "1000",
                  "description": "The offset of the item at which to begin the response.",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieves a list of all the metadata cascade policies\n\nhttps://developer.box.com/en/reference/get-metadata-cascade-policies"
          },
          "response": [
            {
              "id": "0cee6f6a-d07a-4f1c-8619-b96c5d3530dc",
              "name": "[400] Returns an error when any of the parameters are not in a valid format.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/metadata_cascade_policies?folder_id=31232",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "metadata_cascade_policies"
                  ],
                  "query": [
                    {
                      "key": "folder_id",
                      "value": "31232",
                      "description": "Specifies which folder to return policies for. This can not be used on the\nroot folder with ID `0`."
                    },
                    {
                      "key": "owner_enterprise_id",
                      "value": "31232",
                      "description": "The ID of the enterprise ID for which to find metadata\ncascade policies. If not specified, it defaults to the\ncurrent enterprise.",
                      "disabled": true
                    },
                    {
                      "key": "marker",
                      "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                      "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                      "disabled": true
                    },
                    {
                      "key": "offset",
                      "value": "1000",
                      "description": "The offset of the item at which to begin the response.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Retrieves a list of all the metadata cascade policies\n\nhttps://developer.box.com/en/reference/get-metadata-cascade-policies"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "664c055a-aae4-4e45-8d66-e5852046bfbf",
              "name": "[404] Returns an error when the folder can not be found or the user does not",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/metadata_cascade_policies?folder_id=31232",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "metadata_cascade_policies"
                  ],
                  "query": [
                    {
                      "key": "folder_id",
                      "value": "31232",
                      "description": "Specifies which folder to return policies for. This can not be used on the\nroot folder with ID `0`."
                    },
                    {
                      "key": "owner_enterprise_id",
                      "value": "31232",
                      "description": "The ID of the enterprise ID for which to find metadata\ncascade policies. If not specified, it defaults to the\ncurrent enterprise.",
                      "disabled": true
                    },
                    {
                      "key": "marker",
                      "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                      "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                      "disabled": true
                    },
                    {
                      "key": "offset",
                      "value": "1000",
                      "description": "The offset of the item at which to begin the response.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Retrieves a list of all the metadata cascade policies\n\nhttps://developer.box.com/en/reference/get-metadata-cascade-policies"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "7371e475-8960-41a1-a417-e5fb19d59ae7",
              "name": "[403] Returns an error when the folder can not be accessed. This error often",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/metadata_cascade_policies?folder_id=31232",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "metadata_cascade_policies"
                  ],
                  "query": [
                    {
                      "key": "folder_id",
                      "value": "31232",
                      "description": "Specifies which folder to return policies for. This can not be used on the\nroot folder with ID `0`."
                    },
                    {
                      "key": "owner_enterprise_id",
                      "value": "31232",
                      "description": "The ID of the enterprise ID for which to find metadata\ncascade policies. If not specified, it defaults to the\ncurrent enterprise.",
                      "disabled": true
                    },
                    {
                      "key": "marker",
                      "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                      "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                      "disabled": true
                    },
                    {
                      "key": "offset",
                      "value": "1000",
                      "description": "The offset of the item at which to begin the response.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Retrieves a list of all the metadata cascade policies\n\nhttps://developer.box.com/en/reference/get-metadata-cascade-policies"
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "a86f92ef-9518-4b9c-ba0c-6fa7f10b17a5",
              "name": "[200] Returns a list of metadata cascade policies",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/metadata_cascade_policies?folder_id=31232",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "metadata_cascade_policies"
                  ],
                  "query": [
                    {
                      "key": "folder_id",
                      "value": "31232",
                      "description": "Specifies which folder to return policies for. This can not be used on the\nroot folder with ID `0`."
                    },
                    {
                      "key": "owner_enterprise_id",
                      "value": "31232",
                      "description": "The ID of the enterprise ID for which to find metadata\ncascade policies. If not specified, it defaults to the\ncurrent enterprise.",
                      "disabled": true
                    },
                    {
                      "key": "marker",
                      "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                      "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                      "disabled": true
                    },
                    {
                      "key": "offset",
                      "value": "1000",
                      "description": "The offset of the item at which to begin the response.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Retrieves a list of all the metadata cascade policies\n\nhttps://developer.box.com/en/reference/get-metadata-cascade-policies"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"limit\": 1000,\n  \"next_marker\": 3000,\n  \"prev_marker\": 1000,\n  \"entries\": [\n    {\n      \"id\": \"6fd4ff89-8fc1-42cf-8b29-1890dedd26d7\",\n      \"type\": \"metadata_cascade_policy\",\n      \"owner_enterprise\": {\n        \"type\": \"enterprise\",\n        \"id\": \"690678\"\n      },\n      \"parent\": {\n        \"type\": \"folder\",\n        \"id\": \"1234567\"\n      },\n      \"scope\": \"global\",\n      \"templateKey\": \"productInfo\"\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "Get metadata cascade policy",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "68ef9ddb-c508-42af-abfe-9cd6b870d71a",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "ff23cbfa-25e8-491f-987d-2b461aa9f313",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/metadata_cascade_policies/:metadata_cascade_policy_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "metadata_cascade_policies",
                ":metadata_cascade_policy_id"
              ],
              "variable": [
                {
                  "id": "4ba5c4b7-d005-4429-98c7-4bb375fc4916",
                  "key": "metadata_cascade_policy_id",
                  "value": "6fd4ff89-8fc1-42cf-8b29-1890dedd26d7",
                  "type": "string",
                  "description": "The ID of the metadata cascade policy."
                }
              ]
            },
            "description": "Retrieve a specific metadata cascade policy assigned to a folder.\n\nhttps://developer.box.com/en/reference/get-metadata-cascade-policies-id"
          },
          "response": [
            {
              "id": "842e0f0a-0345-419c-9aa8-dbc397235329",
              "name": "[200] Returns a metadata cascade policy",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/metadata_cascade_policies/:metadata_cascade_policy_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "metadata_cascade_policies",
                    ":metadata_cascade_policy_id"
                  ],
                  "variable": [
                    {
                      "id": "4ba5c4b7-d005-4429-98c7-4bb375fc4916",
                      "key": "metadata_cascade_policy_id",
                      "value": "6fd4ff89-8fc1-42cf-8b29-1890dedd26d7",
                      "type": "string",
                      "description": "The ID of the metadata cascade policy."
                    }
                  ]
                },
                "description": "Retrieve a specific metadata cascade policy assigned to a folder.\n\nhttps://developer.box.com/en/reference/get-metadata-cascade-policies-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"6fd4ff89-8fc1-42cf-8b29-1890dedd26d7\",\n  \"type\": \"metadata_cascade_policy\",\n  \"owner_enterprise\": {\n    \"type\": \"enterprise\",\n    \"id\": \"690678\"\n  },\n  \"parent\": {\n    \"type\": \"folder\",\n    \"id\": \"1234567\"\n  },\n  \"scope\": \"global\",\n  \"templateKey\": \"productInfo\"\n}"
            },
            {
              "id": "aa51a325-5ad5-4b7e-ab7e-658ffd842e8e",
              "name": "[404] Returns an error when the policy can not be found or the user does not",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/metadata_cascade_policies/:metadata_cascade_policy_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "metadata_cascade_policies",
                    ":metadata_cascade_policy_id"
                  ],
                  "variable": [
                    {
                      "id": "4ba5c4b7-d005-4429-98c7-4bb375fc4916",
                      "key": "metadata_cascade_policy_id",
                      "value": "6fd4ff89-8fc1-42cf-8b29-1890dedd26d7",
                      "type": "string",
                      "description": "The ID of the metadata cascade policy."
                    }
                  ]
                },
                "description": "Retrieve a specific metadata cascade policy assigned to a folder.\n\nhttps://developer.box.com/en/reference/get-metadata-cascade-policies-id"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        },
        {
          "name": "Create metadata cascade policy",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "a3b7cf73-a730-4115-9e6d-5147f90bc45c",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "8733baaa-7d09-4824-873c-b4760c3cb0bb",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"folder_id\": \"1234567\",\n  \"scope\": \"enterprise\",\n  \"templateKey\": \"productInfo\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "https://{{api.box.com}}/2.0/metadata_cascade_policies",
            "description": "Creates a new metadata cascade policy that applies a given\n\nhttps://developer.box.com/en/reference/post-metadata-cascade-policies"
          },
          "response": [
            {
              "id": "047be268-15cb-4f17-b124-84ec3a7b1b11",
              "name": "[404] Returns an error when the template or folder can not be found, or when the",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"folder_id\": \"1234567\",\n  \"scope\": \"enterprise\",\n  \"templateKey\": \"productInfo\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/metadata_cascade_policies",
                "description": "Creates a new metadata cascade policy that applies a given\n\nhttps://developer.box.com/en/reference/post-metadata-cascade-policies"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "4f987aff-55a0-4d80-bfdd-18e1e1cd6f3c",
              "name": "[400] Returns an error when any of the parameters are not in a valid format.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"folder_id\": \"1234567\",\n  \"scope\": \"enterprise\",\n  \"templateKey\": \"productInfo\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/metadata_cascade_policies",
                "description": "Creates a new metadata cascade policy that applies a given\n\nhttps://developer.box.com/en/reference/post-metadata-cascade-policies"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "55cfd25e-cb3c-4745-b906-c366d429c7b6",
              "name": "[403] Returns an error when trying to apply a policy to a restricted folder, for",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"folder_id\": \"1234567\",\n  \"scope\": \"enterprise\",\n  \"templateKey\": \"productInfo\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/metadata_cascade_policies",
                "description": "Creates a new metadata cascade policy that applies a given\n\nhttps://developer.box.com/en/reference/post-metadata-cascade-policies"
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "9a1c66ed-c5ac-4c3b-922c-2813c61338e8",
              "name": "[409] Returns an error when a policy for this folder and template is already in",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"folder_id\": \"1234567\",\n  \"scope\": \"enterprise\",\n  \"templateKey\": \"productInfo\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/metadata_cascade_policies",
                "description": "Creates a new metadata cascade policy that applies a given\n\nhttps://developer.box.com/en/reference/post-metadata-cascade-policies"
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\",\n  \"context_info\": {\n    \"conflicts\": {\n      \"id\": \"12345\",\n      \"etag\": \"1\",\n      \"type\": \"file\",\n      \"sequence_id\": \"3\",\n      \"name\": \"Contract.pdf\",\n      \"sha1\": \"85136C79CBF9FE36BB9D05D0639C70C265C18D37\",\n      \"file_version\": {\n        \"id\": \"12345\",\n        \"type\": \"file_version\",\n        \"sha1\": \"134b65991ed521fcfe4724b7d814ab8ded5185dc\"\n      }\n    }\n  }\n}"
            },
            {
              "id": "a782ff6f-01db-4f40-b025-0872ce0b603e",
              "name": "[201] Returns a new of metadata cascade policy",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"folder_id\": \"1234567\",\n  \"scope\": \"enterprise\",\n  \"templateKey\": \"productInfo\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/metadata_cascade_policies",
                "description": "Creates a new metadata cascade policy that applies a given\n\nhttps://developer.box.com/en/reference/post-metadata-cascade-policies"
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"6fd4ff89-8fc1-42cf-8b29-1890dedd26d7\",\n  \"type\": \"metadata_cascade_policy\",\n  \"owner_enterprise\": {\n    \"type\": \"enterprise\",\n    \"id\": \"690678\"\n  },\n  \"parent\": {\n    \"type\": \"folder\",\n    \"id\": \"1234567\"\n  },\n  \"scope\": \"global\",\n  \"templateKey\": \"productInfo\"\n}"
            }
          ]
        },
        {
          "name": "Force-apply metadata cascade policy to folder",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "491fda40-f581-41fe-9e12-667ac40f5f2d",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "83a9e4e2-9747-457f-828c-4bf7ebc05164",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"conflict_resolution\": \"none\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/metadata_cascade_policies/:metadata_cascade_policy_id/apply",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "metadata_cascade_policies",
                ":metadata_cascade_policy_id",
                "apply"
              ],
              "variable": [
                {
                  "id": "07e3de72-2e6c-4664-a1a1-a0cd593b365c",
                  "key": "metadata_cascade_policy_id",
                  "value": "6fd4ff89-8fc1-42cf-8b29-1890dedd26d7",
                  "type": "string",
                  "description": "The ID of the cascade policy to force-apply."
                }
              ]
            },
            "description": "Force the metadata on a folder with a metadata cascade policy to be applied to\n\nhttps://developer.box.com/en/reference/post-metadata-cascade-policies-id-apply"
          },
          "response": [
            {
              "id": "b41da77b-4b22-4f7b-8b67-b0ab62812dcc",
              "name": "[202] Returns an empty response when the API call was successful. The metadata",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"conflict_resolution\": \"none\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/metadata_cascade_policies/:metadata_cascade_policy_id/apply",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "metadata_cascade_policies",
                    ":metadata_cascade_policy_id",
                    "apply"
                  ],
                  "variable": [
                    {
                      "id": "07e3de72-2e6c-4664-a1a1-a0cd593b365c",
                      "key": "metadata_cascade_policy_id",
                      "value": "6fd4ff89-8fc1-42cf-8b29-1890dedd26d7",
                      "type": "string",
                      "description": "The ID of the cascade policy to force-apply."
                    }
                  ]
                },
                "description": "Force the metadata on a folder with a metadata cascade policy to be applied to\n\nhttps://developer.box.com/en/reference/post-metadata-cascade-policies-id-apply"
              },
              "status": "Accepted",
              "code": 202,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "e2fa96c1-a146-4a16-8710-3bac44e85780",
              "name": "[404] Returns an error when the policy can not be found or the user does not",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"conflict_resolution\": \"none\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/metadata_cascade_policies/:metadata_cascade_policy_id/apply",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "metadata_cascade_policies",
                    ":metadata_cascade_policy_id",
                    "apply"
                  ],
                  "variable": [
                    {
                      "id": "07e3de72-2e6c-4664-a1a1-a0cd593b365c",
                      "key": "metadata_cascade_policy_id",
                      "value": "6fd4ff89-8fc1-42cf-8b29-1890dedd26d7",
                      "type": "string",
                      "description": "The ID of the cascade policy to force-apply."
                    }
                  ]
                },
                "description": "Force the metadata on a folder with a metadata cascade policy to be applied to\n\nhttps://developer.box.com/en/reference/post-metadata-cascade-policies-id-apply"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        },
        {
          "name": "Remove metadata cascade policy",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "9e83375e-1998-474e-8b6b-5db7dc997679",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "c79e89f0-4e10-4242-97b6-b3cf10ff316f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/metadata_cascade_policies/:metadata_cascade_policy_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "metadata_cascade_policies",
                ":metadata_cascade_policy_id"
              ],
              "variable": [
                {
                  "id": "fea91001-0101-45b2-831f-1308a728c06f",
                  "key": "metadata_cascade_policy_id",
                  "value": "6fd4ff89-8fc1-42cf-8b29-1890dedd26d7",
                  "type": "string",
                  "description": "The ID of the metadata cascade policy."
                }
              ]
            },
            "description": "Deletes a metadata cascade policy.\n\nhttps://developer.box.com/en/reference/delete-metadata-cascade-policies-id"
          },
          "response": [
            {
              "id": "52574a46-ef04-4c8f-b0e4-5a5ffc4ce776",
              "name": "[204] Returns an empty response when the policy",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/metadata_cascade_policies/:metadata_cascade_policy_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "metadata_cascade_policies",
                    ":metadata_cascade_policy_id"
                  ],
                  "variable": [
                    {
                      "id": "fea91001-0101-45b2-831f-1308a728c06f",
                      "key": "metadata_cascade_policy_id",
                      "value": "6fd4ff89-8fc1-42cf-8b29-1890dedd26d7",
                      "type": "string",
                      "description": "The ID of the metadata cascade policy."
                    }
                  ]
                },
                "description": "Deletes a metadata cascade policy.\n\nhttps://developer.box.com/en/reference/delete-metadata-cascade-policies-id"
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "6b2cdc44-d8be-456c-879f-a7bb6d09fa1d",
              "name": "[404] Returns an error when the policy can not be found or the user does not",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/metadata_cascade_policies/:metadata_cascade_policy_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "metadata_cascade_policies",
                    ":metadata_cascade_policy_id"
                  ],
                  "variable": [
                    {
                      "id": "fea91001-0101-45b2-831f-1308a728c06f",
                      "key": "metadata_cascade_policy_id",
                      "value": "6fd4ff89-8fc1-42cf-8b29-1890dedd26d7",
                      "type": "string",
                      "description": "The ID of the metadata cascade policy."
                    }
                  ]
                },
                "description": "Deletes a metadata cascade policy.\n\nhttps://developer.box.com/en/reference/delete-metadata-cascade-policies-id"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        }
      ],
      "_postman_id": "d5d79ae8-ffaa-43fe-925e-54204594009f"
    },
    {
      "name": "Metadata instances (Files)",
      "item": [
        {
          "name": "List metadata instances on file",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f036b515-0a24-4dd9-b32a-7761cc237e25",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "33df86dc-2900-4e9e-b9b3-d2cf1a6d7906",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/files/:file_id/metadata",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "files",
                ":file_id",
                "metadata"
              ],
              "variable": [
                {
                  "id": "d66ab1d0-22d7-467c-9a98-7e049748bb9b",
                  "key": "file_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                }
              ]
            },
            "description": "Retrieves all metadata for a given file.\n\nhttps://developer.box.com/en/reference/get-files-id-metadata"
          },
          "response": [
            {
              "id": "7634e7e6-2c45-435c-9202-1b15a65b59a4",
              "name": "[404] Returned when the user does not have access to the file.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/metadata",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "metadata"
                  ],
                  "variable": [
                    {
                      "id": "d66ab1d0-22d7-467c-9a98-7e049748bb9b",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Retrieves all metadata for a given file.\n\nhttps://developer.box.com/en/reference/get-files-id-metadata"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "e743a6b0-21da-4726-b395-0d9b92f3f9df",
              "name": "[403] Returned when the request parameters are not valid.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/metadata",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "metadata"
                  ],
                  "variable": [
                    {
                      "id": "d66ab1d0-22d7-467c-9a98-7e049748bb9b",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Retrieves all metadata for a given file.\n\nhttps://developer.box.com/en/reference/get-files-id-metadata"
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "fd8b43e4-02e1-4dfc-8740-a9e586d95a60",
              "name": "[200] Returns all the metadata associated with a file.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/metadata",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "metadata"
                  ],
                  "variable": [
                    {
                      "id": "d66ab1d0-22d7-467c-9a98-7e049748bb9b",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Retrieves all metadata for a given file.\n\nhttps://developer.box.com/en/reference/get-files-id-metadata"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"entries\": [\n    {\n      \"$canEdit\": true,\n      \"$id\": \"01234500-12f1-1234-aa12-b1d234cb567e\",\n      \"$parent\": \"folder_59449484661,\",\n      \"$scope\": \"enterprise_27335\",\n      \"$template\": \"properties\",\n      \"$type\": \"properties-6bcba49f-ca6d-4d2a-a758-57fe6edf44d0\",\n      \"$typeVersion\": 2,\n      \"$version\": 1\n    }\n  ],\n  \"limit\": 100\n}"
            }
          ]
        },
        {
          "name": "Get metadata instance on file",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "bb801a37-e2a6-46e5-a86c-7e55b47639ef",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "023c41a4-bb1b-422a-b90e-116618fb6109",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/files/:file_id/metadata/:scope/:template_key",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "files",
                ":file_id",
                "metadata",
                ":scope",
                ":template_key"
              ],
              "variable": [
                {
                  "id": "065ca363-6bee-40c3-a8c3-58e8bafaceef",
                  "key": "file_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                },
                {
                  "id": "4e5bc91c-0f6b-4a05-b2e2-2259f88883bb",
                  "key": "scope",
                  "value": "global",
                  "type": "string",
                  "description": "The scope of the metadata template"
                },
                {
                  "id": "bcc959f3-e7d4-4b77-854a-c5dc872cfa45",
                  "key": "template_key",
                  "value": "properties",
                  "type": "string",
                  "description": "The name of the metadata template"
                }
              ]
            },
            "description": "Retrieves the instance of a metadata template that has been applied to a\n\nhttps://developer.box.com/en/reference/get-files-id-metadata-id-id"
          },
          "response": [
            {
              "id": "44604aae-8356-4151-927f-d7a9dea4d4bb",
              "name": "[404] Returned if the metadata template specified",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/metadata/:scope/:template_key",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "metadata",
                    ":scope",
                    ":template_key"
                  ],
                  "variable": [
                    {
                      "id": "065ca363-6bee-40c3-a8c3-58e8bafaceef",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    },
                    {
                      "id": "4e5bc91c-0f6b-4a05-b2e2-2259f88883bb",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "bcc959f3-e7d4-4b77-854a-c5dc872cfa45",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Retrieves the instance of a metadata template that has been applied to a\n\nhttps://developer.box.com/en/reference/get-files-id-metadata-id-id"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "4eef34cb-48e6-471d-b7a6-e2a589abe5d2",
              "name": "[405] Returned when the method was not allowed.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/metadata/:scope/:template_key",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "metadata",
                    ":scope",
                    ":template_key"
                  ],
                  "variable": [
                    {
                      "id": "065ca363-6bee-40c3-a8c3-58e8bafaceef",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    },
                    {
                      "id": "4e5bc91c-0f6b-4a05-b2e2-2259f88883bb",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "bcc959f3-e7d4-4b77-854a-c5dc872cfa45",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Retrieves the instance of a metadata template that has been applied to a\n\nhttps://developer.box.com/en/reference/get-files-id-metadata-id-id"
              },
              "status": "Method Not Allowed",
              "code": 405,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "8839b9f4-ce4c-47c2-944d-df47ed554d22",
              "name": "[201] An instance of the metadata template that includes",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/metadata/:scope/:template_key",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "metadata",
                    ":scope",
                    ":template_key"
                  ],
                  "variable": [
                    {
                      "id": "065ca363-6bee-40c3-a8c3-58e8bafaceef",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    },
                    {
                      "id": "4e5bc91c-0f6b-4a05-b2e2-2259f88883bb",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "bcc959f3-e7d4-4b77-854a-c5dc872cfa45",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Retrieves the instance of a metadata template that has been applied to a\n\nhttps://developer.box.com/en/reference/get-files-id-metadata-id-id"
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"$canEdit\": true,\n  \"$id\": \"01234500-12f1-1234-aa12-b1d234cb567e\",\n  \"$parent\": \"folder_59449484661,\",\n  \"$scope\": \"enterprise_27335\",\n  \"$template\": \"properties\",\n  \"$type\": \"properties-6bcba49f-ca6d-4d2a-a758-57fe6edf44d0\",\n  \"$typeVersion\": 2,\n  \"$version\": 1\n}"
            },
            {
              "id": "cbf22965-bbd9-4e0f-a061-2f32913d3055",
              "name": "[403] Returned when the request parameters are not valid.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/metadata/:scope/:template_key",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "metadata",
                    ":scope",
                    ":template_key"
                  ],
                  "variable": [
                    {
                      "id": "065ca363-6bee-40c3-a8c3-58e8bafaceef",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    },
                    {
                      "id": "4e5bc91c-0f6b-4a05-b2e2-2259f88883bb",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "bcc959f3-e7d4-4b77-854a-c5dc872cfa45",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Retrieves the instance of a metadata template that has been applied to a\n\nhttps://developer.box.com/en/reference/get-files-id-metadata-id-id"
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        },
        {
          "name": "Create metadata instance on file",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f99b3229-dcb7-43dd-826f-8db279b64d66",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "365ba6da-26f8-4055-8f29-f3465e7e6ac4",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Aaron Levie\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/files/:file_id/metadata/:scope/:template_key",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "files",
                ":file_id",
                "metadata",
                ":scope",
                ":template_key"
              ],
              "variable": [
                {
                  "id": "7be95e9a-dd4a-4289-9aa6-3f9a98b9a467",
                  "key": "file_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                },
                {
                  "id": "4ff1ccc2-045c-41c2-a152-2c41c1623762",
                  "key": "scope",
                  "value": "global",
                  "type": "string",
                  "description": "The scope of the metadata template"
                },
                {
                  "id": "4d3b759e-c895-4500-9a66-0b3cd30f4d78",
                  "key": "template_key",
                  "value": "properties",
                  "type": "string",
                  "description": "The name of the metadata template"
                }
              ]
            },
            "description": "Applies an instance of a metadata template to a file.\n\nhttps://developer.box.com/en/reference/post-files-id-metadata-id-id"
          },
          "response": [
            {
              "id": "22f37995-e810-4c4b-965d-116d16b188fd",
              "name": "[409] Returns an error when an instance of this metadata template is already",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Aaron Levie\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/metadata/:scope/:template_key",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "metadata",
                    ":scope",
                    ":template_key"
                  ],
                  "variable": [
                    {
                      "id": "7be95e9a-dd4a-4289-9aa6-3f9a98b9a467",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    },
                    {
                      "id": "4ff1ccc2-045c-41c2-a152-2c41c1623762",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "4d3b759e-c895-4500-9a66-0b3cd30f4d78",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Applies an instance of a metadata template to a file.\n\nhttps://developer.box.com/en/reference/post-files-id-metadata-id-id"
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "4d93c7b7-4a4e-4d75-942a-0a230bcf7971",
              "name": "[201] Returns the instance of the template that was applied to the file,",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Aaron Levie\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/metadata/:scope/:template_key",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "metadata",
                    ":scope",
                    ":template_key"
                  ],
                  "variable": [
                    {
                      "id": "7be95e9a-dd4a-4289-9aa6-3f9a98b9a467",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    },
                    {
                      "id": "4ff1ccc2-045c-41c2-a152-2c41c1623762",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "4d3b759e-c895-4500-9a66-0b3cd30f4d78",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Applies an instance of a metadata template to a file.\n\nhttps://developer.box.com/en/reference/post-files-id-metadata-id-id"
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"$canEdit\": true,\n  \"$id\": \"01234500-12f1-1234-aa12-b1d234cb567e\",\n  \"$parent\": \"folder_59449484661,\",\n  \"$scope\": \"enterprise_27335\",\n  \"$template\": \"properties\",\n  \"$type\": \"properties-6bcba49f-ca6d-4d2a-a758-57fe6edf44d0\",\n  \"$typeVersion\": 2,\n  \"$version\": 1\n}"
            },
            {
              "id": "9cfe2125-1bcb-4cfb-9ecf-c0c06aae0fb1",
              "name": "[400] Returns an error when the request body is not valid.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Aaron Levie\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/metadata/:scope/:template_key",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "metadata",
                    ":scope",
                    ":template_key"
                  ],
                  "variable": [
                    {
                      "id": "7be95e9a-dd4a-4289-9aa6-3f9a98b9a467",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    },
                    {
                      "id": "4ff1ccc2-045c-41c2-a152-2c41c1623762",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "4d3b759e-c895-4500-9a66-0b3cd30f4d78",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Applies an instance of a metadata template to a file.\n\nhttps://developer.box.com/en/reference/post-files-id-metadata-id-id"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "9d10eeaf-fa4d-4b84-b7e5-c380c67a4517",
              "name": "[404] Returns an error when the file or metadata template could not be found.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Aaron Levie\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/metadata/:scope/:template_key",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "metadata",
                    ":scope",
                    ":template_key"
                  ],
                  "variable": [
                    {
                      "id": "7be95e9a-dd4a-4289-9aa6-3f9a98b9a467",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    },
                    {
                      "id": "4ff1ccc2-045c-41c2-a152-2c41c1623762",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "4d3b759e-c895-4500-9a66-0b3cd30f4d78",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Applies an instance of a metadata template to a file.\n\nhttps://developer.box.com/en/reference/post-files-id-metadata-id-id"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        },
        {
          "name": "Update metadata instance on file",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f13b6fcf-4f4c-4280-ad4c-2755df7e2bee",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "43d8fb87-6db7-43a4-a8e3-c5a938ae1aed",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json-patch+json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n  {\n    \"op\": \"add\",\n    \"path\": \"/currentState\",\n    \"value\": \"reviewed\",\n    \"from\": \"/nextState\"\n  }\n]",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/files/:file_id/metadata/:scope/:template_key",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "files",
                ":file_id",
                "metadata",
                ":scope",
                ":template_key"
              ],
              "variable": [
                {
                  "id": "458db829-4d62-49a9-893a-7afb4a0f8d20",
                  "key": "file_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                },
                {
                  "id": "a606d8cd-c656-4bfd-9ae2-2afbb553d269",
                  "key": "scope",
                  "value": "global",
                  "type": "string",
                  "description": "The scope of the metadata template"
                },
                {
                  "id": "06d4de98-a355-4a86-837f-7cb7292eb7c1",
                  "key": "template_key",
                  "value": "properties",
                  "type": "string",
                  "description": "The name of the metadata template"
                }
              ]
            },
            "description": "Updates a piece of metadata on a file.\n\nhttps://developer.box.com/en/reference/put-files-id-metadata-id-id"
          },
          "response": [
            {
              "id": "5a6e359b-9eae-417e-90e7-27b8c0156601",
              "name": "[200] Returns the updated metadata template instance, with the",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json-patch+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "[\n  {\n    \"op\": \"add\",\n    \"path\": \"/currentState\",\n    \"value\": \"reviewed\",\n    \"from\": \"/nextState\"\n  }\n]",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/metadata/:scope/:template_key",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "metadata",
                    ":scope",
                    ":template_key"
                  ],
                  "variable": [
                    {
                      "id": "458db829-4d62-49a9-893a-7afb4a0f8d20",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    },
                    {
                      "id": "a606d8cd-c656-4bfd-9ae2-2afbb553d269",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "06d4de98-a355-4a86-837f-7cb7292eb7c1",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Updates a piece of metadata on a file.\n\nhttps://developer.box.com/en/reference/put-files-id-metadata-id-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"$canEdit\": true,\n  \"$id\": \"01234500-12f1-1234-aa12-b1d234cb567e\",\n  \"$parent\": \"folder_59449484661,\",\n  \"$scope\": \"enterprise_27335\",\n  \"$template\": \"properties\",\n  \"$type\": \"properties-6bcba49f-ca6d-4d2a-a758-57fe6edf44d0\",\n  \"$typeVersion\": 2,\n  \"$version\": 1\n}"
            },
            {
              "id": "66b3535f-6ae0-43a3-b99c-7b3fec7c4119",
              "name": "[500] Returns an error in some edge cases when the request body is not a valid",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json-patch+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "[\n  {\n    \"op\": \"add\",\n    \"path\": \"/currentState\",\n    \"value\": \"reviewed\",\n    \"from\": \"/nextState\"\n  }\n]",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/metadata/:scope/:template_key",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "metadata",
                    ":scope",
                    ":template_key"
                  ],
                  "variable": [
                    {
                      "id": "458db829-4d62-49a9-893a-7afb4a0f8d20",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    },
                    {
                      "id": "a606d8cd-c656-4bfd-9ae2-2afbb553d269",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "06d4de98-a355-4a86-837f-7cb7292eb7c1",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Updates a piece of metadata on a file.\n\nhttps://developer.box.com/en/reference/put-files-id-metadata-id-id"
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "7c1a7a7b-646f-44be-b7ac-1e3b858bf168",
              "name": "[400] Returns an error when the request body is not valid.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json-patch+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "[\n  {\n    \"op\": \"add\",\n    \"path\": \"/currentState\",\n    \"value\": \"reviewed\",\n    \"from\": \"/nextState\"\n  }\n]",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/metadata/:scope/:template_key",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "metadata",
                    ":scope",
                    ":template_key"
                  ],
                  "variable": [
                    {
                      "id": "458db829-4d62-49a9-893a-7afb4a0f8d20",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    },
                    {
                      "id": "a606d8cd-c656-4bfd-9ae2-2afbb553d269",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "06d4de98-a355-4a86-837f-7cb7292eb7c1",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Updates a piece of metadata on a file.\n\nhttps://developer.box.com/en/reference/put-files-id-metadata-id-id"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        },
        {
          "name": "Remove metadata instance from file",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c49aaa96-5259-4d66-a7c9-3b548752c96c",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "4ac4bf2d-bcfb-4d45-9855-6a1d921b69b3",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/files/:file_id/metadata/:scope/:template_key",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "files",
                ":file_id",
                "metadata",
                ":scope",
                ":template_key"
              ],
              "variable": [
                {
                  "id": "3ca19499-9327-4169-9bd9-e3aa68b8b937",
                  "key": "file_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                },
                {
                  "id": "6156facc-c6b6-4a4f-bc7d-b39626c5478a",
                  "key": "scope",
                  "value": "global",
                  "type": "string",
                  "description": "The scope of the metadata template"
                },
                {
                  "id": "964f5468-c41b-4e06-90df-360952d4606d",
                  "key": "template_key",
                  "value": "properties",
                  "type": "string",
                  "description": "The name of the metadata template"
                }
              ]
            },
            "description": "Deletes a piece of file metadata.\n\nhttps://developer.box.com/en/reference/delete-files-id-metadata-id-id"
          },
          "response": [
            {
              "id": "34a1a6f6-0b44-40a2-8ad1-ddc06fb8c3bf",
              "name": "[404] Returns an error when the file does not have an instance of the metadata",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/metadata/:scope/:template_key",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "metadata",
                    ":scope",
                    ":template_key"
                  ],
                  "variable": [
                    {
                      "id": "3ca19499-9327-4169-9bd9-e3aa68b8b937",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    },
                    {
                      "id": "6156facc-c6b6-4a4f-bc7d-b39626c5478a",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "964f5468-c41b-4e06-90df-360952d4606d",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Deletes a piece of file metadata.\n\nhttps://developer.box.com/en/reference/delete-files-id-metadata-id-id"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "95cab9c7-644e-431a-a4fd-06cc9b9f3d75",
              "name": "[204] Returns an empty response when the metadata is",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/metadata/:scope/:template_key",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "metadata",
                    ":scope",
                    ":template_key"
                  ],
                  "variable": [
                    {
                      "id": "3ca19499-9327-4169-9bd9-e3aa68b8b937",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    },
                    {
                      "id": "6156facc-c6b6-4a4f-bc7d-b39626c5478a",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "964f5468-c41b-4e06-90df-360952d4606d",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Deletes a piece of file metadata.\n\nhttps://developer.box.com/en/reference/delete-files-id-metadata-id-id"
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "aafb9952-1947-4de3-96d2-31b37b7ac4f0",
              "name": "[405] Returned when the method was not allowed.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/metadata/:scope/:template_key",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "metadata",
                    ":scope",
                    ":template_key"
                  ],
                  "variable": [
                    {
                      "id": "3ca19499-9327-4169-9bd9-e3aa68b8b937",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    },
                    {
                      "id": "6156facc-c6b6-4a4f-bc7d-b39626c5478a",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "964f5468-c41b-4e06-90df-360952d4606d",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Deletes a piece of file metadata.\n\nhttps://developer.box.com/en/reference/delete-files-id-metadata-id-id"
              },
              "status": "Method Not Allowed",
              "code": 405,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "c29680af-08b0-4d0a-b6e1-e66dc092b57b",
              "name": "[400] Returned when the request parameters are not valid. This may happen of the",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/metadata/:scope/:template_key",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "metadata",
                    ":scope",
                    ":template_key"
                  ],
                  "variable": [
                    {
                      "id": "3ca19499-9327-4169-9bd9-e3aa68b8b937",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    },
                    {
                      "id": "6156facc-c6b6-4a4f-bc7d-b39626c5478a",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "964f5468-c41b-4e06-90df-360952d4606d",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Deletes a piece of file metadata.\n\nhttps://developer.box.com/en/reference/delete-files-id-metadata-id-id"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        }
      ],
      "_postman_id": "2dc9483d-2433-4083-a23e-2384e49a5eeb"
    },
    {
      "name": "Metadata instances (Folders)",
      "item": [
        {
          "name": "List metadata instances on folder",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3de591be-c246-43bd-a188-c9483663b99c",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "edb03d88-2e29-47fd-810d-fc07067408f5",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/metadata",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "folders",
                ":folder_id",
                "metadata"
              ],
              "variable": [
                {
                  "id": "6c030683-d47a-421b-937b-f655469f710e",
                  "key": "folder_id",
                  "value": "0",
                  "type": "string",
                  "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                }
              ]
            },
            "description": "Retrieves all metadata for a given folder. This can not be used on the root\n\nhttps://developer.box.com/en/reference/get-folders-id-metadata"
          },
          "response": [
            {
              "id": "7370d524-2532-4fe4-a5dc-6306e5eb1f4e",
              "name": "[403] Returned when the request parameters are not valid.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/metadata",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "metadata"
                  ],
                  "variable": [
                    {
                      "id": "6c030683-d47a-421b-937b-f655469f710e",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Retrieves all metadata for a given folder. This can not be used on the root\n\nhttps://developer.box.com/en/reference/get-folders-id-metadata"
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "847b48f3-8adb-4648-92ac-564bc56b494e",
              "name": "[200] Returns all the metadata associated with a folder.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/metadata",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "metadata"
                  ],
                  "variable": [
                    {
                      "id": "6c030683-d47a-421b-937b-f655469f710e",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Retrieves all metadata for a given folder. This can not be used on the root\n\nhttps://developer.box.com/en/reference/get-folders-id-metadata"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"entries\": [\n    {\n      \"$canEdit\": true,\n      \"$id\": \"01234500-12f1-1234-aa12-b1d234cb567e\",\n      \"$parent\": \"folder_59449484661,\",\n      \"$scope\": \"enterprise_27335\",\n      \"$template\": \"properties\",\n      \"$type\": \"properties-6bcba49f-ca6d-4d2a-a758-57fe6edf44d0\",\n      \"$typeVersion\": 2,\n      \"$version\": 1\n    }\n  ],\n  \"limit\": 100\n}"
            },
            {
              "id": "9eb204a9-8308-4dc8-9aee-e8ad0671630a",
              "name": "[404] Returned when the user does not have access to the folder.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/metadata",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "metadata"
                  ],
                  "variable": [
                    {
                      "id": "6c030683-d47a-421b-937b-f655469f710e",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Retrieves all metadata for a given folder. This can not be used on the root\n\nhttps://developer.box.com/en/reference/get-folders-id-metadata"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        },
        {
          "name": "Get metadata instance on folder",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "9322ceb4-a28b-47e4-8a37-57b639cdfbd7",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "23e03b4e-f836-4504-811d-4a5d2e86e6a4",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/metadata/:scope/:template_key",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "folders",
                ":folder_id",
                "metadata",
                ":scope",
                ":template_key"
              ],
              "variable": [
                {
                  "id": "d79ce46c-1203-4b37-b7d8-535666c80cd2",
                  "key": "folder_id",
                  "value": "0",
                  "type": "string",
                  "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                },
                {
                  "id": "811b667d-3587-40ea-9e7e-8b350fd2454d",
                  "key": "scope",
                  "value": "global",
                  "type": "string",
                  "description": "The scope of the metadata template"
                },
                {
                  "id": "89bad498-8974-4db1-a0ed-6e9935abe675",
                  "key": "template_key",
                  "value": "properties",
                  "type": "string",
                  "description": "The name of the metadata template"
                }
              ]
            },
            "description": "Retrieves the instance of a metadata template that has been applied to a\n\nhttps://developer.box.com/en/reference/get-folders-id-metadata-id-id"
          },
          "response": [
            {
              "id": "2101d908-d65d-4eb9-970a-ee62a1b4ed9f",
              "name": "[405] Returned when the method was not allowed. This often happens when the",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/metadata/:scope/:template_key",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "metadata",
                    ":scope",
                    ":template_key"
                  ],
                  "variable": [
                    {
                      "id": "d79ce46c-1203-4b37-b7d8-535666c80cd2",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    },
                    {
                      "id": "811b667d-3587-40ea-9e7e-8b350fd2454d",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "89bad498-8974-4db1-a0ed-6e9935abe675",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Retrieves the instance of a metadata template that has been applied to a\n\nhttps://developer.box.com/en/reference/get-folders-id-metadata-id-id"
              },
              "status": "Method Not Allowed",
              "code": 405,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "22336f9b-c547-4990-88a1-d7d5fd6b25dc",
              "name": "[404] Returned if the metadata template specified",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/metadata/:scope/:template_key",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "metadata",
                    ":scope",
                    ":template_key"
                  ],
                  "variable": [
                    {
                      "id": "d79ce46c-1203-4b37-b7d8-535666c80cd2",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    },
                    {
                      "id": "811b667d-3587-40ea-9e7e-8b350fd2454d",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "89bad498-8974-4db1-a0ed-6e9935abe675",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Retrieves the instance of a metadata template that has been applied to a\n\nhttps://developer.box.com/en/reference/get-folders-id-metadata-id-id"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "99c535a8-c12c-40a9-b6fc-cec4823d6de7",
              "name": "[201] An instance of the metadata template that includes",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/metadata/:scope/:template_key",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "metadata",
                    ":scope",
                    ":template_key"
                  ],
                  "variable": [
                    {
                      "id": "d79ce46c-1203-4b37-b7d8-535666c80cd2",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    },
                    {
                      "id": "811b667d-3587-40ea-9e7e-8b350fd2454d",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "89bad498-8974-4db1-a0ed-6e9935abe675",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Retrieves the instance of a metadata template that has been applied to a\n\nhttps://developer.box.com/en/reference/get-folders-id-metadata-id-id"
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"$canEdit\": true,\n  \"$id\": \"01234500-12f1-1234-aa12-b1d234cb567e\",\n  \"$parent\": \"folder_59449484661,\",\n  \"$scope\": \"enterprise_27335\",\n  \"$template\": \"properties\",\n  \"$type\": \"properties-6bcba49f-ca6d-4d2a-a758-57fe6edf44d0\",\n  \"$typeVersion\": 2,\n  \"$version\": 1\n}"
            },
            {
              "id": "a0b1014a-a230-49e7-be7e-d870e11782ec",
              "name": "[403] Returned when the request parameters are not valid.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/metadata/:scope/:template_key",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "metadata",
                    ":scope",
                    ":template_key"
                  ],
                  "variable": [
                    {
                      "id": "d79ce46c-1203-4b37-b7d8-535666c80cd2",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    },
                    {
                      "id": "811b667d-3587-40ea-9e7e-8b350fd2454d",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "89bad498-8974-4db1-a0ed-6e9935abe675",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Retrieves the instance of a metadata template that has been applied to a\n\nhttps://developer.box.com/en/reference/get-folders-id-metadata-id-id"
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        },
        {
          "name": "Create metadata instance on folder",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e37935f2-7091-4068-80f2-3fa23eb7ef40",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "869486e9-7485-4a0d-a7eb-4aba38fdc11b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Aaron Levie\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/metadata/:scope/:template_key",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "folders",
                ":folder_id",
                "metadata",
                ":scope",
                ":template_key"
              ],
              "variable": [
                {
                  "id": "9f9c2218-b4dd-43ab-a763-ac60ac0a43f1",
                  "key": "folder_id",
                  "value": "0",
                  "type": "string",
                  "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                },
                {
                  "id": "4284b80e-fa40-4edf-bba8-d12ce20fcda2",
                  "key": "scope",
                  "value": "global",
                  "type": "string",
                  "description": "The scope of the metadata template"
                },
                {
                  "id": "02510473-d144-44f5-abf5-1b5e6e92f226",
                  "key": "template_key",
                  "value": "properties",
                  "type": "string",
                  "description": "The name of the metadata template"
                }
              ]
            },
            "description": "Applies an instance of a metadata template to a folder.\n\nhttps://developer.box.com/en/reference/post-folders-id-metadata-id-id"
          },
          "response": [
            {
              "id": "0282f046-4478-4506-94f1-9c8eda61e780",
              "name": "[404] Returns an error when the folder or metadata template could not be found.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Aaron Levie\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/metadata/:scope/:template_key",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "metadata",
                    ":scope",
                    ":template_key"
                  ],
                  "variable": [
                    {
                      "id": "9f9c2218-b4dd-43ab-a763-ac60ac0a43f1",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    },
                    {
                      "id": "4284b80e-fa40-4edf-bba8-d12ce20fcda2",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "02510473-d144-44f5-abf5-1b5e6e92f226",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Applies an instance of a metadata template to a folder.\n\nhttps://developer.box.com/en/reference/post-folders-id-metadata-id-id"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "1de7f441-13d0-4a4b-978a-a1bff49713d6",
              "name": "[400] Returns an error when the request body is not valid.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Aaron Levie\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/metadata/:scope/:template_key",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "metadata",
                    ":scope",
                    ":template_key"
                  ],
                  "variable": [
                    {
                      "id": "9f9c2218-b4dd-43ab-a763-ac60ac0a43f1",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    },
                    {
                      "id": "4284b80e-fa40-4edf-bba8-d12ce20fcda2",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "02510473-d144-44f5-abf5-1b5e6e92f226",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Applies an instance of a metadata template to a folder.\n\nhttps://developer.box.com/en/reference/post-folders-id-metadata-id-id"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "a4f6aa9f-2039-4e92-b22d-3d4aa95f3d56",
              "name": "[409] Returns an error when an instance of this metadata template is already",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Aaron Levie\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/metadata/:scope/:template_key",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "metadata",
                    ":scope",
                    ":template_key"
                  ],
                  "variable": [
                    {
                      "id": "9f9c2218-b4dd-43ab-a763-ac60ac0a43f1",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    },
                    {
                      "id": "4284b80e-fa40-4edf-bba8-d12ce20fcda2",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "02510473-d144-44f5-abf5-1b5e6e92f226",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Applies an instance of a metadata template to a folder.\n\nhttps://developer.box.com/en/reference/post-folders-id-metadata-id-id"
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "b09342c2-d3b7-44e7-9f7b-10b8ed16a878",
              "name": "[201] Returns the instance of the template that was applied to the folder,",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Aaron Levie\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/metadata/:scope/:template_key",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "metadata",
                    ":scope",
                    ":template_key"
                  ],
                  "variable": [
                    {
                      "id": "9f9c2218-b4dd-43ab-a763-ac60ac0a43f1",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    },
                    {
                      "id": "4284b80e-fa40-4edf-bba8-d12ce20fcda2",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "02510473-d144-44f5-abf5-1b5e6e92f226",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Applies an instance of a metadata template to a folder.\n\nhttps://developer.box.com/en/reference/post-folders-id-metadata-id-id"
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"$canEdit\": true,\n  \"$id\": \"01234500-12f1-1234-aa12-b1d234cb567e\",\n  \"$parent\": \"folder_59449484661,\",\n  \"$scope\": \"enterprise_27335\",\n  \"$template\": \"properties\",\n  \"$type\": \"properties-6bcba49f-ca6d-4d2a-a758-57fe6edf44d0\",\n  \"$typeVersion\": 2,\n  \"$version\": 1\n}"
            }
          ]
        },
        {
          "name": "Update metadata instance on folder",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "46ec55c5-d6fd-444e-8ae2-f1e6fcc08206",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "4152ee60-0322-4db9-a95a-314c82525707",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json-patch+json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n  {\n    \"op\": \"add\",\n    \"path\": \"/currentState\",\n    \"value\": \"reviewed\",\n    \"from\": \"/nextState\"\n  }\n]",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/metadata/:scope/:template_key",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "folders",
                ":folder_id",
                "metadata",
                ":scope",
                ":template_key"
              ],
              "variable": [
                {
                  "id": "38a8453a-9ff6-4305-a04e-2e27334a7b7d",
                  "key": "folder_id",
                  "value": "0",
                  "type": "string",
                  "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                },
                {
                  "id": "3e23f9fa-530d-441b-94a1-861eb518c315",
                  "key": "scope",
                  "value": "global",
                  "type": "string",
                  "description": "The scope of the metadata template"
                },
                {
                  "id": "ad83fb49-bc45-4eb2-99c3-f0600003a972",
                  "key": "template_key",
                  "value": "properties",
                  "type": "string",
                  "description": "The name of the metadata template"
                }
              ]
            },
            "description": "Updates a piece of metadata on a folder.\n\nhttps://developer.box.com/en/reference/put-folders-id-metadata-id-id"
          },
          "response": [
            {
              "id": "2dcf9ff7-987e-491f-a3c2-3dc925f225a3",
              "name": "[400] Returns an error when the request body is not valid.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json-patch+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "[\n  {\n    \"op\": \"add\",\n    \"path\": \"/currentState\",\n    \"value\": \"reviewed\",\n    \"from\": \"/nextState\"\n  }\n]",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/metadata/:scope/:template_key",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "metadata",
                    ":scope",
                    ":template_key"
                  ],
                  "variable": [
                    {
                      "id": "38a8453a-9ff6-4305-a04e-2e27334a7b7d",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    },
                    {
                      "id": "3e23f9fa-530d-441b-94a1-861eb518c315",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "ad83fb49-bc45-4eb2-99c3-f0600003a972",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Updates a piece of metadata on a folder.\n\nhttps://developer.box.com/en/reference/put-folders-id-metadata-id-id"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "2f27f916-d740-4284-9f70-dbaf6129d82b",
              "name": "[500] Returns an error in some edge cases when the request body is not a valid",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json-patch+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "[\n  {\n    \"op\": \"add\",\n    \"path\": \"/currentState\",\n    \"value\": \"reviewed\",\n    \"from\": \"/nextState\"\n  }\n]",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/metadata/:scope/:template_key",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "metadata",
                    ":scope",
                    ":template_key"
                  ],
                  "variable": [
                    {
                      "id": "38a8453a-9ff6-4305-a04e-2e27334a7b7d",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    },
                    {
                      "id": "3e23f9fa-530d-441b-94a1-861eb518c315",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "ad83fb49-bc45-4eb2-99c3-f0600003a972",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Updates a piece of metadata on a folder.\n\nhttps://developer.box.com/en/reference/put-folders-id-metadata-id-id"
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "3e106216-1ebe-4013-9dae-0fc8e7ba420a",
              "name": "[200] Returns the updated metadata template instance, with the",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json-patch+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "[\n  {\n    \"op\": \"add\",\n    \"path\": \"/currentState\",\n    \"value\": \"reviewed\",\n    \"from\": \"/nextState\"\n  }\n]",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/metadata/:scope/:template_key",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "metadata",
                    ":scope",
                    ":template_key"
                  ],
                  "variable": [
                    {
                      "id": "38a8453a-9ff6-4305-a04e-2e27334a7b7d",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    },
                    {
                      "id": "3e23f9fa-530d-441b-94a1-861eb518c315",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "ad83fb49-bc45-4eb2-99c3-f0600003a972",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Updates a piece of metadata on a folder.\n\nhttps://developer.box.com/en/reference/put-folders-id-metadata-id-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"$canEdit\": true,\n  \"$id\": \"01234500-12f1-1234-aa12-b1d234cb567e\",\n  \"$parent\": \"folder_59449484661,\",\n  \"$scope\": \"enterprise_27335\",\n  \"$template\": \"properties\",\n  \"$type\": \"properties-6bcba49f-ca6d-4d2a-a758-57fe6edf44d0\",\n  \"$typeVersion\": 2,\n  \"$version\": 1\n}"
            }
          ]
        },
        {
          "name": "Remove metadata instance from folder",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b9d92cb6-87de-4900-bf74-9704cdca7f1e",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "106a7ba7-f45d-490d-99c1-4995c5369133",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/metadata/:scope/:template_key",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "folders",
                ":folder_id",
                "metadata",
                ":scope",
                ":template_key"
              ],
              "variable": [
                {
                  "id": "805993a7-42e0-4b16-b09e-f63db20b737a",
                  "key": "folder_id",
                  "value": "0",
                  "type": "string",
                  "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                },
                {
                  "id": "2a87a6aa-c721-4d9f-b454-ea73eb932cbe",
                  "key": "scope",
                  "value": "global",
                  "type": "string",
                  "description": "The scope of the metadata template"
                },
                {
                  "id": "826c5268-7457-43a1-b8ab-333620606cb2",
                  "key": "template_key",
                  "value": "properties",
                  "type": "string",
                  "description": "The name of the metadata template"
                }
              ]
            },
            "description": "Deletes a piece of folder metadata.\n\nhttps://developer.box.com/en/reference/delete-folders-id-metadata-id-id"
          },
          "response": [
            {
              "id": "071cf5cf-9975-420e-9ea7-6786a03de1c0",
              "name": "[404] Returns an error when the folder does not have an instance of the metadata",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/metadata/:scope/:template_key",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "metadata",
                    ":scope",
                    ":template_key"
                  ],
                  "variable": [
                    {
                      "id": "805993a7-42e0-4b16-b09e-f63db20b737a",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    },
                    {
                      "id": "2a87a6aa-c721-4d9f-b454-ea73eb932cbe",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "826c5268-7457-43a1-b8ab-333620606cb2",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Deletes a piece of folder metadata.\n\nhttps://developer.box.com/en/reference/delete-folders-id-metadata-id-id"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "21ed5048-779d-46ba-ae5f-0f9c10c18166",
              "name": "[204] Returns an empty response when the metadata is",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/metadata/:scope/:template_key",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "metadata",
                    ":scope",
                    ":template_key"
                  ],
                  "variable": [
                    {
                      "id": "805993a7-42e0-4b16-b09e-f63db20b737a",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    },
                    {
                      "id": "2a87a6aa-c721-4d9f-b454-ea73eb932cbe",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "826c5268-7457-43a1-b8ab-333620606cb2",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Deletes a piece of folder metadata.\n\nhttps://developer.box.com/en/reference/delete-folders-id-metadata-id-id"
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "ca58b325-5b4e-4e49-a57a-5e25c5dd709e",
              "name": "[400] Returned when the request parameters are not valid. This may happen of the",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/metadata/:scope/:template_key",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "metadata",
                    ":scope",
                    ":template_key"
                  ],
                  "variable": [
                    {
                      "id": "805993a7-42e0-4b16-b09e-f63db20b737a",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    },
                    {
                      "id": "2a87a6aa-c721-4d9f-b454-ea73eb932cbe",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "826c5268-7457-43a1-b8ab-333620606cb2",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Deletes a piece of folder metadata.\n\nhttps://developer.box.com/en/reference/delete-folders-id-metadata-id-id"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "ef754bb7-9bf6-477f-83d5-f2e2a9dc11b0",
              "name": "[405] Returned when the method was not allowed. This often happens when the",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/metadata/:scope/:template_key",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "metadata",
                    ":scope",
                    ":template_key"
                  ],
                  "variable": [
                    {
                      "id": "805993a7-42e0-4b16-b09e-f63db20b737a",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    },
                    {
                      "id": "2a87a6aa-c721-4d9f-b454-ea73eb932cbe",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "826c5268-7457-43a1-b8ab-333620606cb2",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Deletes a piece of folder metadata.\n\nhttps://developer.box.com/en/reference/delete-folders-id-metadata-id-id"
              },
              "status": "Method Not Allowed",
              "code": 405,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        }
      ],
      "_postman_id": "5cae9136-9912-43b5-ab0e-6ed491df089e"
    },
    {
      "name": "Metadata templates",
      "item": [
        {
          "name": "Find metadata template by instance ID",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e485072f-0c88-4b7b-97e5-936b2eff16f2",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "a720ce02-6387-4ed6-8ef0-36d798c5511a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/metadata_templates?metadata_instance_id=01234500-12f1-1234-aa12-b1d234cb567e",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "metadata_templates"
              ],
              "query": [
                {
                  "key": "metadata_instance_id",
                  "value": "01234500-12f1-1234-aa12-b1d234cb567e",
                  "description": "The ID of an instance of the metadata template to find."
                }
              ]
            },
            "description": "Finds a metadata template by searching for the ID of an instance of the\n\nhttps://developer.box.com/en/reference/get-metadata-templates"
          },
          "response": [
            {
              "id": "04b5d05f-64b0-408e-aa27-7d1928e2c950",
              "name": "[400] Returned when the request parameters are not valid.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/metadata_templates?metadata_instance_id=01234500-12f1-1234-aa12-b1d234cb567e",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "metadata_templates"
                  ],
                  "query": [
                    {
                      "key": "metadata_instance_id",
                      "value": "01234500-12f1-1234-aa12-b1d234cb567e",
                      "description": "The ID of an instance of the metadata template to find."
                    }
                  ]
                },
                "description": "Finds a metadata template by searching for the ID of an instance of the\n\nhttps://developer.box.com/en/reference/get-metadata-templates"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "0e6c660a-072c-4b80-a93e-020eec70c0d3",
              "name": "[200] Returns a list containing the 1 metadata template that matches the",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/metadata_templates?metadata_instance_id=01234500-12f1-1234-aa12-b1d234cb567e",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "metadata_templates"
                  ],
                  "query": [
                    {
                      "key": "metadata_instance_id",
                      "value": "01234500-12f1-1234-aa12-b1d234cb567e",
                      "description": "The ID of an instance of the metadata template to find."
                    }
                  ]
                },
                "description": "Finds a metadata template by searching for the ID of an instance of the\n\nhttps://developer.box.com/en/reference/get-metadata-templates"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"limit\": 1000,\n  \"next_marker\": 3000,\n  \"prev_marker\": 1000,\n  \"entries\": [\n    {\n      \"id\": \"58063d82-4128-7b43-bba9-92f706befcdf\",\n      \"type\": \"metadata_template\",\n      \"scope\": \"enterprise_123456\",\n      \"templateKey\": \"productInfo\",\n      \"displayName\": \"Product Info\",\n      \"hidden\": true,\n      \"fields\": [\n        {\n          \"type\": \"string\",\n          \"key\": \"category\",\n          \"displayName\": \"Category\",\n          \"description\": \"The category\",\n          \"hidden\": true,\n          \"options\": [\n            {\n              \"key\": \"Category 1\",\n              \"id\": \"45dc2849-a4a7-40a9-a751-4a699a589190\"\n            }\n          ],\n          \"id\": \"822227e0-47a5-921b-88a8-494760b2e6d2\"\n        }\n      ],\n      \"copyInstanceOnItemCopy\": true\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "Get metadata template by name",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "4ffeb9cc-0912-4d42-84bc-c3ad9de30944",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "46e18f61-159d-4f98-ba9d-8383a9dcaf40",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/metadata_templates/:scope/:template_key/schema",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "metadata_templates",
                ":scope",
                ":template_key",
                "schema"
              ],
              "variable": [
                {
                  "id": "a3a3edbb-3109-48a9-ba69-f732350479f9",
                  "key": "scope",
                  "value": "global",
                  "type": "string",
                  "description": "The scope of the metadata template"
                },
                {
                  "id": "5fdd713b-a14f-4666-8a74-b42511438751",
                  "key": "template_key",
                  "value": "properties",
                  "type": "string",
                  "description": "The name of the metadata template"
                }
              ]
            },
            "description": "Retrieves a metadata template by its scope and templateKey values.\n\nhttps://developer.box.com/en/reference/get-metadata-templates-id-id-schema"
          },
          "response": [
            {
              "id": "0fce47c3-1002-4e6c-a66c-e4b9918d0025",
              "name": "[404] Returned when a template with the given `scope` and `template_key` can not",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/metadata_templates/:scope/:template_key/schema",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "metadata_templates",
                    ":scope",
                    ":template_key",
                    "schema"
                  ],
                  "variable": [
                    {
                      "id": "a3a3edbb-3109-48a9-ba69-f732350479f9",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "5fdd713b-a14f-4666-8a74-b42511438751",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Retrieves a metadata template by its scope and templateKey values.\n\nhttps://developer.box.com/en/reference/get-metadata-templates-id-id-schema"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "7e9de330-c12f-47db-998f-1a31f5be0c98",
              "name": "[200] Returns the metadata template matching the `scope`",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/metadata_templates/:scope/:template_key/schema",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "metadata_templates",
                    ":scope",
                    ":template_key",
                    "schema"
                  ],
                  "variable": [
                    {
                      "id": "a3a3edbb-3109-48a9-ba69-f732350479f9",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "5fdd713b-a14f-4666-8a74-b42511438751",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Retrieves a metadata template by its scope and templateKey values.\n\nhttps://developer.box.com/en/reference/get-metadata-templates-id-id-schema"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"58063d82-4128-7b43-bba9-92f706befcdf\",\n  \"type\": \"metadata_template\",\n  \"scope\": \"enterprise_123456\",\n  \"templateKey\": \"productInfo\",\n  \"displayName\": \"Product Info\",\n  \"hidden\": true,\n  \"fields\": [\n    {\n      \"type\": \"string\",\n      \"key\": \"category\",\n      \"displayName\": \"Category\",\n      \"description\": \"The category\",\n      \"hidden\": true,\n      \"options\": [\n        {\n          \"key\": \"Category 1\",\n          \"id\": \"45dc2849-a4a7-40a9-a751-4a699a589190\"\n        }\n      ],\n      \"id\": \"822227e0-47a5-921b-88a8-494760b2e6d2\"\n    }\n  ],\n  \"copyInstanceOnItemCopy\": true\n}"
            },
            {
              "id": "b44911a6-32a1-4dee-b279-428a92184712",
              "name": "[400] Returned if any of the request parameters are not valid.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/metadata_templates/:scope/:template_key/schema",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "metadata_templates",
                    ":scope",
                    ":template_key",
                    "schema"
                  ],
                  "variable": [
                    {
                      "id": "a3a3edbb-3109-48a9-ba69-f732350479f9",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "5fdd713b-a14f-4666-8a74-b42511438751",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Retrieves a metadata template by its scope and templateKey values.\n\nhttps://developer.box.com/en/reference/get-metadata-templates-id-id-schema"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        },
        {
          "name": "Get metadata template by ID",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "10a3ee55-342b-48ed-b1fc-ae34faf26d3c",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "812358ec-04be-42e6-b7e4-777283452590",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/metadata_templates/:template_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "metadata_templates",
                ":template_id"
              ],
              "variable": [
                {
                  "id": "863734a2-44be-468e-89b1-0e21711c812e",
                  "key": "template_id",
                  "value": "f7a9891f",
                  "type": "string",
                  "description": "The ID of the template"
                }
              ]
            },
            "description": "Retrieves a metadata template by its ID.\n\nhttps://developer.box.com/en/reference/get-metadata-templates-id"
          },
          "response": [
            {
              "id": "46e45a52-aab1-4c9c-b349-6a79e2391229",
              "name": "[400] Returned if any of the request parameters are not valid.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/metadata_templates/:template_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "metadata_templates",
                    ":template_id"
                  ],
                  "variable": [
                    {
                      "id": "863734a2-44be-468e-89b1-0e21711c812e",
                      "key": "template_id",
                      "value": "f7a9891f",
                      "type": "string",
                      "description": "The ID of the template"
                    }
                  ]
                },
                "description": "Retrieves a metadata template by its ID.\n\nhttps://developer.box.com/en/reference/get-metadata-templates-id"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"58063d82-4128-7b43-bba9-92f706befcdf\",\n  \"type\": \"metadata_template\",\n  \"scope\": \"enterprise_123456\",\n  \"templateKey\": \"productInfo\",\n  \"displayName\": \"Product Info\",\n  \"hidden\": true,\n  \"fields\": [\n    {\n      \"type\": \"string\",\n      \"key\": \"category\",\n      \"displayName\": \"Category\",\n      \"description\": \"The category\",\n      \"hidden\": true,\n      \"options\": [\n        {\n          \"key\": \"Category 1\",\n          \"id\": \"45dc2849-a4a7-40a9-a751-4a699a589190\"\n        }\n      ],\n      \"id\": \"822227e0-47a5-921b-88a8-494760b2e6d2\"\n    }\n  ],\n  \"copyInstanceOnItemCopy\": true\n}"
            },
            {
              "id": "845fbdf0-11d5-44a6-be91-cc7795a9f7f9",
              "name": "[200] Returns the metadata template that matches the ID.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/metadata_templates/:template_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "metadata_templates",
                    ":template_id"
                  ],
                  "variable": [
                    {
                      "id": "863734a2-44be-468e-89b1-0e21711c812e",
                      "key": "template_id",
                      "value": "f7a9891f",
                      "type": "string",
                      "description": "The ID of the template"
                    }
                  ]
                },
                "description": "Retrieves a metadata template by its ID.\n\nhttps://developer.box.com/en/reference/get-metadata-templates-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"58063d82-4128-7b43-bba9-92f706befcdf\",\n  \"type\": \"metadata_template\",\n  \"scope\": \"enterprise_123456\",\n  \"templateKey\": \"productInfo\",\n  \"displayName\": \"Product Info\",\n  \"hidden\": true,\n  \"fields\": [\n    {\n      \"type\": \"string\",\n      \"key\": \"category\",\n      \"displayName\": \"Category\",\n      \"description\": \"The category\",\n      \"hidden\": true,\n      \"options\": [\n        {\n          \"key\": \"Category 1\",\n          \"id\": \"45dc2849-a4a7-40a9-a751-4a699a589190\"\n        }\n      ],\n      \"id\": \"822227e0-47a5-921b-88a8-494760b2e6d2\"\n    }\n  ],\n  \"copyInstanceOnItemCopy\": true\n}"
            }
          ]
        },
        {
          "name": "List all global metadata templates",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "57e28936-99f0-4d82-902b-e38885dec7ff",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "00f2eb62-1d3c-405a-bac7-997fc377c943",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/metadata_templates/global?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "metadata_templates",
                "global"
              ],
              "query": [
                {
                  "key": "marker",
                  "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                  "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "1000",
                  "description": "The maximum number of items to return per page.",
                  "disabled": true
                }
              ]
            },
            "description": "Used to retrieve all generic, global metadata templates available to all\n\nhttps://developer.box.com/en/reference/get-metadata-templates-global"
          },
          "response": [
            {
              "id": "1174edd1-7d1a-48bf-8543-aff0e18ee4f7",
              "name": "[200] Returns all of the metadata templates available to all enterprises",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/metadata_templates/global?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "metadata_templates",
                    "global"
                  ],
                  "query": [
                    {
                      "key": "marker",
                      "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                      "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Used to retrieve all generic, global metadata templates available to all\n\nhttps://developer.box.com/en/reference/get-metadata-templates-global"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"limit\": 1000,\n  \"next_marker\": 3000,\n  \"prev_marker\": 1000,\n  \"entries\": [\n    {\n      \"id\": \"58063d82-4128-7b43-bba9-92f706befcdf\",\n      \"type\": \"metadata_template\",\n      \"scope\": \"enterprise_123456\",\n      \"templateKey\": \"productInfo\",\n      \"displayName\": \"Product Info\",\n      \"hidden\": true,\n      \"fields\": [\n        {\n          \"type\": \"string\",\n          \"key\": \"category\",\n          \"displayName\": \"Category\",\n          \"description\": \"The category\",\n          \"hidden\": true,\n          \"options\": [\n            {\n              \"key\": \"Category 1\",\n              \"id\": \"45dc2849-a4a7-40a9-a751-4a699a589190\"\n            }\n          ],\n          \"id\": \"822227e0-47a5-921b-88a8-494760b2e6d2\"\n        }\n      ],\n      \"copyInstanceOnItemCopy\": true\n    }\n  ]\n}"
            },
            {
              "id": "a34de472-f482-4097-9c83-7f8aae632591",
              "name": "[400] Returned when the request parameters are not valid.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/metadata_templates/global?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "metadata_templates",
                    "global"
                  ],
                  "query": [
                    {
                      "key": "marker",
                      "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                      "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Used to retrieve all generic, global metadata templates available to all\n\nhttps://developer.box.com/en/reference/get-metadata-templates-global"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        },
        {
          "name": "List all metadata templates for enterprise",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "cc3ac77b-d80a-4f14-8832-5c8cd8e15658",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "d2678fbd-d489-4195-ab4e-2f8433ca3348",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/metadata_templates/enterprise?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "metadata_templates",
                "enterprise"
              ],
              "query": [
                {
                  "key": "marker",
                  "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                  "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "1000",
                  "description": "The maximum number of items to return per page.",
                  "disabled": true
                }
              ]
            },
            "description": "Used to retrieve all metadata templates created to be used specifically within\n\nhttps://developer.box.com/en/reference/get-metadata-templates-enterprise"
          },
          "response": [
            {
              "id": "5a75daa1-f94e-4533-a6d8-645d15375a10",
              "name": "[400] Returned when the request parameters are not valid.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/metadata_templates/enterprise?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "metadata_templates",
                    "enterprise"
                  ],
                  "query": [
                    {
                      "key": "marker",
                      "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                      "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Used to retrieve all metadata templates created to be used specifically within\n\nhttps://developer.box.com/en/reference/get-metadata-templates-enterprise"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "9a4689ff-7b47-4988-b6ec-1c7cb384ed64",
              "name": "[200] Returns all of the metadata templates within an enterprise",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/metadata_templates/enterprise?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "metadata_templates",
                    "enterprise"
                  ],
                  "query": [
                    {
                      "key": "marker",
                      "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                      "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Used to retrieve all metadata templates created to be used specifically within\n\nhttps://developer.box.com/en/reference/get-metadata-templates-enterprise"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"limit\": 1000,\n  \"next_marker\": 3000,\n  \"prev_marker\": 1000,\n  \"entries\": [\n    {\n      \"id\": \"58063d82-4128-7b43-bba9-92f706befcdf\",\n      \"type\": \"metadata_template\",\n      \"scope\": \"enterprise_123456\",\n      \"templateKey\": \"productInfo\",\n      \"displayName\": \"Product Info\",\n      \"hidden\": true,\n      \"fields\": [\n        {\n          \"type\": \"string\",\n          \"key\": \"category\",\n          \"displayName\": \"Category\",\n          \"description\": \"The category\",\n          \"hidden\": true,\n          \"options\": [\n            {\n              \"key\": \"Category 1\",\n              \"id\": \"45dc2849-a4a7-40a9-a751-4a699a589190\"\n            }\n          ],\n          \"id\": \"822227e0-47a5-921b-88a8-494760b2e6d2\"\n        }\n      ],\n      \"copyInstanceOnItemCopy\": true\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "Create metadata template",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "a47c0f4e-3966-4b8d-9cbe-9300e0ecb934",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "a9095f48-38b9-4aef-803b-9d6c533574cb",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"scope\": \"enterprise\",\n  \"templateKey\": \"productInfo\",\n  \"displayName\": \"Product Info\",\n  \"hidden\": true,\n  \"fields\": [\n    {\n      \"type\": \"string\",\n      \"key\": \"category\",\n      \"displayName\": \"Category\",\n      \"description\": \"The category\",\n      \"hidden\": true,\n      \"options\": [\n        {\n          \"key\": \"Category 1\"\n        }\n      ]\n    }\n  ],\n  \"copyInstanceOnItemCopy\": true\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "https://{{api.box.com}}/2.0/metadata_templates/schema",
            "description": "Creates a new metadata template that can be applied to\n\nhttps://developer.box.com/en/reference/post-metadata-templates-schema"
          },
          "response": [
            {
              "id": "8f508e62-ae5f-4091-bef6-2fd223b53054",
              "name": "[400] Returned if the request parameters or body is not valid.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"scope\": \"enterprise\",\n  \"templateKey\": \"productInfo\",\n  \"displayName\": \"Product Info\",\n  \"hidden\": true,\n  \"fields\": [\n    {\n      \"type\": \"string\",\n      \"key\": \"category\",\n      \"displayName\": \"Category\",\n      \"description\": \"The category\",\n      \"hidden\": true,\n      \"options\": [\n        {\n          \"key\": \"Category 1\"\n        }\n      ]\n    }\n  ],\n  \"copyInstanceOnItemCopy\": true\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/metadata_templates/schema",
                "description": "Creates a new metadata template that can be applied to\n\nhttps://developer.box.com/en/reference/post-metadata-templates-schema"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "92e348e8-9de7-4b39-a43e-5df41894dc1e",
              "name": "[403] Returned when the user does not have the permission to create the metadata",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"scope\": \"enterprise\",\n  \"templateKey\": \"productInfo\",\n  \"displayName\": \"Product Info\",\n  \"hidden\": true,\n  \"fields\": [\n    {\n      \"type\": \"string\",\n      \"key\": \"category\",\n      \"displayName\": \"Category\",\n      \"description\": \"The category\",\n      \"hidden\": true,\n      \"options\": [\n        {\n          \"key\": \"Category 1\"\n        }\n      ]\n    }\n  ],\n  \"copyInstanceOnItemCopy\": true\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/metadata_templates/schema",
                "description": "Creates a new metadata template that can be applied to\n\nhttps://developer.box.com/en/reference/post-metadata-templates-schema"
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "a9f6b7ff-cab3-4bce-aa3b-f78d3958e2a2",
              "name": "[201] The schema representing the metadata template created.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"scope\": \"enterprise\",\n  \"templateKey\": \"productInfo\",\n  \"displayName\": \"Product Info\",\n  \"hidden\": true,\n  \"fields\": [\n    {\n      \"type\": \"string\",\n      \"key\": \"category\",\n      \"displayName\": \"Category\",\n      \"description\": \"The category\",\n      \"hidden\": true,\n      \"options\": [\n        {\n          \"key\": \"Category 1\"\n        }\n      ]\n    }\n  ],\n  \"copyInstanceOnItemCopy\": true\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/metadata_templates/schema",
                "description": "Creates a new metadata template that can be applied to\n\nhttps://developer.box.com/en/reference/post-metadata-templates-schema"
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"58063d82-4128-7b43-bba9-92f706befcdf\",\n  \"type\": \"metadata_template\",\n  \"scope\": \"enterprise_123456\",\n  \"templateKey\": \"productInfo\",\n  \"displayName\": \"Product Info\",\n  \"hidden\": true,\n  \"fields\": [\n    {\n      \"type\": \"string\",\n      \"key\": \"category\",\n      \"displayName\": \"Category\",\n      \"description\": \"The category\",\n      \"hidden\": true,\n      \"options\": [\n        {\n          \"key\": \"Category 1\",\n          \"id\": \"45dc2849-a4a7-40a9-a751-4a699a589190\"\n        }\n      ],\n      \"id\": \"822227e0-47a5-921b-88a8-494760b2e6d2\"\n    }\n  ],\n  \"copyInstanceOnItemCopy\": true\n}"
            }
          ]
        },
        {
          "name": "Update metadata template",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "dbd4923d-2ead-461c-ba28-4328427bdecb",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "968fa465-307c-4163-9923-940bc4b13f9e",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json-patch+json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "[\n  {\n    \"op\": \"addEnumOption\",\n    \"data\": {\n      \"name\": \"Aaron Levie\"\n    },\n    \"fieldKey\": \"category\",\n    \"fieldKeys\": [\n      \"category\",\n      \"name\"\n    ],\n    \"enumOptionKey\": \"option1\",\n    \"enumOptionKeys\": [\n      \"option1\",\n      \"option2\",\n      \"option3\"\n    ],\n    \"multiSelectOptionKey\": \"option1\",\n    \"multiSelectOptionKeys\": [\n      \"option1\",\n      \"option2\",\n      \"option3\"\n    ]\n  }\n]",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/metadata_templates/:scope/:template_key/schema",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "metadata_templates",
                ":scope",
                ":template_key",
                "schema"
              ],
              "variable": [
                {
                  "id": "a6b77df3-531c-42a6-8df0-1affd35a586f",
                  "key": "scope",
                  "value": "global",
                  "type": "string",
                  "description": "The scope of the metadata template"
                },
                {
                  "id": "1d30f1fe-bddd-40b5-b91c-195549d5240b",
                  "key": "template_key",
                  "value": "properties",
                  "type": "string",
                  "description": "The name of the metadata template"
                }
              ]
            },
            "description": "Updates a metadata template.\n\nhttps://developer.box.com/en/reference/put-metadata-templates-id-id-schema"
          },
          "response": [
            {
              "id": "144b0b87-7098-4a5a-aebf-c52a9ce767b6",
              "name": "[404] The requested template could not be found",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json-patch+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "[\n  {\n    \"op\": \"addEnumOption\",\n    \"data\": {\n      \"name\": \"Aaron Levie\"\n    },\n    \"fieldKey\": \"category\",\n    \"fieldKeys\": [\n      \"category\",\n      \"name\"\n    ],\n    \"enumOptionKey\": \"option1\",\n    \"enumOptionKeys\": [\n      \"option1\",\n      \"option2\",\n      \"option3\"\n    ],\n    \"multiSelectOptionKey\": \"option1\",\n    \"multiSelectOptionKeys\": [\n      \"option1\",\n      \"option2\",\n      \"option3\"\n    ]\n  }\n]",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/metadata_templates/:scope/:template_key/schema",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "metadata_templates",
                    ":scope",
                    ":template_key",
                    "schema"
                  ],
                  "variable": [
                    {
                      "id": "a6b77df3-531c-42a6-8df0-1affd35a586f",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "1d30f1fe-bddd-40b5-b91c-195549d5240b",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Updates a metadata template.\n\nhttps://developer.box.com/en/reference/put-metadata-templates-id-id-schema"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "9df2ef79-0b58-4132-bfaa-9e2396828813",
              "name": "[200] Returns the updated metadata template, with the",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json-patch+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "[\n  {\n    \"op\": \"addEnumOption\",\n    \"data\": {\n      \"name\": \"Aaron Levie\"\n    },\n    \"fieldKey\": \"category\",\n    \"fieldKeys\": [\n      \"category\",\n      \"name\"\n    ],\n    \"enumOptionKey\": \"option1\",\n    \"enumOptionKeys\": [\n      \"option1\",\n      \"option2\",\n      \"option3\"\n    ],\n    \"multiSelectOptionKey\": \"option1\",\n    \"multiSelectOptionKeys\": [\n      \"option1\",\n      \"option2\",\n      \"option3\"\n    ]\n  }\n]",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/metadata_templates/:scope/:template_key/schema",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "metadata_templates",
                    ":scope",
                    ":template_key",
                    "schema"
                  ],
                  "variable": [
                    {
                      "id": "a6b77df3-531c-42a6-8df0-1affd35a586f",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "1d30f1fe-bddd-40b5-b91c-195549d5240b",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Updates a metadata template.\n\nhttps://developer.box.com/en/reference/put-metadata-templates-id-id-schema"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"58063d82-4128-7b43-bba9-92f706befcdf\",\n  \"type\": \"metadata_template\",\n  \"scope\": \"enterprise_123456\",\n  \"templateKey\": \"productInfo\",\n  \"displayName\": \"Product Info\",\n  \"hidden\": true,\n  \"fields\": [\n    {\n      \"type\": \"string\",\n      \"key\": \"category\",\n      \"displayName\": \"Category\",\n      \"description\": \"The category\",\n      \"hidden\": true,\n      \"options\": [\n        {\n          \"key\": \"Category 1\",\n          \"id\": \"45dc2849-a4a7-40a9-a751-4a699a589190\"\n        }\n      ],\n      \"id\": \"822227e0-47a5-921b-88a8-494760b2e6d2\"\n    }\n  ],\n  \"copyInstanceOnItemCopy\": true\n}"
            },
            {
              "id": "bb7085dd-6c6e-4655-9d42-776cf9777014",
              "name": "[403] The request body contains a scope that the user is not",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json-patch+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "[\n  {\n    \"op\": \"addEnumOption\",\n    \"data\": {\n      \"name\": \"Aaron Levie\"\n    },\n    \"fieldKey\": \"category\",\n    \"fieldKeys\": [\n      \"category\",\n      \"name\"\n    ],\n    \"enumOptionKey\": \"option1\",\n    \"enumOptionKeys\": [\n      \"option1\",\n      \"option2\",\n      \"option3\"\n    ],\n    \"multiSelectOptionKey\": \"option1\",\n    \"multiSelectOptionKeys\": [\n      \"option1\",\n      \"option2\",\n      \"option3\"\n    ]\n  }\n]",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/metadata_templates/:scope/:template_key/schema",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "metadata_templates",
                    ":scope",
                    ":template_key",
                    "schema"
                  ],
                  "variable": [
                    {
                      "id": "a6b77df3-531c-42a6-8df0-1affd35a586f",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "1d30f1fe-bddd-40b5-b91c-195549d5240b",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Updates a metadata template.\n\nhttps://developer.box.com/en/reference/put-metadata-templates-id-id-schema"
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "ea0f3b9c-9a31-4e0a-bc8f-b6517c93fa01",
              "name": "[400] The request body does not contain a valid metadata schema.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json-patch+json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "[\n  {\n    \"op\": \"addEnumOption\",\n    \"data\": {\n      \"name\": \"Aaron Levie\"\n    },\n    \"fieldKey\": \"category\",\n    \"fieldKeys\": [\n      \"category\",\n      \"name\"\n    ],\n    \"enumOptionKey\": \"option1\",\n    \"enumOptionKeys\": [\n      \"option1\",\n      \"option2\",\n      \"option3\"\n    ],\n    \"multiSelectOptionKey\": \"option1\",\n    \"multiSelectOptionKeys\": [\n      \"option1\",\n      \"option2\",\n      \"option3\"\n    ]\n  }\n]",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/metadata_templates/:scope/:template_key/schema",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "metadata_templates",
                    ":scope",
                    ":template_key",
                    "schema"
                  ],
                  "variable": [
                    {
                      "id": "a6b77df3-531c-42a6-8df0-1affd35a586f",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "1d30f1fe-bddd-40b5-b91c-195549d5240b",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Updates a metadata template.\n\nhttps://developer.box.com/en/reference/put-metadata-templates-id-id-schema"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        },
        {
          "name": "Remove metadata template",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "90439f79-58ad-46f7-92e0-3cb8bc5ae764",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "2258ba25-4b39-49c1-b5b4-c17543c562ca",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/metadata_templates/:scope/:template_key/schema",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "metadata_templates",
                ":scope",
                ":template_key",
                "schema"
              ],
              "variable": [
                {
                  "id": "03042566-dbee-4467-8caf-b6545024f03c",
                  "key": "scope",
                  "value": "global",
                  "type": "string",
                  "description": "The scope of the metadata template"
                },
                {
                  "id": "19a69d67-fdb1-4e5f-9428-2922fe210abb",
                  "key": "template_key",
                  "value": "properties",
                  "type": "string",
                  "description": "The name of the metadata template"
                }
              ]
            },
            "description": "Delete a metadata template and its instances.\n\nhttps://developer.box.com/en/reference/delete-metadata-templates-id-id-schema"
          },
          "response": [
            {
              "id": "30954410-02fa-4d11-a8cf-12292a08288a",
              "name": "[400] Request body does not contain a valid metadata schema.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/metadata_templates/:scope/:template_key/schema",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "metadata_templates",
                    ":scope",
                    ":template_key",
                    "schema"
                  ],
                  "variable": [
                    {
                      "id": "03042566-dbee-4467-8caf-b6545024f03c",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "19a69d67-fdb1-4e5f-9428-2922fe210abb",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Delete a metadata template and its instances.\n\nhttps://developer.box.com/en/reference/delete-metadata-templates-id-id-schema"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "6092dba8-a017-44af-9c69-4d1ff9bda2aa",
              "name": "[204] Returns an empty response when the metadata",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/metadata_templates/:scope/:template_key/schema",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "metadata_templates",
                    ":scope",
                    ":template_key",
                    "schema"
                  ],
                  "variable": [
                    {
                      "id": "03042566-dbee-4467-8caf-b6545024f03c",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "19a69d67-fdb1-4e5f-9428-2922fe210abb",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Delete a metadata template and its instances.\n\nhttps://developer.box.com/en/reference/delete-metadata-templates-id-id-schema"
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "6fd9d055-53b5-46f9-8d37-174fd7d12e08",
              "name": "[403] Request body contains a scope that the user is not allowed to",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/metadata_templates/:scope/:template_key/schema",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "metadata_templates",
                    ":scope",
                    ":template_key",
                    "schema"
                  ],
                  "variable": [
                    {
                      "id": "03042566-dbee-4467-8caf-b6545024f03c",
                      "key": "scope",
                      "value": "global",
                      "type": "string",
                      "description": "The scope of the metadata template"
                    },
                    {
                      "id": "19a69d67-fdb1-4e5f-9428-2922fe210abb",
                      "key": "template_key",
                      "value": "properties",
                      "type": "string",
                      "description": "The name of the metadata template"
                    }
                  ]
                },
                "description": "Delete a metadata template and its instances.\n\nhttps://developer.box.com/en/reference/delete-metadata-templates-id-id-schema"
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        }
      ],
      "_postman_id": "c391dc82-4513-4283-afa7-62f22c20e1d2"
    },
    {
      "name": "Recent items",
      "item": [
        {
          "name": "List recently accessed items",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b292b9b8-26c7-46f1-bb74-305f374e6580",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "169664f6-9ca3-4e18-8b42-de37c93656d4",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/recent_items?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "recent_items"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "1000",
                  "description": "The maximum number of items to return per page.",
                  "disabled": true
                },
                {
                  "key": "marker",
                  "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                  "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                  "disabled": true
                }
              ]
            },
            "description": "Returns information about the recent items accessed\n\nhttps://developer.box.com/en/reference/get-recent-items"
          },
          "response": [
            {
              "id": "9ddbadf4-1a73-47be-b3ac-fe3a4b6af020",
              "name": "[200] Returns a list recent items access by a user.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/recent_items?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "recent_items"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    },
                    {
                      "key": "marker",
                      "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                      "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Returns information about the recent items accessed\n\nhttps://developer.box.com/en/reference/get-recent-items"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"limit\": 1000,\n  \"next_marker\": 3000,\n  \"prev_marker\": 1000,\n  \"entries\": [\n    {\n      \"type\": \"recent_item\",\n      \"item\": {\n        \"id\": \"11446498\",\n        \"type\": \"file\",\n        \"sequence_id\": \"3\",\n        \"etag\": \"1\",\n        \"name\": \"Pictures\"\n      },\n      \"interaction_type\": \"item_preview\",\n      \"interacted_at\": \"2018-04-13T13:53:23-07:00\",\n      \"interaction_shared_link\": \"https://www.box.com/shared/static/rh935iit6ewrmw0unyul.jpeg\"\n    }\n  ]\n}"
            }
          ]
        }
      ],
      "_postman_id": "b61029b7-5fd1-4ed6-aded-c908e8ecfeb2"
    },
    {
      "name": "Retention policies",
      "item": [
        {
          "name": "List retention policies",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d8bb8f9e-8137-4d30-9964-e79ab785c107",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "bae7fc23-bec9-4853-9daf-764858c4dc6b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/retention_policies?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "retention_policies"
              ],
              "query": [
                {
                  "key": "policy_name",
                  "value": "Sales Policy",
                  "description": "Filters results by a case sensitive prefix of the name of\nretention policies.",
                  "disabled": true
                },
                {
                  "key": "policy_type",
                  "value": "finite",
                  "description": "Filters results by the type of retention policy.",
                  "disabled": true
                },
                {
                  "key": "created_by_user_id",
                  "value": "21312321",
                  "description": "Filters results by the ID of the user who created policy.",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieves all of the retention policies for an enterprise.\n\nhttps://developer.box.com/en/reference/get-retention-policies"
          },
          "response": [
            {
              "id": "af0d8f9d-5184-4b4b-85cf-2a751c9c1227",
              "name": "[400] Returns a `bad_request` if a non existent `policy_type` was specified.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/retention_policies?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "retention_policies"
                  ],
                  "query": [
                    {
                      "key": "policy_name",
                      "value": "Sales Policy",
                      "description": "Filters results by a case sensitive prefix of the name of\nretention policies.",
                      "disabled": true
                    },
                    {
                      "key": "policy_type",
                      "value": "finite",
                      "description": "Filters results by the type of retention policy.",
                      "disabled": true
                    },
                    {
                      "key": "created_by_user_id",
                      "value": "21312321",
                      "description": "Filters results by the ID of the user who created policy.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Retrieves all of the retention policies for an enterprise.\n\nhttps://developer.box.com/en/reference/get-retention-policies"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "fe7c4383-e87f-464c-90fa-bc79ab2734d5",
              "name": "[404] Returns a `not_found` error if the user specified in `created_by_user_id`",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/retention_policies?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "retention_policies"
                  ],
                  "query": [
                    {
                      "key": "policy_name",
                      "value": "Sales Policy",
                      "description": "Filters results by a case sensitive prefix of the name of\nretention policies.",
                      "disabled": true
                    },
                    {
                      "key": "policy_type",
                      "value": "finite",
                      "description": "Filters results by the type of retention policy.",
                      "disabled": true
                    },
                    {
                      "key": "created_by_user_id",
                      "value": "21312321",
                      "description": "Filters results by the ID of the user who created policy.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Retrieves all of the retention policies for an enterprise.\n\nhttps://developer.box.com/en/reference/get-retention-policies"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "ffddc54c-bcd2-46cb-aa48-3d8a6e99e94e",
              "name": "[200] Returns a list retention policies in the enterprise.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/retention_policies?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "retention_policies"
                  ],
                  "query": [
                    {
                      "key": "policy_name",
                      "value": "Sales Policy",
                      "description": "Filters results by a case sensitive prefix of the name of\nretention policies.",
                      "disabled": true
                    },
                    {
                      "key": "policy_type",
                      "value": "finite",
                      "description": "Filters results by the type of retention policy.",
                      "disabled": true
                    },
                    {
                      "key": "created_by_user_id",
                      "value": "21312321",
                      "description": "Filters results by the ID of the user who created policy.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Retrieves all of the retention policies for an enterprise.\n\nhttps://developer.box.com/en/reference/get-retention-policies"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"total_count\": 156,\n  \"entries\": [\n    {\n      \"id\": \"12345\",\n      \"type\": \"file_version\",\n      \"policy_name\": \"Some Policy Name\",\n      \"retention_length\": \"0\",\n      \"disposition_action\": \"permanently_delete\"\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "Get retention policy",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "52f733b0-1902-4f3a-abc1-670f5555970d",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "14d9b93a-1108-40d7-b26e-33182f00d348",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/retention_policies/:retention_policy_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "retention_policies",
                ":retention_policy_id"
              ],
              "variable": [
                {
                  "id": "cf61a2e7-bd8d-4118-ad50-24c05e5dc06a",
                  "key": "retention_policy_id",
                  "value": "982312",
                  "type": "string",
                  "description": "The ID of the retention policy."
                }
              ]
            },
            "description": "Retrieves a retention policy.\n\nhttps://developer.box.com/en/reference/get-retention-policies-id"
          },
          "response": [
            {
              "id": "0a38ed3b-e791-4cb7-855d-4b3cc1f67ad4",
              "name": "[200] Returns the retention policy object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/retention_policies/:retention_policy_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "retention_policies",
                    ":retention_policy_id"
                  ],
                  "variable": [
                    {
                      "id": "cf61a2e7-bd8d-4118-ad50-24c05e5dc06a",
                      "key": "retention_policy_id",
                      "value": "982312",
                      "type": "string",
                      "description": "The ID of the retention policy."
                    }
                  ]
                },
                "description": "Retrieves a retention policy.\n\nhttps://developer.box.com/en/reference/get-retention-policies-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"12345\",\n  \"type\": \"file_version\",\n  \"policy_name\": \"Some Policy Name\",\n  \"retention_length\": \"0\",\n  \"disposition_action\": \"permanently_delete\",\n  \"policy_type\": \"finite\",\n  \"status\": \"active\",\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\"\n}"
            }
          ]
        },
        {
          "name": "Create retention policy",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c2795a8a-92ea-43d4-96f1-857dde71243c",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "e5f8cb1d-10ee-41d7-becf-4ddb778ae767",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"policy_name\": \"Some Policy Name\",\n  \"policy_type\": \"finite\",\n  \"disposition_action\": \"permanently_delete\",\n  \"retention_length\": \"0\",\n  \"can_owner_extend_retention\": true,\n  \"are_owners_notified\": true,\n  \"custom_notification_recipients\": [\n    {\n      \"type\": \"user\",\n      \"id\": \"12312312\",\n      \"name\": \"Tim Apple\",\n      \"login\": \"apple@example.com\"\n    }\n  ]\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "https://{{api.box.com}}/2.0/retention_policies",
            "description": "Creates a retention policy.\n\nhttps://developer.box.com/en/reference/post-retention-policies"
          },
          "response": [
            {
              "id": "b65eb667-cb9d-4f76-b735-2589887f38ec",
              "name": "[400] Returns a `bad_request` error with the `retention_length` was",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"policy_name\": \"Some Policy Name\",\n  \"policy_type\": \"finite\",\n  \"disposition_action\": \"permanently_delete\",\n  \"retention_length\": \"0\",\n  \"can_owner_extend_retention\": true,\n  \"are_owners_notified\": true,\n  \"custom_notification_recipients\": [\n    {\n      \"type\": \"user\",\n      \"id\": \"12312312\",\n      \"name\": \"Tim Apple\",\n      \"login\": \"apple@example.com\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/retention_policies",
                "description": "Creates a retention policy.\n\nhttps://developer.box.com/en/reference/post-retention-policies"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "bdf8fcb2-2faf-488b-b704-cab26d315c0a",
              "name": "[409] Returns an error if a retention policy with the given name already exists",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"policy_name\": \"Some Policy Name\",\n  \"policy_type\": \"finite\",\n  \"disposition_action\": \"permanently_delete\",\n  \"retention_length\": \"0\",\n  \"can_owner_extend_retention\": true,\n  \"are_owners_notified\": true,\n  \"custom_notification_recipients\": [\n    {\n      \"type\": \"user\",\n      \"id\": \"12312312\",\n      \"name\": \"Tim Apple\",\n      \"login\": \"apple@example.com\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/retention_policies",
                "description": "Creates a retention policy.\n\nhttps://developer.box.com/en/reference/post-retention-policies"
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "be9c9fff-b326-4577-8889-4f15cc2cfb3e",
              "name": "[200] Returns a new retention policy object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"policy_name\": \"Some Policy Name\",\n  \"policy_type\": \"finite\",\n  \"disposition_action\": \"permanently_delete\",\n  \"retention_length\": \"0\",\n  \"can_owner_extend_retention\": true,\n  \"are_owners_notified\": true,\n  \"custom_notification_recipients\": [\n    {\n      \"type\": \"user\",\n      \"id\": \"12312312\",\n      \"name\": \"Tim Apple\",\n      \"login\": \"apple@example.com\"\n    }\n  ]\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/retention_policies",
                "description": "Creates a retention policy.\n\nhttps://developer.box.com/en/reference/post-retention-policies"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"12345\",\n  \"type\": \"file_version\",\n  \"policy_name\": \"Some Policy Name\",\n  \"retention_length\": \"0\",\n  \"disposition_action\": \"permanently_delete\",\n  \"policy_type\": \"finite\",\n  \"status\": \"active\",\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\"\n}"
            }
          ]
        },
        {
          "name": "Update retention policy",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e373153f-fe7c-4d41-95cc-98dae29a3917",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "39c8daf9-955a-4652-b20b-ecaa5b43f536",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"policy_name\": \"Some Policy Name\",\n  \"disposition_action\": \"permanently_delete\",\n  \"status\": \"retired\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/retention_policies/:retention_policy_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "retention_policies",
                ":retention_policy_id"
              ],
              "variable": [
                {
                  "id": "e208846e-9b9c-4e43-8988-ddceca8c8777",
                  "key": "retention_policy_id",
                  "value": "982312",
                  "type": "string",
                  "description": "The ID of the retention policy."
                }
              ]
            },
            "description": "Updates a retention policy.\n\nhttps://developer.box.com/en/reference/put-retention-policies-id"
          },
          "response": [
            {
              "id": "516b60c8-d439-46ce-aa32-265f85743150",
              "name": "[400] Returns a `bad_request` if an incorrect",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"policy_name\": \"Some Policy Name\",\n  \"disposition_action\": \"permanently_delete\",\n  \"status\": \"retired\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/retention_policies/:retention_policy_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "retention_policies",
                    ":retention_policy_id"
                  ],
                  "variable": [
                    {
                      "id": "e208846e-9b9c-4e43-8988-ddceca8c8777",
                      "key": "retention_policy_id",
                      "value": "982312",
                      "type": "string",
                      "description": "The ID of the retention policy."
                    }
                  ]
                },
                "description": "Updates a retention policy.\n\nhttps://developer.box.com/en/reference/put-retention-policies-id"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "54597406-bacb-4e8b-97a2-91edb9f76e4a",
              "name": "[409] Returns an error if a retention policy with the given name already exists",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"policy_name\": \"Some Policy Name\",\n  \"disposition_action\": \"permanently_delete\",\n  \"status\": \"retired\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/retention_policies/:retention_policy_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "retention_policies",
                    ":retention_policy_id"
                  ],
                  "variable": [
                    {
                      "id": "e208846e-9b9c-4e43-8988-ddceca8c8777",
                      "key": "retention_policy_id",
                      "value": "982312",
                      "type": "string",
                      "description": "The ID of the retention policy."
                    }
                  ]
                },
                "description": "Updates a retention policy.\n\nhttps://developer.box.com/en/reference/put-retention-policies-id"
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "e9bb60c0-510a-4cb4-98cc-0f6614d08804",
              "name": "[200] Returns the updated retention policy object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"policy_name\": \"Some Policy Name\",\n  \"disposition_action\": \"permanently_delete\",\n  \"status\": \"retired\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/retention_policies/:retention_policy_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "retention_policies",
                    ":retention_policy_id"
                  ],
                  "variable": [
                    {
                      "id": "e208846e-9b9c-4e43-8988-ddceca8c8777",
                      "key": "retention_policy_id",
                      "value": "982312",
                      "type": "string",
                      "description": "The ID of the retention policy."
                    }
                  ]
                },
                "description": "Updates a retention policy.\n\nhttps://developer.box.com/en/reference/put-retention-policies-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"12345\",\n  \"type\": \"file_version\",\n  \"policy_name\": \"Some Policy Name\",\n  \"retention_length\": \"0\",\n  \"disposition_action\": \"permanently_delete\",\n  \"policy_type\": \"finite\",\n  \"status\": \"active\",\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\"\n}"
            }
          ]
        }
      ],
      "_postman_id": "ee4d9f27-0cc5-49d4-afa1-b15c05c51b4b"
    },
    {
      "name": "Retention policy assignments",
      "item": [
        {
          "name": "List retention policy assignments",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c2a29286-5499-4437-a6e5-421bbf944cde",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "7ed9ddb8-278f-44d2-8e9e-c2b013e690e5",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/retention_policies/:retention_policy_id/assignments?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "retention_policies",
                ":retention_policy_id",
                "assignments"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "folder",
                  "description": "The type of the retention policy assignment to retrieve.",
                  "disabled": true
                },
                {
                  "key": "marker",
                  "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                  "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "1000",
                  "description": "The maximum number of items to return per page.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "8ad20f35-5ea2-4c27-a060-247711631952",
                  "key": "retention_policy_id",
                  "value": "982312",
                  "type": "string",
                  "description": "The ID of the retention policy."
                }
              ]
            },
            "description": "Returns a list of all retention policy assignments associated with a specified\n\nhttps://developer.box.com/en/reference/get-retention-policies-id-assignments"
          },
          "response": [
            {
              "id": "414ff0fa-4a5e-48b4-93a5-4b9fde3d7400",
              "name": "[400] Returns an error if an unknown `type` is specified.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/retention_policies/:retention_policy_id/assignments?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "retention_policies",
                    ":retention_policy_id",
                    "assignments"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "folder",
                      "description": "The type of the retention policy assignment to retrieve.",
                      "disabled": true
                    },
                    {
                      "key": "marker",
                      "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                      "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "8ad20f35-5ea2-4c27-a060-247711631952",
                      "key": "retention_policy_id",
                      "value": "982312",
                      "type": "string",
                      "description": "The ID of the retention policy."
                    }
                  ]
                },
                "description": "Returns a list of all retention policy assignments associated with a specified\n\nhttps://developer.box.com/en/reference/get-retention-policies-id-assignments"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "8310ea45-7dd4-4450-a02e-57c23cefb17a",
              "name": "[200] Returns a list of the retention policy assignments associated with the",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/retention_policies/:retention_policy_id/assignments?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "retention_policies",
                    ":retention_policy_id",
                    "assignments"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "folder",
                      "description": "The type of the retention policy assignment to retrieve.",
                      "disabled": true
                    },
                    {
                      "key": "marker",
                      "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                      "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "8ad20f35-5ea2-4c27-a060-247711631952",
                      "key": "retention_policy_id",
                      "value": "982312",
                      "type": "string",
                      "description": "The ID of the retention policy."
                    }
                  ]
                },
                "description": "Returns a list of all retention policy assignments associated with a specified\n\nhttps://developer.box.com/en/reference/get-retention-policies-id-assignments"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"limit\": 1000,\n  \"next_marker\": 3000,\n  \"prev_marker\": 1000,\n  \"entries\": [\n    {\n      \"id\": \"11446498\",\n      \"type\": \"retention_policy_assignment\",\n      \"retention_policy\": {\n        \"id\": \"12345\",\n        \"type\": \"file_version\",\n        \"policy_name\": \"Some Policy Name\",\n        \"retention_length\": \"0\",\n        \"disposition_action\": \"permanently_delete\"\n      },\n      \"assigned_to\": {\n        \"id\": \"11446498\"\n      },\n      \"assigned_by\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      },\n      \"assigned_at\": \"2012-12-12T10:53:43-08:00\"\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "Get retention policy assignment",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "bc2e3417-f9f6-42d2-a133-b8a6adbe0d61",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "046816b0-1345-4658-b173-97f4c2af94c0",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/retention_policy_assignments/:retention_policy_assignment_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "retention_policy_assignments",
                ":retention_policy_assignment_id"
              ],
              "variable": [
                {
                  "id": "e5ebb539-7f2b-4492-8442-80ecb3b0ca3e",
                  "key": "retention_policy_assignment_id",
                  "value": "1233123",
                  "type": "string",
                  "description": "The ID of the retention policy assignment."
                }
              ]
            },
            "description": "Retrieves a retention policy assignment\n\nhttps://developer.box.com/en/reference/get-retention-policy-assignments-id"
          },
          "response": [
            {
              "id": "bd937517-9538-4b9c-b2b1-4883a80c9652",
              "name": "[200] Returns the retention policy assignment object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/retention_policy_assignments/:retention_policy_assignment_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "retention_policy_assignments",
                    ":retention_policy_assignment_id"
                  ],
                  "variable": [
                    {
                      "id": "e5ebb539-7f2b-4492-8442-80ecb3b0ca3e",
                      "key": "retention_policy_assignment_id",
                      "value": "1233123",
                      "type": "string",
                      "description": "The ID of the retention policy assignment."
                    }
                  ]
                },
                "description": "Retrieves a retention policy assignment\n\nhttps://developer.box.com/en/reference/get-retention-policy-assignments-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"retention_policy_assignment\",\n  \"retention_policy\": {\n    \"id\": \"12345\",\n    \"type\": \"file_version\",\n    \"policy_name\": \"Some Policy Name\",\n    \"retention_length\": \"0\",\n    \"disposition_action\": \"permanently_delete\"\n  },\n  \"assigned_to\": {\n    \"id\": \"11446498\"\n  },\n  \"assigned_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"assigned_at\": \"2012-12-12T10:53:43-08:00\"\n}"
            }
          ]
        },
        {
          "name": "Assign retention policy",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "9c631ab9-ab30-4df1-9e7c-c2e99296b33d",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "8d3f0a78-13c1-458e-97bc-fc6e6c917990",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"policy_id\": \"173463\",\n  \"assign_to\": {\n    \"type\": \"folder\",\n    \"id\": \"6564564\"\n  }\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "https://{{api.box.com}}/2.0/retention_policy_assignments",
            "description": "Assigns a retention policy to an item.\n\nhttps://developer.box.com/en/reference/post-retention-policy-assignments"
          },
          "response": [
            {
              "id": "1b4e5984-39e9-4956-ab0e-8c5d6bf977a7",
              "name": "[409] Returns an error if a retention policy of equal or greater length has",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"policy_id\": \"173463\",\n  \"assign_to\": {\n    \"type\": \"folder\",\n    \"id\": \"6564564\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/retention_policy_assignments",
                "description": "Assigns a retention policy to an item.\n\nhttps://developer.box.com/en/reference/post-retention-policy-assignments"
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "4ebccc84-6ef4-4bdb-8639-5cb138c8c6a6",
              "name": "[400] Returns an error if an `id` is specified while assigning a the",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"policy_id\": \"173463\",\n  \"assign_to\": {\n    \"type\": \"folder\",\n    \"id\": \"6564564\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/retention_policy_assignments",
                "description": "Assigns a retention policy to an item.\n\nhttps://developer.box.com/en/reference/post-retention-policy-assignments"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "b9dc6257-f421-4b2e-9dd3-e97ddd9be2fa",
              "name": "[404] Returns an error if no retention policy with the given `policy_id` exists.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"policy_id\": \"173463\",\n  \"assign_to\": {\n    \"type\": \"folder\",\n    \"id\": \"6564564\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/retention_policy_assignments",
                "description": "Assigns a retention policy to an item.\n\nhttps://developer.box.com/en/reference/post-retention-policy-assignments"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "f92dc962-1626-447e-8eda-f5366b608d29",
              "name": "[201] Returns a new retention policy assignment object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"policy_id\": \"173463\",\n  \"assign_to\": {\n    \"type\": \"folder\",\n    \"id\": \"6564564\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/retention_policy_assignments",
                "description": "Assigns a retention policy to an item.\n\nhttps://developer.box.com/en/reference/post-retention-policy-assignments"
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"retention_policy_assignment\",\n  \"retention_policy\": {\n    \"id\": \"12345\",\n    \"type\": \"file_version\",\n    \"policy_name\": \"Some Policy Name\",\n    \"retention_length\": \"0\",\n    \"disposition_action\": \"permanently_delete\"\n  },\n  \"assigned_to\": {\n    \"id\": \"11446498\"\n  },\n  \"assigned_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"assigned_at\": \"2012-12-12T10:53:43-08:00\"\n}"
            }
          ]
        }
      ],
      "_postman_id": "66e6106e-6a5c-4f5a-aa38-fff482205b2c"
    },
    {
      "name": "Search",
      "item": [
        {
          "name": "Search for content",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2bcee37a-7f32-49bb-9c55-406da56e7ab9",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "dc421a2a-33df-4e9e-928f-a61bf3e86b52",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/search?query=sales",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "search"
              ],
              "query": [
                {
                  "key": "query",
                  "value": "sales",
                  "description": "The string to search for. This query is matched against item names,\ndescriptions, text content of files, and various other fields of\nthe different item types."
                },
                {
                  "key": "scope",
                  "value": "user_content",
                  "description": "Limits search results to a user scope.\n\nDefaults to `user_content` which limits the search to content\navailable to the current user\n\nSetting this to `enterprise_content` widens the search to content\navailable to the entire enterprise. To enable this scope for an\nadministrator, please reach out to support.",
                  "disabled": true
                },
                {
                  "key": "file_extensions",
                  "value": "pdf,png,gif",
                  "description": "Limits search results to a comma-separated list of\nfile extensions.",
                  "disabled": true
                },
                {
                  "key": "created_at_range",
                  "value": "2014-05-15T13:35:01-07:00,2014-05-17T13:35:01-07:00",
                  "description": "Limits search results to items created within\na given date range.\n\nDate ranges are defined as comma separated RFC3339\ntimestamps.\n\nIf the the start date is omitted (`,2014-05-17T13:35:01-07:00`)\nthe earliest known date will be used as the start date instead.\n\nIf the end date is omitted (`2014-05-15T13:35:01-07:00,`) the\ncurrent date will be used as the end date instead.",
                  "disabled": true
                },
                {
                  "key": "updated_at_range",
                  "value": "2014-05-15T13:35:01-07:00,2014-05-17T13:35:01-07:00",
                  "description": "Limits search results to items updated within\na given date range.\n\nDate ranges are defined as comma separated RFC3339\ntimestamps.\n\nIf the start date is omitted (`,2014-05-17T13:35:01-07:00`)\nthe earliest known date will be used as the start date instead.\n\nIf the end date is omitted (`2014-05-15T13:35:01-07:00,`) the\ncurrent date will be used as the end date instead.",
                  "disabled": true
                },
                {
                  "key": "size_range",
                  "value": "1000000,5000000",
                  "description": "Limits search results to items within a given file size\nrange.\n\nFile size ranges are defined as comma separated byte sizes.\n\nThe upper and lower bound can be omitted to create open ranges.",
                  "disabled": true
                },
                {
                  "key": "owner_user_ids",
                  "value": "123422,23532,3241212",
                  "description": "Limits search results to items owned\nby the given list of owners.\n\nOwners are defined as a comma separated list of user IDs.",
                  "disabled": true
                },
                {
                  "key": "ancestor_folder_ids",
                  "value": "4535234,234123235,2654345",
                  "description": "Limits search results to items within the given\nlist of folders.\n\nFolders are defined as a comma separated lists\nof folder IDs.\n\nSearch results will also include items within subfolders.",
                  "disabled": true
                },
                {
                  "key": "content_types",
                  "value": "[\"name\",\"description\"]",
                  "description": "Limits search results to items with the given\ncontent types.\n\nContent types are defined as a comma separated lists\nof Box recognized content types.",
                  "disabled": true
                },
                {
                  "key": "type",
                  "value": "file",
                  "description": "Limits search results to items of this type.",
                  "disabled": true
                },
                {
                  "key": "trash_content",
                  "value": "non_trashed_only",
                  "description": "Controls if search results include the trash.\n\nDefaults to `non_trashed_only`",
                  "disabled": true
                },
                {
                  "key": "mdfilters",
                  "value": "[{\"scope\":\"enterprise\",\"templateKey\":\"marketingCollateral\",\"filters\":{\"documentType\":\"datasheet\"}}]",
                  "description": "Limits search results to items that match the\nmetadata template name and content.",
                  "disabled": true
                },
                {
                  "key": "sort",
                  "value": "modified_at",
                  "description": "Defines the order in which results are returned. Defaults to `relevance`.\n\n* `relevance` (default) returns the results sorted by relevance to the\nquery search term.\n* `modified_at`  returns the results ordered in descending order by date\nat which the item was last modified.",
                  "disabled": true
                },
                {
                  "key": "direction",
                  "value": "ASC",
                  "description": "Defines the direction in which search results are ordered. Default value\nis `DESC`.\n\nWhen results are sorted by `relevance` the ordering is forced to `DESC`,\nignoring the value of this parameter.",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "100",
                  "description": "The maximum number of items to return.",
                  "disabled": true
                },
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                },
                {
                  "key": "offset",
                  "value": "1000",
                  "description": "The offset of the item at which to begin the response.",
                  "disabled": true
                }
              ]
            },
            "description": "Searches for items that are available to the user or an entire enterprise.\n\nhttps://developer.box.com/en/reference/get-search"
          },
          "response": [
            {
              "id": "f8860ece-7aaf-48f4-a24b-ba583446221f",
              "name": "[200] Returns a collection of search results. If there are no matching",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/search?query=sales",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "search"
                  ],
                  "query": [
                    {
                      "key": "query",
                      "value": "sales",
                      "description": "The string to search for. This query is matched against item names,\ndescriptions, text content of files, and various other fields of\nthe different item types."
                    },
                    {
                      "key": "scope",
                      "value": "user_content",
                      "description": "Limits search results to a user scope.\n\nDefaults to `user_content` which limits the search to content\navailable to the current user\n\nSetting this to `enterprise_content` widens the search to content\navailable to the entire enterprise. To enable this scope for an\nadministrator, please reach out to support.",
                      "disabled": true
                    },
                    {
                      "key": "file_extensions",
                      "value": "pdf,png,gif",
                      "description": "Limits search results to a comma-separated list of\nfile extensions.",
                      "disabled": true
                    },
                    {
                      "key": "created_at_range",
                      "value": "2014-05-15T13:35:01-07:00,2014-05-17T13:35:01-07:00",
                      "description": "Limits search results to items created within\na given date range.\n\nDate ranges are defined as comma separated RFC3339\ntimestamps.\n\nIf the the start date is omitted (`,2014-05-17T13:35:01-07:00`)\nthe earliest known date will be used as the start date instead.\n\nIf the end date is omitted (`2014-05-15T13:35:01-07:00,`) the\ncurrent date will be used as the end date instead.",
                      "disabled": true
                    },
                    {
                      "key": "updated_at_range",
                      "value": "2014-05-15T13:35:01-07:00,2014-05-17T13:35:01-07:00",
                      "description": "Limits search results to items updated within\na given date range.\n\nDate ranges are defined as comma separated RFC3339\ntimestamps.\n\nIf the start date is omitted (`,2014-05-17T13:35:01-07:00`)\nthe earliest known date will be used as the start date instead.\n\nIf the end date is omitted (`2014-05-15T13:35:01-07:00,`) the\ncurrent date will be used as the end date instead.",
                      "disabled": true
                    },
                    {
                      "key": "size_range",
                      "value": "1000000,5000000",
                      "description": "Limits search results to items within a given file size\nrange.\n\nFile size ranges are defined as comma separated byte sizes.\n\nThe upper and lower bound can be omitted to create open ranges.",
                      "disabled": true
                    },
                    {
                      "key": "owner_user_ids",
                      "value": "123422,23532,3241212",
                      "description": "Limits search results to items owned\nby the given list of owners.\n\nOwners are defined as a comma separated list of user IDs.",
                      "disabled": true
                    },
                    {
                      "key": "ancestor_folder_ids",
                      "value": "4535234,234123235,2654345",
                      "description": "Limits search results to items within the given\nlist of folders.\n\nFolders are defined as a comma separated lists\nof folder IDs.\n\nSearch results will also include items within subfolders.",
                      "disabled": true
                    },
                    {
                      "key": "content_types",
                      "value": "[\"name\",\"description\"]",
                      "description": "Limits search results to items with the given\ncontent types.\n\nContent types are defined as a comma separated lists\nof Box recognized content types.",
                      "disabled": true
                    },
                    {
                      "key": "type",
                      "value": "file",
                      "description": "Limits search results to items of this type.",
                      "disabled": true
                    },
                    {
                      "key": "trash_content",
                      "value": "non_trashed_only",
                      "description": "Controls if search results include the trash.\n\nDefaults to `non_trashed_only`",
                      "disabled": true
                    },
                    {
                      "key": "mdfilters",
                      "value": "[{\"scope\":\"enterprise\",\"templateKey\":\"marketingCollateral\",\"filters\":{\"documentType\":\"datasheet\"}}]",
                      "description": "Limits search results to items that match the\nmetadata template name and content.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "modified_at",
                      "description": "Defines the order in which results are returned. Defaults to `relevance`.\n\n* `relevance` (default) returns the results sorted by relevance to the\nquery search term.\n* `modified_at`  returns the results ordered in descending order by date\nat which the item was last modified.",
                      "disabled": true
                    },
                    {
                      "key": "direction",
                      "value": "ASC",
                      "description": "Defines the direction in which search results are ordered. Default value\nis `DESC`.\n\nWhen results are sorted by `relevance` the ordering is forced to `DESC`,\nignoring the value of this parameter.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "100",
                      "description": "The maximum number of items to return.",
                      "disabled": true
                    },
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    },
                    {
                      "key": "offset",
                      "value": "1000",
                      "description": "The offset of the item at which to begin the response.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Searches for items that are available to the user or an entire enterprise.\n\nhttps://developer.box.com/en/reference/get-search"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"total_count\": 5000,\n  \"limit\": 1000,\n  \"offset\": 2000,\n  \"order\": [\n    {\n      \"by\": \"type\",\n      \"direction\": \"ASC\"\n    }\n  ],\n  \"entries\": {\n    \"id\": \"12345\",\n    \"etag\": \"1\",\n    \"type\": \"file\",\n    \"sequence_id\": \"3\",\n    \"name\": \"Contract.pdf\"\n  }\n}"
            }
          ]
        }
      ],
      "_postman_id": "f5b381a7-e475-4509-b45d-a88b7fff2c12"
    },
    {
      "name": "Shared links",
      "item": [
        {
          "name": "Find item for shared link",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "855cf8f3-2ffb-4afb-a396-e801e33a52d6",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "545aeb78-0817-4538-b55f-adc303af095f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [
              {
                "key": "If-None-Match",
                "value": "1",
                "description": "Ensures an item is only returned if it has changed.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `304 Not Modified` if the item has not\nchanged since.",
                "disabled": true
              },
              {
                "key": "BoxApi",
                "value": "shared_link=https://cloud.box.com/shared/static/gjasdasjhasd&shared_link_password=letmein",
                "description": "A header containing the shared link and optional password for the\nshared link.\n\nThe format for this header is as follows.\n\n`shared_link=[link]&shared_link_password=[password]`"
              }
            ],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/shared_items?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "shared_items"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ]
            },
            "description": "Return the file or folder represented by a shared link.\n\nhttps://developer.box.com/en/reference/get-shared-items"
          },
          "response": [
            {
              "id": "515f997b-b399-4505-9408-22b60c2180b5",
              "name": "[304] Returns an empty response when the `If-None-Match` header matches",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "If-None-Match",
                    "value": "1",
                    "description": "Ensures an item is only returned if it has changed.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `304 Not Modified` if the item has not\nchanged since.",
                    "disabled": true
                  },
                  {
                    "key": "BoxApi",
                    "value": "shared_link=https://cloud.box.com/shared/static/gjasdasjhasd&shared_link_password=letmein",
                    "description": "A header containing the shared link and optional password for the\nshared link.\n\nThe format for this header is as follows.\n\n`shared_link=[link]&shared_link_password=[password]`"
                  }
                ],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/shared_items?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "shared_items"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Return the file or folder represented by a shared link.\n\nhttps://developer.box.com/en/reference/get-shared-items"
              },
              "status": "Not Modified",
              "code": 304,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "d4520180-7218-48d8-8cd3-c39a818cdf76",
              "name": "[200] Returns a full file or folder object if the shared link is valid and",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [
                  {
                    "key": "If-None-Match",
                    "value": "1",
                    "description": "Ensures an item is only returned if it has changed.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `304 Not Modified` if the item has not\nchanged since.",
                    "disabled": true
                  },
                  {
                    "key": "BoxApi",
                    "value": "shared_link=https://cloud.box.com/shared/static/gjasdasjhasd&shared_link_password=letmein",
                    "description": "A header containing the shared link and optional password for the\nshared link.\n\nThe format for this header is as follows.\n\n`shared_link=[link]&shared_link_password=[password]`"
                  }
                ],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/shared_items?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "shared_items"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Return the file or folder represented by a shared link.\n\nhttps://developer.box.com/en/reference/get-shared-items"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"file\",\n  \"sequence_id\": \"3\",\n  \"etag\": \"1\",\n  \"name\": \"Pictures\"\n}"
            }
          ]
        }
      ],
      "_postman_id": "53b37c66-d71a-4dd2-81d5-a0592b5ab11b"
    },
    {
      "name": "Skills",
      "item": [
        {
          "name": "Update skill invocation",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "bf8d3f78-ed55-4a87-b0d7-32a4bd27ef51",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "9f6ebdb6-8b6e-4a3a-bf93-743155e2ccbd",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"success\",\n  \"metadata\": {\n    \"cards\": [\n      {\n        \"type\": \"skill_card\",\n        \"created_at\": \"2012-12-12T10:53:43-08:00\",\n        \"skill_card_type\": \"status\",\n        \"skill\": {\n          \"type\": \"service\",\n          \"id\": \"43342423234\"\n        },\n        \"skill_card_title\": {\n          \"code\": \"my_transcripts\",\n          \"message\": \"My Transcripts\"\n        },\n        \"invocation\": {\n          \"type\": \"skill_invocation\",\n          \"id\": \"33243242\"\n        },\n        \"status\": {\n          \"code\": \"skills_pending_status\",\n          \"message\": \"We're preparing to process your file. Please hold on!\"\n        },\n        \"entries\": [\n          {\n            \"type\": \"text\",\n            \"text\": \"keyword1\"\n          }\n        ],\n        \"duration\": 1000\n      }\n    ]\n  },\n  \"file\": {\n    \"type\": \"file\",\n    \"id\": \"3243244\"\n  },\n  \"file_version\": {\n    \"type\": \"file_version\",\n    \"id\": \"3\"\n  }\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/skill_invocations/:skill_invocation_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "skill_invocations",
                ":skill_invocation_id"
              ],
              "variable": [
                {
                  "id": "4dcde711-0f47-4580-a6ed-20f4f09ed13c",
                  "key": "skill_invocation_id",
                  "value": "33243242",
                  "type": "string",
                  "description": "The ID of the skill invocation."
                }
              ]
            },
            "description": "Updates the status, usage and response metadata of a\n\nhttps://developer.box.com/en/reference/put-skill-invocations-id"
          },
          "response": [
            {
              "id": "af245ada-f74a-4fea-9c50-1c554c78880d",
              "name": "[200] Returns an empty response.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"status\": \"success\",\n  \"metadata\": {\n    \"cards\": [\n      {\n        \"type\": \"skill_card\",\n        \"created_at\": \"2012-12-12T10:53:43-08:00\",\n        \"skill_card_type\": \"status\",\n        \"skill\": {\n          \"type\": \"service\",\n          \"id\": \"43342423234\"\n        },\n        \"skill_card_title\": {\n          \"code\": \"my_transcripts\",\n          \"message\": \"My Transcripts\"\n        },\n        \"invocation\": {\n          \"type\": \"skill_invocation\",\n          \"id\": \"33243242\"\n        },\n        \"status\": {\n          \"code\": \"skills_pending_status\",\n          \"message\": \"We're preparing to process your file. Please hold on!\"\n        },\n        \"entries\": [\n          {\n            \"type\": \"text\",\n            \"text\": \"keyword1\"\n          }\n        ],\n        \"duration\": 1000\n      }\n    ]\n  },\n  \"file\": {\n    \"type\": \"file\",\n    \"id\": \"3243244\"\n  },\n  \"file_version\": {\n    \"type\": \"file_version\",\n    \"id\": \"3\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/skill_invocations/:skill_invocation_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "skill_invocations",
                    ":skill_invocation_id"
                  ],
                  "variable": [
                    {
                      "id": "4dcde711-0f47-4580-a6ed-20f4f09ed13c",
                      "key": "skill_invocation_id",
                      "value": "33243242",
                      "type": "string",
                      "description": "The ID of the skill invocation."
                    }
                  ]
                },
                "description": "Updates the status, usage and response metadata of a\n\nhttps://developer.box.com/en/reference/put-skill-invocations-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        }
      ],
      "_postman_id": "1c0ce8b8-4244-46d7-b9d7-2d15d6d13ffc"
    },
    {
      "name": "Storage policies",
      "item": [
        {
          "name": "List storage policies",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "478628dc-1260-4da8-85ba-6d3e0066db5b",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "ec29f0f9-bcaa-447e-9e1c-cf16601f0abd",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/storage_policies?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "storage_policies"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                },
                {
                  "key": "marker",
                  "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                  "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "1000",
                  "description": "The maximum number of items to return per page.",
                  "disabled": true
                }
              ]
            },
            "description": "Fetches all the storage policies in the enterprise.\n\nhttps://developer.box.com/en/reference/get-storage-policies"
          },
          "response": [
            {
              "id": "3585509d-336f-4083-b979-361324c0351d",
              "name": "[200] Returns a collection of storage policies.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/storage_policies?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "storage_policies"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    },
                    {
                      "key": "marker",
                      "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                      "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Fetches all the storage policies in the enterprise.\n\nhttps://developer.box.com/en/reference/get-storage-policies"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"limit\": 1000,\n  \"next_marker\": 3000,\n  \"prev_marker\": 1000,\n  \"entries\": [\n    {\n      \"id\": \"11446498\",\n      \"type\": \"storage_policy\",\n      \"name\": \"Montreal / Dublin\"\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "Get storage policy",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b30d0e99-44a4-4131-8f37-116b54a4fbed",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "8d484dce-2b2d-4224-b682-a4ad96fa6e8f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/storage_policies/:storage_policy_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "storage_policies",
                ":storage_policy_id"
              ],
              "variable": [
                {
                  "id": "6c448002-2d0f-4c3b-983a-5d4c2f879e96",
                  "key": "storage_policy_id",
                  "value": "34342",
                  "type": "string",
                  "description": "The ID of the storage policy."
                }
              ]
            },
            "description": "Fetches a specific storage policy.\n\nhttps://developer.box.com/en/reference/get-storage-policies-id"
          },
          "response": [
            {
              "id": "4e950d25-b4a5-433e-88dc-18c7ae373187",
              "name": "[200] Returns a storage policy object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/storage_policies/:storage_policy_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "storage_policies",
                    ":storage_policy_id"
                  ],
                  "variable": [
                    {
                      "id": "6c448002-2d0f-4c3b-983a-5d4c2f879e96",
                      "key": "storage_policy_id",
                      "value": "34342",
                      "type": "string",
                      "description": "The ID of the storage policy."
                    }
                  ]
                },
                "description": "Fetches a specific storage policy.\n\nhttps://developer.box.com/en/reference/get-storage-policies-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"storage_policy\",\n  \"name\": \"Montreal / Dublin\"\n}"
            }
          ]
        }
      ],
      "_postman_id": "889bf229-757f-41df-aa46-bcf8f1699cbd"
    },
    {
      "name": "Storage policy assignments",
      "item": [
        {
          "name": "List storage policy assignments",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3b8e8663-71d5-4c19-bd99-4ad1110cdc78",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "de936c94-fae1-42fa-8ded-2dd2ffe3ff18",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/storage_policy_assignments?resolved_for_type=user&resolved_for_id=984322",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "storage_policy_assignments"
              ],
              "query": [
                {
                  "key": "marker",
                  "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                  "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                  "disabled": true
                },
                {
                  "key": "resolved_for_type",
                  "value": "user",
                  "description": "The target type to return assignments for"
                },
                {
                  "key": "resolved_for_id",
                  "value": "984322",
                  "description": "The ID of the user or enterprise to return assignments for"
                }
              ]
            },
            "description": "Fetches all the storage policy assignment for an enterprise or user.\n\nhttps://developer.box.com/en/reference/get-storage-policy-assignments"
          },
          "response": [
            {
              "id": "ca61af3f-b048-4483-bd53-dfd29ca1b833",
              "name": "[200] Returns a collection of storage policies for",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/storage_policy_assignments?resolved_for_type=user&resolved_for_id=984322",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "storage_policy_assignments"
                  ],
                  "query": [
                    {
                      "key": "marker",
                      "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                      "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                      "disabled": true
                    },
                    {
                      "key": "resolved_for_type",
                      "value": "user",
                      "description": "The target type to return assignments for"
                    },
                    {
                      "key": "resolved_for_id",
                      "value": "984322",
                      "description": "The ID of the user or enterprise to return assignments for"
                    }
                  ]
                },
                "description": "Fetches all the storage policy assignment for an enterprise or user.\n\nhttps://developer.box.com/en/reference/get-storage-policy-assignments"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"limit\": 1000,\n  \"next_marker\": 3000,\n  \"prev_marker\": 1000,\n  \"entries\": [\n    {\n      \"storage_policy\": {\n        \"id\": \"11446498\",\n        \"type\": \"storage_policy\"\n      },\n      \"assigned_to\": {\n        \"id\": \"11446498\"\n      }\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "Get storage policy assignment",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b9a9adb8-0af1-482c-b72c-64040afe2c69",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "b2236143-7744-42f6-af42-7878d09fddf6",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/storage_policy_assignments/:storage_policy_assignment_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "storage_policy_assignments",
                ":storage_policy_assignment_id"
              ],
              "variable": [
                {
                  "id": "e7b22030-f921-47c6-9c1b-4d8d97644d30",
                  "key": "storage_policy_assignment_id",
                  "value": "932483",
                  "type": "string",
                  "description": "The ID of the storage policy assignment."
                }
              ]
            },
            "description": "Fetches a specific storage policy assignment.\n\nhttps://developer.box.com/en/reference/get-storage-policy-assignments-id"
          },
          "response": [
            {
              "id": "ce10a60c-b330-400a-9e45-6f6dd76c71c0",
              "name": "[200] Returns a storage policy assignment object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/storage_policy_assignments/:storage_policy_assignment_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "storage_policy_assignments",
                    ":storage_policy_assignment_id"
                  ],
                  "variable": [
                    {
                      "id": "e7b22030-f921-47c6-9c1b-4d8d97644d30",
                      "key": "storage_policy_assignment_id",
                      "value": "932483",
                      "type": "string",
                      "description": "The ID of the storage policy assignment."
                    }
                  ]
                },
                "description": "Fetches a specific storage policy assignment.\n\nhttps://developer.box.com/en/reference/get-storage-policy-assignments-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"storage_policy\": {\n    \"id\": \"11446498\",\n    \"type\": \"storage_policy\"\n  },\n  \"assigned_to\": {\n    \"id\": \"11446498\"\n  }\n}"
            }
          ]
        },
        {
          "name": "Assign storage policy",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "46cea994-3f11-412e-9d0d-307cdc0f7724",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "c8f6c4a6-a8db-4a31-bcbb-4fd92f8e721d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"storage_policy\": {\n    \"type\": \"storage_policy\",\n    \"id\": \"1434325\"\n  },\n  \"assigned_to\": {\n    \"type\": \"user\",\n    \"id\": \"9987987\"\n  }\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "https://{{api.box.com}}/2.0/storage_policy_assignments",
            "description": "Creates a storage policy assignment for an enterprise or user.\n\nhttps://developer.box.com/en/reference/post-storage-policy-assignments"
          },
          "response": [
            {
              "id": "90a3fc71-7505-4d44-bf9a-5815d1d4205f",
              "name": "[200] Returns the new storage policy assignment created.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"storage_policy\": {\n    \"type\": \"storage_policy\",\n    \"id\": \"1434325\"\n  },\n  \"assigned_to\": {\n    \"type\": \"user\",\n    \"id\": \"9987987\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/storage_policy_assignments",
                "description": "Creates a storage policy assignment for an enterprise or user.\n\nhttps://developer.box.com/en/reference/post-storage-policy-assignments"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"storage_policy\": {\n    \"id\": \"11446498\",\n    \"type\": \"storage_policy\"\n  },\n  \"assigned_to\": {\n    \"id\": \"11446498\"\n  }\n}"
            }
          ]
        },
        {
          "name": "Update storage policy assignment",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "a91eef10-5931-41d1-9707-33279e26ad64",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "c085ebd8-5352-4af6-833d-f9c154093f1d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"storage_policy\": {\n    \"type\": \"storage_policy\",\n    \"id\": \"1434325\"\n  }\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/storage_policy_assignments/:storage_policy_assignment_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "storage_policy_assignments",
                ":storage_policy_assignment_id"
              ],
              "variable": [
                {
                  "id": "765d8ae3-07b5-4107-a215-cdc54ce83b43",
                  "key": "storage_policy_assignment_id",
                  "value": "932483",
                  "type": "string",
                  "description": "The ID of the storage policy assignment."
                }
              ]
            },
            "description": "Updates a specific storage policy assignment.\n\nhttps://developer.box.com/en/reference/put-storage-policy-assignments-id"
          },
          "response": [
            {
              "id": "636c530d-9a0a-4879-b5d7-b9ec537c6661",
              "name": "[200] Returns an updated storage policy assignment object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"storage_policy\": {\n    \"type\": \"storage_policy\",\n    \"id\": \"1434325\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/storage_policy_assignments/:storage_policy_assignment_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "storage_policy_assignments",
                    ":storage_policy_assignment_id"
                  ],
                  "variable": [
                    {
                      "id": "765d8ae3-07b5-4107-a215-cdc54ce83b43",
                      "key": "storage_policy_assignment_id",
                      "value": "932483",
                      "type": "string",
                      "description": "The ID of the storage policy assignment."
                    }
                  ]
                },
                "description": "Updates a specific storage policy assignment.\n\nhttps://developer.box.com/en/reference/put-storage-policy-assignments-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"storage_policy\": {\n    \"id\": \"11446498\",\n    \"type\": \"storage_policy\"\n  },\n  \"assigned_to\": {\n    \"id\": \"11446498\"\n  }\n}"
            }
          ]
        },
        {
          "name": "Unassign storage policy",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b2ac88e6-18ef-4dbd-a1e8-3a1dd34c74cc",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "4e7237f6-8d80-4700-9e21-36d3502cca8d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/storage_policy_assignments/:storage_policy_assignment_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "storage_policy_assignments",
                ":storage_policy_assignment_id"
              ],
              "variable": [
                {
                  "id": "96cbdce0-e962-47ab-a705-f896cbaa1af4",
                  "key": "storage_policy_assignment_id",
                  "value": "932483",
                  "type": "string",
                  "description": "The ID of the storage policy assignment."
                }
              ]
            },
            "description": "Delete a storage policy assignment.\n\nhttps://developer.box.com/en/reference/delete-storage-policy-assignments-id"
          },
          "response": [
            {
              "id": "a2beb14c-30b6-4552-bc9b-776440f20fd9",
              "name": "[204] Returns an empty response when the storage policy",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/storage_policy_assignments/:storage_policy_assignment_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "storage_policy_assignments",
                    ":storage_policy_assignment_id"
                  ],
                  "variable": [
                    {
                      "id": "96cbdce0-e962-47ab-a705-f896cbaa1af4",
                      "key": "storage_policy_assignment_id",
                      "value": "932483",
                      "type": "string",
                      "description": "The ID of the storage policy assignment."
                    }
                  ]
                },
                "description": "Delete a storage policy assignment.\n\nhttps://developer.box.com/en/reference/delete-storage-policy-assignments-id"
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        }
      ],
      "_postman_id": "98bc9000-cded-41de-b6d9-18c1c26d7c16"
    },
    {
      "name": "Task assignments",
      "item": [
        {
          "name": "List task assignments",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b50c651b-5fca-4eb5-8256-9b6ada614f7b",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "5c7926d8-ceca-43fe-a56e-de2fb2eb5ecd",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/tasks/:task_id/assignments",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "tasks",
                ":task_id",
                "assignments"
              ],
              "variable": [
                {
                  "id": "389372ad-3090-4171-9577-e66313336e15",
                  "key": "task_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The ID of the task."
                }
              ]
            },
            "description": "Lists all of the assignments for a given task.\n\nhttps://developer.box.com/en/reference/get-tasks-id-assignments"
          },
          "response": [
            {
              "id": "3a30a3ce-ce22-4b22-8cea-1470ecdfd543",
              "name": "[404] Returns an error when the task could not be found or the user does not",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/tasks/:task_id/assignments",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "tasks",
                    ":task_id",
                    "assignments"
                  ],
                  "variable": [
                    {
                      "id": "389372ad-3090-4171-9577-e66313336e15",
                      "key": "task_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the task."
                    }
                  ]
                },
                "description": "Lists all of the assignments for a given task.\n\nhttps://developer.box.com/en/reference/get-tasks-id-assignments"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "478df3f2-0889-41eb-9dce-bb7f76b23e6e",
              "name": "[200] Returns a collection of task assignment defining what task on",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/tasks/:task_id/assignments",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "tasks",
                    ":task_id",
                    "assignments"
                  ],
                  "variable": [
                    {
                      "id": "389372ad-3090-4171-9577-e66313336e15",
                      "key": "task_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the task."
                    }
                  ]
                },
                "description": "Lists all of the assignments for a given task.\n\nhttps://developer.box.com/en/reference/get-tasks-id-assignments"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"total_count\": 100,\n  \"entries\": [\n    {\n      \"id\": \"11446498\",\n      \"type\": \"task_assignment\",\n      \"item\": {\n        \"id\": \"12345\",\n        \"etag\": \"1\",\n        \"type\": \"file\",\n        \"sequence_id\": \"3\",\n        \"name\": \"Contract.pdf\"\n      },\n      \"assigned_to\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      },\n      \"message\": \"Please review\",\n      \"completed_at\": \"2012-12-12T10:53:43-08:00\",\n      \"assigned_at\": \"2012-12-12T10:53:43-08:00\",\n      \"reminded_at\": \"2012-12-12T10:53:43-08:00\",\n      \"resolution_state\": \"incomplete\",\n      \"assigned_by\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      }\n    }\n  ]\n}"
            },
            {
              "id": "e3e0863e-d9ff-41f7-84b3-a34179fa7d8e",
              "name": "[500] Returns an error if the task assignment ID was omitted in",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/tasks/:task_id/assignments",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "tasks",
                    ":task_id",
                    "assignments"
                  ],
                  "variable": [
                    {
                      "id": "389372ad-3090-4171-9577-e66313336e15",
                      "key": "task_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the task."
                    }
                  ]
                },
                "description": "Lists all of the assignments for a given task.\n\nhttps://developer.box.com/en/reference/get-tasks-id-assignments"
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        },
        {
          "name": "Get task assignment",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b6fbcee9-1371-4df6-9550-6489f7db9e3c",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "4bb52596-fc4b-4e77-9c7b-a6ebf90bd672",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/task_assignments/:task_assignment_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "task_assignments",
                ":task_assignment_id"
              ],
              "variable": [
                {
                  "id": "09bfaee5-24ff-4993-8304-70e6b0e1690e",
                  "key": "task_assignment_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The ID of the task assignment."
                }
              ]
            },
            "description": "Retrieves information about a task assignment.\n\nhttps://developer.box.com/en/reference/get-task-assignments-id"
          },
          "response": [
            {
              "id": "4199b864-5450-401d-b937-a82de6f34be1",
              "name": "[200] Returns a task assignment, specifying who the task has been assigned to",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/task_assignments/:task_assignment_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "task_assignments",
                    ":task_assignment_id"
                  ],
                  "variable": [
                    {
                      "id": "09bfaee5-24ff-4993-8304-70e6b0e1690e",
                      "key": "task_assignment_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the task assignment."
                    }
                  ]
                },
                "description": "Retrieves information about a task assignment.\n\nhttps://developer.box.com/en/reference/get-task-assignments-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"task_assignment\",\n  \"item\": {\n    \"id\": \"12345\",\n    \"etag\": \"1\",\n    \"type\": \"file\",\n    \"sequence_id\": \"3\",\n    \"name\": \"Contract.pdf\"\n  },\n  \"assigned_to\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"message\": \"Please review\",\n  \"completed_at\": \"2012-12-12T10:53:43-08:00\",\n  \"assigned_at\": \"2012-12-12T10:53:43-08:00\",\n  \"reminded_at\": \"2012-12-12T10:53:43-08:00\",\n  \"resolution_state\": \"incomplete\",\n  \"assigned_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  }\n}"
            },
            {
              "id": "b19d7c71-ce8d-423c-8f25-945e45ccb751",
              "name": "[404] Returns an error when the task assignment could not be found or the user",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/task_assignments/:task_assignment_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "task_assignments",
                    ":task_assignment_id"
                  ],
                  "variable": [
                    {
                      "id": "09bfaee5-24ff-4993-8304-70e6b0e1690e",
                      "key": "task_assignment_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the task assignment."
                    }
                  ]
                },
                "description": "Retrieves information about a task assignment.\n\nhttps://developer.box.com/en/reference/get-task-assignments-id"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        },
        {
          "name": "Assign task",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8a9c170a-c2a3-4569-b8cb-b64c6f9fa755",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "560adac7-105f-404f-9e3f-2874048e5d2b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"task\": {\n    \"id\": \"11446498\",\n    \"type\": \"task\"\n  },\n  \"assign_to\": {\n    \"id\": \"3242343\",\n    \"login\": \"john@example.com\"\n  }\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "https://{{api.box.com}}/2.0/task_assignments",
            "description": "Assigns a task to a user.\n\nhttps://developer.box.com/en/reference/post-task-assignments"
          },
          "response": [
            {
              "id": "0591fd61-8305-443e-be7b-5f834c0b1ddc",
              "name": "[201] Returns a new task assignment object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"task\": {\n    \"id\": \"11446498\",\n    \"type\": \"task\"\n  },\n  \"assign_to\": {\n    \"id\": \"3242343\",\n    \"login\": \"john@example.com\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/task_assignments",
                "description": "Assigns a task to a user.\n\nhttps://developer.box.com/en/reference/post-task-assignments"
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"task_assignment\",\n  \"item\": {\n    \"id\": \"12345\",\n    \"etag\": \"1\",\n    \"type\": \"file\",\n    \"sequence_id\": \"3\",\n    \"name\": \"Contract.pdf\"\n  },\n  \"assigned_to\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"message\": \"Please review\",\n  \"completed_at\": \"2012-12-12T10:53:43-08:00\",\n  \"assigned_at\": \"2012-12-12T10:53:43-08:00\",\n  \"reminded_at\": \"2012-12-12T10:53:43-08:00\",\n  \"resolution_state\": \"incomplete\",\n  \"assigned_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  }\n}"
            },
            {
              "id": "10dea2f5-a7ba-492f-a88a-13cbd39e0a6a",
              "name": "[404] Returns an error when the task could not be found or the user does not",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"task\": {\n    \"id\": \"11446498\",\n    \"type\": \"task\"\n  },\n  \"assign_to\": {\n    \"id\": \"3242343\",\n    \"login\": \"john@example.com\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/task_assignments",
                "description": "Assigns a task to a user.\n\nhttps://developer.box.com/en/reference/post-task-assignments"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "779de1d3-d7d1-46b1-84e6-b2d9c81d3b1a",
              "name": "[500] Returns an error if any of the IDs for this request were not valid, or if",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"task\": {\n    \"id\": \"11446498\",\n    \"type\": \"task\"\n  },\n  \"assign_to\": {\n    \"id\": \"3242343\",\n    \"login\": \"john@example.com\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/task_assignments",
                "description": "Assigns a task to a user.\n\nhttps://developer.box.com/en/reference/post-task-assignments"
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "9242a09b-25ce-4e20-a604-5a96e35492af",
              "name": "[403] Returns an error if a change to a completed task is attempted",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"task\": {\n    \"id\": \"11446498\",\n    \"type\": \"task\"\n  },\n  \"assign_to\": {\n    \"id\": \"3242343\",\n    \"login\": \"john@example.com\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/task_assignments",
                "description": "Assigns a task to a user.\n\nhttps://developer.box.com/en/reference/post-task-assignments"
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        },
        {
          "name": "Update task assignment",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "cf6608b6-ebb3-479f-8d68-facc15ae67e1",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "ef7cb962-0f01-40eb-a79f-f6a9f867509a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"message\": \"Looks good to me\",\n  \"resolution_state\": \"completed\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/task_assignments/:task_assignment_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "task_assignments",
                ":task_assignment_id"
              ],
              "variable": [
                {
                  "id": "15233365-55a8-48ba-b961-1b8c30c644f1",
                  "key": "task_assignment_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The ID of the task assignment."
                }
              ]
            },
            "description": "Updates a task assignment. This endpoint can be\n\nhttps://developer.box.com/en/reference/put-task-assignments-id"
          },
          "response": [
            {
              "id": "75c9f389-ff85-4f39-a4d7-dbdf3683a33a",
              "name": "[200] Returns the updated task assignment object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Looks good to me\",\n  \"resolution_state\": \"completed\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/task_assignments/:task_assignment_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "task_assignments",
                    ":task_assignment_id"
                  ],
                  "variable": [
                    {
                      "id": "15233365-55a8-48ba-b961-1b8c30c644f1",
                      "key": "task_assignment_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the task assignment."
                    }
                  ]
                },
                "description": "Updates a task assignment. This endpoint can be\n\nhttps://developer.box.com/en/reference/put-task-assignments-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"task_assignment\",\n  \"item\": {\n    \"id\": \"12345\",\n    \"etag\": \"1\",\n    \"type\": \"file\",\n    \"sequence_id\": \"3\",\n    \"name\": \"Contract.pdf\"\n  },\n  \"assigned_to\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"message\": \"Please review\",\n  \"completed_at\": \"2012-12-12T10:53:43-08:00\",\n  \"assigned_at\": \"2012-12-12T10:53:43-08:00\",\n  \"reminded_at\": \"2012-12-12T10:53:43-08:00\",\n  \"resolution_state\": \"incomplete\",\n  \"assigned_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  }\n}"
            },
            {
              "id": "92bb4af1-4919-4ec6-884b-66bc92ed80af",
              "name": "[400] Returns an error if a resolution state is incompatible with the action",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Looks good to me\",\n  \"resolution_state\": \"completed\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/task_assignments/:task_assignment_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "task_assignments",
                    ":task_assignment_id"
                  ],
                  "variable": [
                    {
                      "id": "15233365-55a8-48ba-b961-1b8c30c644f1",
                      "key": "task_assignment_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the task assignment."
                    }
                  ]
                },
                "description": "Updates a task assignment. This endpoint can be\n\nhttps://developer.box.com/en/reference/put-task-assignments-id"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "af3337d5-144c-4228-8aed-7239d08be989",
              "name": "[404] Returns an error when the task assignment could not be found or the user",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"message\": \"Looks good to me\",\n  \"resolution_state\": \"completed\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/task_assignments/:task_assignment_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "task_assignments",
                    ":task_assignment_id"
                  ],
                  "variable": [
                    {
                      "id": "15233365-55a8-48ba-b961-1b8c30c644f1",
                      "key": "task_assignment_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the task assignment."
                    }
                  ]
                },
                "description": "Updates a task assignment. This endpoint can be\n\nhttps://developer.box.com/en/reference/put-task-assignments-id"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        },
        {
          "name": "Unassign task",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f5a1c4fb-fa27-44e6-867e-43ed3e2316f1",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "2d2a21e8-8ad6-4d2b-b970-7729dbf4200e",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/task_assignments/:task_assignment_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "task_assignments",
                ":task_assignment_id"
              ],
              "variable": [
                {
                  "id": "c84f7f14-e73a-4bf9-8d75-66d94ad2178d",
                  "key": "task_assignment_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The ID of the task assignment."
                }
              ]
            },
            "description": "Deletes a specific task assignment.\n\nhttps://developer.box.com/en/reference/delete-task-assignments-id"
          },
          "response": [
            {
              "id": "32268f0a-9a3e-4108-ba8a-6004a7a5afbd",
              "name": "[204] Returns an empty response when the task",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/task_assignments/:task_assignment_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "task_assignments",
                    ":task_assignment_id"
                  ],
                  "variable": [
                    {
                      "id": "c84f7f14-e73a-4bf9-8d75-66d94ad2178d",
                      "key": "task_assignment_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the task assignment."
                    }
                  ]
                },
                "description": "Deletes a specific task assignment.\n\nhttps://developer.box.com/en/reference/delete-task-assignments-id"
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "a568305c-64e7-499b-a188-587e07cc5257",
              "name": "[404] Returns an error if the task assignment for the given ID does not exist",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/task_assignments/:task_assignment_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "task_assignments",
                    ":task_assignment_id"
                  ],
                  "variable": [
                    {
                      "id": "c84f7f14-e73a-4bf9-8d75-66d94ad2178d",
                      "key": "task_assignment_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the task assignment."
                    }
                  ]
                },
                "description": "Deletes a specific task assignment.\n\nhttps://developer.box.com/en/reference/delete-task-assignments-id"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        }
      ],
      "_postman_id": "e4a724a2-a639-4cf5-90b2-fb6d4595e5d9"
    },
    {
      "name": "Tasks",
      "item": [
        {
          "name": "List tasks on file",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6a017e1e-c280-4783-a280-b45b89317858",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "8da0cd93-db83-44e9-bf10-bff3299779aa",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/files/:file_id/tasks",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "files",
                ":file_id",
                "tasks"
              ],
              "variable": [
                {
                  "id": "9dfbc8d8-f0d6-4b83-85bf-00eb0207b5b6",
                  "key": "file_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                }
              ]
            },
            "description": "Retrieves a list of all the tasks for a file. This\n\nhttps://developer.box.com/en/reference/get-files-id-tasks"
          },
          "response": [
            {
              "id": "0ff8c0af-ca64-4e8c-9d07-14d20f60c958",
              "name": "[404] Returns an error when the file could not be found or the user does not",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/tasks",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "tasks"
                  ],
                  "variable": [
                    {
                      "id": "9dfbc8d8-f0d6-4b83-85bf-00eb0207b5b6",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Retrieves a list of all the tasks for a file. This\n\nhttps://developer.box.com/en/reference/get-files-id-tasks"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "60b96e87-afd3-45e7-941f-8123456fd9e9",
              "name": "[405] Returns an error when the `file_id` was not provided.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/tasks",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "tasks"
                  ],
                  "variable": [
                    {
                      "id": "9dfbc8d8-f0d6-4b83-85bf-00eb0207b5b6",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Retrieves a list of all the tasks for a file. This\n\nhttps://developer.box.com/en/reference/get-files-id-tasks"
              },
              "status": "Method Not Allowed",
              "code": 405,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "a400d296-82c7-472e-b7b4-e75eaab9ba34",
              "name": "[500] Returns an error when an attempt was made to retrieve tasks for the file",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/tasks",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "tasks"
                  ],
                  "variable": [
                    {
                      "id": "9dfbc8d8-f0d6-4b83-85bf-00eb0207b5b6",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Retrieves a list of all the tasks for a file. This\n\nhttps://developer.box.com/en/reference/get-files-id-tasks"
              },
              "status": "Internal Server Error",
              "code": 500,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "b9270e09-d9b2-42d1-a7da-42547d4a01ff",
              "name": "[200] Returns a list of tasks on a file.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/tasks",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "tasks"
                  ],
                  "variable": [
                    {
                      "id": "9dfbc8d8-f0d6-4b83-85bf-00eb0207b5b6",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Retrieves a list of all the tasks for a file. This\n\nhttps://developer.box.com/en/reference/get-files-id-tasks"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"total_count\": 5000,\n  \"entries\": [\n    {\n      \"id\": \"11446498\",\n      \"type\": \"task\",\n      \"item\": {\n        \"id\": \"12345\",\n        \"etag\": \"1\",\n        \"type\": \"file\",\n        \"sequence_id\": \"3\",\n        \"name\": \"Contract.pdf\"\n      },\n      \"due_at\": \"2012-12-12T10:53:43-08:00\",\n      \"action\": \"review\",\n      \"message\": \"Legal review\",\n      \"task_assignment_collection\": {\n        \"total_count\": 100,\n        \"entries\": [\n          {\n            \"id\": \"11446498\",\n            \"type\": \"task_assignment\",\n            \"item\": {\n              \"id\": \"12345\",\n              \"etag\": \"1\",\n              \"type\": \"file\",\n              \"sequence_id\": \"3\",\n              \"name\": \"Contract.pdf\"\n            },\n            \"assigned_to\": {\n              \"id\": \"11446498\",\n              \"type\": \"user\",\n              \"name\": \"Aaron Levie\",\n              \"login\": \"ceo@example.com\"\n            },\n            \"message\": \"Please review\",\n            \"completed_at\": \"2012-12-12T10:53:43-08:00\",\n            \"assigned_at\": \"2012-12-12T10:53:43-08:00\",\n            \"reminded_at\": \"2012-12-12T10:53:43-08:00\",\n            \"resolution_state\": \"incomplete\",\n            \"assigned_by\": {\n              \"id\": \"11446498\",\n              \"type\": \"user\",\n              \"name\": \"Aaron Levie\",\n              \"login\": \"ceo@example.com\"\n            }\n          }\n        ]\n      },\n      \"is_completed\": true,\n      \"created_by\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      },\n      \"created_at\": \"2012-12-12T10:53:43-08:00\",\n      \"completion_rule\": \"all_assignees\"\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "Get task",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0f224622-687f-49d3-829a-6f1aa5a4c84b",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "bf6f810e-5e37-43b2-aa62-942fcd54d940",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/tasks/:task_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "tasks",
                ":task_id"
              ],
              "variable": [
                {
                  "id": "2ebb6839-0eec-400e-bc26-2d52d063fa6b",
                  "key": "task_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The ID of the task."
                }
              ]
            },
            "description": "Retrieves information about a specific task.\n\nhttps://developer.box.com/en/reference/get-tasks-id"
          },
          "response": [
            {
              "id": "366f70e5-c386-4d51-9b48-ff34fab5c3bf",
              "name": "[404] Returns an error when the task could not be found or the user does not",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/tasks/:task_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "tasks",
                    ":task_id"
                  ],
                  "variable": [
                    {
                      "id": "2ebb6839-0eec-400e-bc26-2d52d063fa6b",
                      "key": "task_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the task."
                    }
                  ]
                },
                "description": "Retrieves information about a specific task.\n\nhttps://developer.box.com/en/reference/get-tasks-id"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "5d49e344-7cf6-4fc4-98ff-cabb281af5b1",
              "name": "[200] Returns a task object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/tasks/:task_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "tasks",
                    ":task_id"
                  ],
                  "variable": [
                    {
                      "id": "2ebb6839-0eec-400e-bc26-2d52d063fa6b",
                      "key": "task_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the task."
                    }
                  ]
                },
                "description": "Retrieves information about a specific task.\n\nhttps://developer.box.com/en/reference/get-tasks-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"task\",\n  \"item\": {\n    \"id\": \"12345\",\n    \"etag\": \"1\",\n    \"type\": \"file\",\n    \"sequence_id\": \"3\",\n    \"name\": \"Contract.pdf\"\n  },\n  \"due_at\": \"2012-12-12T10:53:43-08:00\",\n  \"action\": \"review\",\n  \"message\": \"Legal review\",\n  \"task_assignment_collection\": {\n    \"total_count\": 100,\n    \"entries\": [\n      {\n        \"id\": \"11446498\",\n        \"type\": \"task_assignment\",\n        \"item\": {\n          \"id\": \"12345\",\n          \"etag\": \"1\",\n          \"type\": \"file\",\n          \"sequence_id\": \"3\",\n          \"name\": \"Contract.pdf\"\n        },\n        \"assigned_to\": {\n          \"id\": \"11446498\",\n          \"type\": \"user\",\n          \"name\": \"Aaron Levie\",\n          \"login\": \"ceo@example.com\"\n        },\n        \"message\": \"Please review\",\n        \"completed_at\": \"2012-12-12T10:53:43-08:00\",\n        \"assigned_at\": \"2012-12-12T10:53:43-08:00\",\n        \"reminded_at\": \"2012-12-12T10:53:43-08:00\",\n        \"resolution_state\": \"incomplete\",\n        \"assigned_by\": {\n          \"id\": \"11446498\",\n          \"type\": \"user\",\n          \"name\": \"Aaron Levie\",\n          \"login\": \"ceo@example.com\"\n        }\n      }\n    ]\n  },\n  \"is_completed\": true,\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"completion_rule\": \"all_assignees\"\n}"
            }
          ]
        },
        {
          "name": "Create task",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3648935d-2c93-4d42-a27e-65ce629c71c9",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "6665dc03-ae0b-4c5f-a333-8375ad9a7e9b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"item\": {\n    \"id\": \"11446498\",\n    \"type\": \"file\"\n  },\n  \"action\": \"review\",\n  \"message\": \"Please review\",\n  \"due_at\": \"2012-12-12T10:53:43-08:00\",\n  \"completion_rule\": \"all_assignees\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "https://{{api.box.com}}/2.0/tasks",
            "description": "Creates a single task on a file. This task is not assigned to any user and\n\nhttps://developer.box.com/en/reference/post-tasks"
          },
          "response": [
            {
              "id": "16679e42-c840-49a6-8a30-f7b252232bbb",
              "name": "[400] Returned if the request parameters or body is not valid.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"item\": {\n    \"id\": \"11446498\",\n    \"type\": \"file\"\n  },\n  \"action\": \"review\",\n  \"message\": \"Please review\",\n  \"due_at\": \"2012-12-12T10:53:43-08:00\",\n  \"completion_rule\": \"all_assignees\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/tasks",
                "description": "Creates a single task on a file. This task is not assigned to any user and\n\nhttps://developer.box.com/en/reference/post-tasks"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "628c28f6-200e-4640-ad3f-0cb3fea37dc6",
              "name": "[403] Returns an error when the user does not have the permission to create a",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"item\": {\n    \"id\": \"11446498\",\n    \"type\": \"file\"\n  },\n  \"action\": \"review\",\n  \"message\": \"Please review\",\n  \"due_at\": \"2012-12-12T10:53:43-08:00\",\n  \"completion_rule\": \"all_assignees\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/tasks",
                "description": "Creates a single task on a file. This task is not assigned to any user and\n\nhttps://developer.box.com/en/reference/post-tasks"
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "a74a6777-c57f-4ad4-b3a1-cf5752b4f305",
              "name": "[404] Returns an error when the file could not be found or the user does not",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"item\": {\n    \"id\": \"11446498\",\n    \"type\": \"file\"\n  },\n  \"action\": \"review\",\n  \"message\": \"Please review\",\n  \"due_at\": \"2012-12-12T10:53:43-08:00\",\n  \"completion_rule\": \"all_assignees\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/tasks",
                "description": "Creates a single task on a file. This task is not assigned to any user and\n\nhttps://developer.box.com/en/reference/post-tasks"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "d7fb6a6b-f3a2-4492-8d7a-6f0d32e146b5",
              "name": "[201] Returns the newly created task.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"item\": {\n    \"id\": \"11446498\",\n    \"type\": \"file\"\n  },\n  \"action\": \"review\",\n  \"message\": \"Please review\",\n  \"due_at\": \"2012-12-12T10:53:43-08:00\",\n  \"completion_rule\": \"all_assignees\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/tasks",
                "description": "Creates a single task on a file. This task is not assigned to any user and\n\nhttps://developer.box.com/en/reference/post-tasks"
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"task\",\n  \"item\": {\n    \"id\": \"12345\",\n    \"etag\": \"1\",\n    \"type\": \"file\",\n    \"sequence_id\": \"3\",\n    \"name\": \"Contract.pdf\"\n  },\n  \"due_at\": \"2012-12-12T10:53:43-08:00\",\n  \"action\": \"review\",\n  \"message\": \"Legal review\",\n  \"task_assignment_collection\": {\n    \"total_count\": 100,\n    \"entries\": [\n      {\n        \"id\": \"11446498\",\n        \"type\": \"task_assignment\",\n        \"item\": {\n          \"id\": \"12345\",\n          \"etag\": \"1\",\n          \"type\": \"file\",\n          \"sequence_id\": \"3\",\n          \"name\": \"Contract.pdf\"\n        },\n        \"assigned_to\": {\n          \"id\": \"11446498\",\n          \"type\": \"user\",\n          \"name\": \"Aaron Levie\",\n          \"login\": \"ceo@example.com\"\n        },\n        \"message\": \"Please review\",\n        \"completed_at\": \"2012-12-12T10:53:43-08:00\",\n        \"assigned_at\": \"2012-12-12T10:53:43-08:00\",\n        \"reminded_at\": \"2012-12-12T10:53:43-08:00\",\n        \"resolution_state\": \"incomplete\",\n        \"assigned_by\": {\n          \"id\": \"11446498\",\n          \"type\": \"user\",\n          \"name\": \"Aaron Levie\",\n          \"login\": \"ceo@example.com\"\n        }\n      }\n    ]\n  },\n  \"is_completed\": true,\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"completion_rule\": \"all_assignees\"\n}"
            }
          ]
        },
        {
          "name": "Update task",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "960782fb-5dc0-4289-a5fe-3706d920fc07",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "c103f865-8085-4947-9898-ac3e7a33c6ec",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"action\": \"review\",\n  \"message\": \"Please review\",\n  \"due_at\": \"2012-12-12T10:53:43-08:00\",\n  \"completion_rule\": \"all_assignees\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/tasks/:task_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "tasks",
                ":task_id"
              ],
              "variable": [
                {
                  "id": "920ea688-f754-4caa-92b2-875cf7e89058",
                  "key": "task_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The ID of the task."
                }
              ]
            },
            "description": "Updates a task. This can be used to update a task's configuration, or to\n\nhttps://developer.box.com/en/reference/put-tasks-id"
          },
          "response": [
            {
              "id": "1ad3cde9-1782-4e87-9e68-52f4eda082b1",
              "name": "[404] Returns an error when the file could not be found or the user does not",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"action\": \"review\",\n  \"message\": \"Please review\",\n  \"due_at\": \"2012-12-12T10:53:43-08:00\",\n  \"completion_rule\": \"all_assignees\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/tasks/:task_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "tasks",
                    ":task_id"
                  ],
                  "variable": [
                    {
                      "id": "920ea688-f754-4caa-92b2-875cf7e89058",
                      "key": "task_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the task."
                    }
                  ]
                },
                "description": "Updates a task. This can be used to update a task's configuration, or to\n\nhttps://developer.box.com/en/reference/put-tasks-id"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "a827a20d-0cea-4b5e-87ea-7530ba83899f",
              "name": "[400] Returned if the request parameters or body is not valid.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"action\": \"review\",\n  \"message\": \"Please review\",\n  \"due_at\": \"2012-12-12T10:53:43-08:00\",\n  \"completion_rule\": \"all_assignees\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/tasks/:task_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "tasks",
                    ":task_id"
                  ],
                  "variable": [
                    {
                      "id": "920ea688-f754-4caa-92b2-875cf7e89058",
                      "key": "task_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the task."
                    }
                  ]
                },
                "description": "Updates a task. This can be used to update a task's configuration, or to\n\nhttps://developer.box.com/en/reference/put-tasks-id"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "be1b6ff5-24b0-44a6-abe3-e05a0eac7dc1",
              "name": "[200] Returns the updated task object",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"action\": \"review\",\n  \"message\": \"Please review\",\n  \"due_at\": \"2012-12-12T10:53:43-08:00\",\n  \"completion_rule\": \"all_assignees\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/tasks/:task_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "tasks",
                    ":task_id"
                  ],
                  "variable": [
                    {
                      "id": "920ea688-f754-4caa-92b2-875cf7e89058",
                      "key": "task_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the task."
                    }
                  ]
                },
                "description": "Updates a task. This can be used to update a task's configuration, or to\n\nhttps://developer.box.com/en/reference/put-tasks-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"task\",\n  \"item\": {\n    \"id\": \"12345\",\n    \"etag\": \"1\",\n    \"type\": \"file\",\n    \"sequence_id\": \"3\",\n    \"name\": \"Contract.pdf\"\n  },\n  \"due_at\": \"2012-12-12T10:53:43-08:00\",\n  \"action\": \"review\",\n  \"message\": \"Legal review\",\n  \"task_assignment_collection\": {\n    \"total_count\": 100,\n    \"entries\": [\n      {\n        \"id\": \"11446498\",\n        \"type\": \"task_assignment\",\n        \"item\": {\n          \"id\": \"12345\",\n          \"etag\": \"1\",\n          \"type\": \"file\",\n          \"sequence_id\": \"3\",\n          \"name\": \"Contract.pdf\"\n        },\n        \"assigned_to\": {\n          \"id\": \"11446498\",\n          \"type\": \"user\",\n          \"name\": \"Aaron Levie\",\n          \"login\": \"ceo@example.com\"\n        },\n        \"message\": \"Please review\",\n        \"completed_at\": \"2012-12-12T10:53:43-08:00\",\n        \"assigned_at\": \"2012-12-12T10:53:43-08:00\",\n        \"reminded_at\": \"2012-12-12T10:53:43-08:00\",\n        \"resolution_state\": \"incomplete\",\n        \"assigned_by\": {\n          \"id\": \"11446498\",\n          \"type\": \"user\",\n          \"name\": \"Aaron Levie\",\n          \"login\": \"ceo@example.com\"\n        }\n      }\n    ]\n  },\n  \"is_completed\": true,\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"completion_rule\": \"all_assignees\"\n}"
            },
            {
              "id": "ff376e78-da33-4df2-87f6-d1d30e055de4",
              "name": "[403] Returns an error when the user does not have the permission to update a",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"action\": \"review\",\n  \"message\": \"Please review\",\n  \"due_at\": \"2012-12-12T10:53:43-08:00\",\n  \"completion_rule\": \"all_assignees\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/tasks/:task_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "tasks",
                    ":task_id"
                  ],
                  "variable": [
                    {
                      "id": "920ea688-f754-4caa-92b2-875cf7e89058",
                      "key": "task_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the task."
                    }
                  ]
                },
                "description": "Updates a task. This can be used to update a task's configuration, or to\n\nhttps://developer.box.com/en/reference/put-tasks-id"
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        },
        {
          "name": "Remove task",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "61f09ce1-c8b1-4244-a558-e1dc69a16aca",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "3c424e2f-daf8-4c3a-8d64-ace63628a38c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/tasks/:task_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "tasks",
                ":task_id"
              ],
              "variable": [
                {
                  "id": "eaa7ddfb-1ce6-4346-9c96-44e20f306a6e",
                  "key": "task_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The ID of the task."
                }
              ]
            },
            "description": "Removes a task from a file.\n\nhttps://developer.box.com/en/reference/delete-tasks-id"
          },
          "response": [
            {
              "id": "5719ccb9-3a10-4e90-a1a2-637509d6cf46",
              "name": "[404] Returns an error when the task could not be found or the user does not",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/tasks/:task_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "tasks",
                    ":task_id"
                  ],
                  "variable": [
                    {
                      "id": "eaa7ddfb-1ce6-4346-9c96-44e20f306a6e",
                      "key": "task_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the task."
                    }
                  ]
                },
                "description": "Removes a task from a file.\n\nhttps://developer.box.com/en/reference/delete-tasks-id"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "71bc73a1-2ed4-4e9d-8587-12a2cb538854",
              "name": "[204] Returns an empty response when the task was successfully deleted.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/tasks/:task_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "tasks",
                    ":task_id"
                  ],
                  "variable": [
                    {
                      "id": "eaa7ddfb-1ce6-4346-9c96-44e20f306a6e",
                      "key": "task_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the task."
                    }
                  ]
                },
                "description": "Removes a task from a file.\n\nhttps://developer.box.com/en/reference/delete-tasks-id"
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        }
      ],
      "_postman_id": "b131060d-93fc-4dc4-a4d8-99762b0c6c87"
    },
    {
      "name": "Terms of service",
      "item": [
        {
          "name": "List terms of services",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2a418013-03a1-418a-be01-2498d0a247fe",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "961afaab-b7e1-423f-b856-0a5cf96a2558",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/terms_of_services?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "terms_of_services"
              ],
              "query": [
                {
                  "key": "tos_type",
                  "value": "managed",
                  "description": "Limits the results to the terms of service of the given type.",
                  "disabled": true
                }
              ]
            },
            "description": "Returns the current terms of service text and settings\n\nhttps://developer.box.com/en/reference/get-terms-of-services"
          },
          "response": [
            {
              "id": "8393808a-c587-476a-b889-9f3d35650f2a",
              "name": "[200] Returns a collection of terms of service text and settings for the",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/terms_of_services?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "terms_of_services"
                  ],
                  "query": [
                    {
                      "key": "tos_type",
                      "value": "managed",
                      "description": "Limits the results to the terms of service of the given type.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Returns the current terms of service text and settings\n\nhttps://developer.box.com/en/reference/get-terms-of-services"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"total_count\": 2,\n  \"entries\": [\n    {\n      \"id\": \"11446498\",\n      \"type\": \"terms_of_service\",\n      \"status\": \"enabled\",\n      \"enterprise\": {\n        \"id\": \"11446498\",\n        \"type\": \"enterprise\",\n        \"name\": \"Acme Inc.\"\n      },\n      \"tos_type\": \"managed\",\n      \"text\": \"By using this service, you agree to ...\",\n      \"created_at\": \"2012-12-12T10:53:43-08:00\",\n      \"modified_at\": \"2012-12-12T10:53:43-08:00\"\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "Get terms of service",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8dbc6c4c-0a0e-4295-812b-c9feefdd759f",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "bfe446ba-7bf1-4493-8177-0dc3b8f458a2",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/terms_of_services/:terms_of_service_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "terms_of_services",
                ":terms_of_service_id"
              ],
              "variable": [
                {
                  "id": "21149988-2190-4ec7-9b94-8db88eab55b5",
                  "key": "terms_of_service_id",
                  "value": "324234",
                  "type": "string",
                  "description": "The ID of the terms of service."
                }
              ]
            },
            "description": "Fetches a specific terms of service.\n\nhttps://developer.box.com/en/reference/get-terms-of-services-id"
          },
          "response": [
            {
              "id": "4eab61d3-1305-4dfd-82b5-d49ad587f31e",
              "name": "[200] Returns a terms of service object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/terms_of_services/:terms_of_service_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "terms_of_services",
                    ":terms_of_service_id"
                  ],
                  "variable": [
                    {
                      "id": "21149988-2190-4ec7-9b94-8db88eab55b5",
                      "key": "terms_of_service_id",
                      "value": "324234",
                      "type": "string",
                      "description": "The ID of the terms of service."
                    }
                  ]
                },
                "description": "Fetches a specific terms of service.\n\nhttps://developer.box.com/en/reference/get-terms-of-services-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"terms_of_service\",\n  \"status\": \"enabled\",\n  \"enterprise\": {\n    \"id\": \"11446498\",\n    \"type\": \"enterprise\",\n    \"name\": \"Acme Inc.\"\n  },\n  \"tos_type\": \"managed\",\n  \"text\": \"By using this service, you agree to ...\",\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\"\n}"
            }
          ]
        },
        {
          "name": "Create terms of service",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d006747d-6e33-48b7-8d2a-8a67dae196e9",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "1cc349bb-8597-4697-8392-d336b13f8447",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"enabled\",\n  \"tos_type\": \"managed\",\n  \"text\": \"By collaborating on this file you are accepting...\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "https://{{api.box.com}}/2.0/terms_of_services",
            "description": "Creates a terms of service for a given enterprise\n\nhttps://developer.box.com/en/reference/post-terms-of-services"
          },
          "response": [
            {
              "id": "d5b37724-628f-401f-a329-c61b6a9c2238",
              "name": "[200] Returns a new task object",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"status\": \"enabled\",\n  \"tos_type\": \"managed\",\n  \"text\": \"By collaborating on this file you are accepting...\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/terms_of_services",
                "description": "Creates a terms of service for a given enterprise\n\nhttps://developer.box.com/en/reference/post-terms-of-services"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"task\",\n  \"item\": {\n    \"id\": \"12345\",\n    \"etag\": \"1\",\n    \"type\": \"file\",\n    \"sequence_id\": \"3\",\n    \"name\": \"Contract.pdf\"\n  },\n  \"due_at\": \"2012-12-12T10:53:43-08:00\",\n  \"action\": \"review\",\n  \"message\": \"Legal review\",\n  \"task_assignment_collection\": {\n    \"total_count\": 100,\n    \"entries\": [\n      {\n        \"id\": \"11446498\",\n        \"type\": \"task_assignment\",\n        \"item\": {\n          \"id\": \"12345\",\n          \"etag\": \"1\",\n          \"type\": \"file\",\n          \"sequence_id\": \"3\",\n          \"name\": \"Contract.pdf\"\n        },\n        \"assigned_to\": {\n          \"id\": \"11446498\",\n          \"type\": \"user\",\n          \"name\": \"Aaron Levie\",\n          \"login\": \"ceo@example.com\"\n        },\n        \"message\": \"Please review\",\n        \"completed_at\": \"2012-12-12T10:53:43-08:00\",\n        \"assigned_at\": \"2012-12-12T10:53:43-08:00\",\n        \"reminded_at\": \"2012-12-12T10:53:43-08:00\",\n        \"resolution_state\": \"incomplete\",\n        \"assigned_by\": {\n          \"id\": \"11446498\",\n          \"type\": \"user\",\n          \"name\": \"Aaron Levie\",\n          \"login\": \"ceo@example.com\"\n        }\n      }\n    ]\n  },\n  \"is_completed\": true,\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"completion_rule\": \"all_assignees\"\n}"
            }
          ]
        },
        {
          "name": "Update terms of service",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "51408ffc-800d-44c5-99fb-3d26b9eccbb3",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "0849bb50-49e9-43e0-ad2b-f672251c40a0",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"enabled\",\n  \"text\": \"By collaborating on this file you are accepting...\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/terms_of_services/:terms_of_service_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "terms_of_services",
                ":terms_of_service_id"
              ],
              "variable": [
                {
                  "id": "222f19de-2b42-4448-9508-f0c561224eae",
                  "key": "terms_of_service_id",
                  "value": "324234",
                  "type": "string",
                  "description": "The ID of the terms of service."
                }
              ]
            },
            "description": "Updates a specific terms of service.\n\nhttps://developer.box.com/en/reference/put-terms-of-services-id"
          },
          "response": [
            {
              "id": "63b6b2b8-7680-450b-8d2c-57282c8dc116",
              "name": "[200] Returns an updated terms of service object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"status\": \"enabled\",\n  \"text\": \"By collaborating on this file you are accepting...\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/terms_of_services/:terms_of_service_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "terms_of_services",
                    ":terms_of_service_id"
                  ],
                  "variable": [
                    {
                      "id": "222f19de-2b42-4448-9508-f0c561224eae",
                      "key": "terms_of_service_id",
                      "value": "324234",
                      "type": "string",
                      "description": "The ID of the terms of service."
                    }
                  ]
                },
                "description": "Updates a specific terms of service.\n\nhttps://developer.box.com/en/reference/put-terms-of-services-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"terms_of_service\",\n  \"status\": \"enabled\",\n  \"enterprise\": {\n    \"id\": \"11446498\",\n    \"type\": \"enterprise\",\n    \"name\": \"Acme Inc.\"\n  },\n  \"tos_type\": \"managed\",\n  \"text\": \"By using this service, you agree to ...\",\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\"\n}"
            }
          ]
        }
      ],
      "_postman_id": "72ee76f7-d3c0-43f9-b4bc-899207f6046c"
    },
    {
      "name": "Terms of service user statuses",
      "item": [
        {
          "name": "List terms of service user statuses",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "a932ddd9-61b0-4320-bdce-c302af94c499",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "a78283fd-eef6-4666-90d1-130d2d27afec",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/terms_of_service_user_statuses?tos_id=324234",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "terms_of_service_user_statuses"
              ],
              "query": [
                {
                  "key": "tos_id",
                  "value": "324234",
                  "description": "The ID of the terms of service."
                },
                {
                  "key": "user_id",
                  "value": "123334",
                  "description": "Limits results to the given user ID.",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieves an overview of users and their status for a\n\nhttps://developer.box.com/en/reference/get-terms-of-service-user-statuses"
          },
          "response": [
            {
              "id": "d0aa941e-047a-4de2-b74f-93fc0c1be7b5",
              "name": "[200] Returns a list of terms of service statuses.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/terms_of_service_user_statuses?tos_id=324234",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "terms_of_service_user_statuses"
                  ],
                  "query": [
                    {
                      "key": "tos_id",
                      "value": "324234",
                      "description": "The ID of the terms of service."
                    },
                    {
                      "key": "user_id",
                      "value": "123334",
                      "description": "Limits results to the given user ID.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Retrieves an overview of users and their status for a\n\nhttps://developer.box.com/en/reference/get-terms-of-service-user-statuses"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"total_count\": 2,\n  \"entries\": [\n    {\n      \"id\": \"11446498\",\n      \"type\": \"terms_of_service_user_status\",\n      \"tos\": {\n        \"id\": \"11446498\",\n        \"type\": \"terms_of_service\"\n      },\n      \"user\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      },\n      \"is_accepted\": true,\n      \"created_at\": \"2012-12-12T10:53:43-08:00\",\n      \"modified_at\": \"2012-12-12T10:53:43-08:00\"\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "Create terms of service status for new user",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c287f36d-0177-4772-aa2f-4909a7a04b64",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "a3cda893-0cf1-4254-a226-b5e92ab1ce24",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"tos\": {\n    \"type\": \"terms_of_service\",\n    \"id\": \"1232132\"\n  },\n  \"user\": {\n    \"type\": \"user\",\n    \"id\": \"3423423\"\n  },\n  \"is_accepted\": true\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "https://{{api.box.com}}/2.0/terms_of_service_user_statuses",
            "description": "Sets the status for a terms of service for a user.\n\nhttps://developer.box.com/en/reference/post-terms-of-service-user-statuses"
          },
          "response": [
            {
              "id": "c136977b-1441-412b-ac95-8bb5f0ddf31c",
              "name": "[200] Returns a terms of service status object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"tos\": {\n    \"type\": \"terms_of_service\",\n    \"id\": \"1232132\"\n  },\n  \"user\": {\n    \"type\": \"user\",\n    \"id\": \"3423423\"\n  },\n  \"is_accepted\": true\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/terms_of_service_user_statuses",
                "description": "Sets the status for a terms of service for a user.\n\nhttps://developer.box.com/en/reference/post-terms-of-service-user-statuses"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"terms_of_service_user_status\",\n  \"tos\": {\n    \"id\": \"11446498\",\n    \"type\": \"terms_of_service\"\n  },\n  \"user\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"is_accepted\": true,\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\"\n}"
            }
          ]
        },
        {
          "name": "Update terms of service status for existing user",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "17c17bc7-a10b-454c-bd43-3e4dae63ad3a",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "24c7b99b-c4e1-4ff7-936a-9a51b89fbbbb",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"is_accepted\": true\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/terms_of_service_user_statuses/:terms_of_service_user_status_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "terms_of_service_user_statuses",
                ":terms_of_service_user_status_id"
              ],
              "variable": [
                {
                  "id": "e251c97b-497d-4efd-b43d-3cce68bbaaf7",
                  "key": "terms_of_service_user_status_id",
                  "value": "324234",
                  "type": "string",
                  "description": "The ID of the terms of service status."
                }
              ]
            },
            "description": "Updates the status for a terms of service for a user.\n\nhttps://developer.box.com/en/reference/put-terms-of-service-user-statuses-id"
          },
          "response": [
            {
              "id": "eb97f3b0-eaa2-4dc4-94da-2f327756b25d",
              "name": "[200] Returns the updated terms of service status object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"is_accepted\": true\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/terms_of_service_user_statuses/:terms_of_service_user_status_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "terms_of_service_user_statuses",
                    ":terms_of_service_user_status_id"
                  ],
                  "variable": [
                    {
                      "id": "e251c97b-497d-4efd-b43d-3cce68bbaaf7",
                      "key": "terms_of_service_user_status_id",
                      "value": "324234",
                      "type": "string",
                      "description": "The ID of the terms of service status."
                    }
                  ]
                },
                "description": "Updates the status for a terms of service for a user.\n\nhttps://developer.box.com/en/reference/put-terms-of-service-user-statuses-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"terms_of_service_user_status\",\n  \"tos\": {\n    \"id\": \"11446498\",\n    \"type\": \"terms_of_service\"\n  },\n  \"user\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"is_accepted\": true,\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\"\n}"
            }
          ]
        }
      ],
      "_postman_id": "14e57624-9ec0-4809-9d6b-a1a34a01b1b9"
    },
    {
      "name": "Transfer folders",
      "item": [
        {
          "name": "Transfer owned folders",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3dfd4c71-771b-40c2-8d4b-e3bf77c33add",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "be33db2b-90da-4905-9f22-b15fb5954432",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"enterprise\": {\n    \"id\": \"1232234\"\n  }\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/users/:user_id/folders/0?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "users",
                ":user_id",
                "folders",
                "0"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                },
                {
                  "key": "notify",
                  "value": "true",
                  "description": "Determines if users should receive email notification\nfor the action performed.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "abb6d317-3c91-45f8-8951-33d25f37cb56",
                  "key": "user_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The ID of the user."
                }
              ]
            },
            "description": "Move all of the items owned by a user into a\n\nhttps://developer.box.com/en/reference/put-users-id-folders-0"
          },
          "response": [
            {
              "id": "88b601d9-1244-4912-a5cc-4eac28c1f33a",
              "name": "[200] Returns the information for the newly created",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"enterprise\": {\n    \"id\": \"1232234\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/users/:user_id/folders/0?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "users",
                    ":user_id",
                    "folders",
                    "0"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    },
                    {
                      "key": "notify",
                      "value": "true",
                      "description": "Determines if users should receive email notification\nfor the action performed.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "abb6d317-3c91-45f8-8951-33d25f37cb56",
                      "key": "user_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the user."
                    }
                  ]
                },
                "description": "Move all of the items owned by a user into a\n\nhttps://developer.box.com/en/reference/put-users-id-folders-0"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"12345\",\n  \"etag\": \"1\",\n  \"type\": \"folder\",\n  \"sequence_id\": \"3\",\n  \"name\": \"Contracts\",\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"description\": \"Legal contracts for the new ACME deal\",\n  \"size\": 629644,\n  \"path_collection\": {\n    \"total_count\": 1,\n    \"entries\": [\n      {\n        \"id\": \"12345\",\n        \"etag\": \"1\",\n        \"type\": \"folder\",\n        \"sequence_id\": \"3\",\n        \"name\": \"Contracts\"\n      }\n    ]\n  },\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"modified_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"trashed_at\": \"2012-12-12T10:53:43-08:00\",\n  \"purged_at\": \"2012-12-12T10:53:43-08:00\",\n  \"content_created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"content_modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"expires_at\": \"2012-12-12T10:53:43-08:00\",\n  \"owned_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"shared_link\": {\n    \"url\": \"https://www.box.com/s/vspke7y05sb214wjokpk\",\n    \"download_url\": \"https://www.box.com/shared/static/rh935iit6ewrmw0unyul.jpeg\",\n    \"vanity_url\": \"https://acme.app.box.com/v/my_url/\",\n    \"access\": \"open\",\n    \"effective_access\": \"company\",\n    \"effective_permission\": \"can_download\",\n    \"unshared_at\": \"2018-04-13T13:53:23-07:00\",\n    \"is_password_enabled\": true,\n    \"permissions\": {\n      \"can_download\": true,\n      \"can_preview\": true\n    },\n    \"download_count\": 3,\n    \"preview_count\": 3\n  },\n  \"folder_upload_email\": {\n    \"access\": \"open\",\n    \"email\": \"upload.Contracts.asd7asd@u.box.com\"\n  },\n  \"parent\": {\n    \"id\": \"12345\",\n    \"etag\": \"1\",\n    \"type\": \"folder\",\n    \"sequence_id\": \"3\",\n    \"name\": \"Contracts\"\n  },\n  \"item_status\": \"active\",\n  \"item_collection\": {\n    \"total_count\": 5000,\n    \"limit\": 1000,\n    \"offset\": 2000,\n    \"order\": [\n      {\n        \"by\": \"type\",\n        \"direction\": \"ASC\"\n      }\n    ],\n    \"entries\": {\n      \"id\": \"12345\",\n      \"etag\": \"1\",\n      \"type\": \"file\",\n      \"sequence_id\": \"3\",\n      \"name\": \"Contract.pdf\"\n    }\n  },\n  \"sync_state\": \"synced\",\n  \"has_collaborations\": true,\n  \"permissions\": {\n    \"can_delete\": true,\n    \"can_download\": true,\n    \"can_invite_collaborator\": true,\n    \"can_rename\": true,\n    \"can_set_share_access\": true,\n    \"can_share\": true,\n    \"can_upload\": true\n  },\n  \"tags\": [\n    \"approved\"\n  ],\n  \"can_non_owners_invite\": true,\n  \"is_externally_owned\": true,\n  \"is_collaboration_restricted_to_enterprise\": true,\n  \"allowed_shared_link_access_levels\": [\n    \"open\"\n  ],\n  \"allowed_invitee_roles\": [\n    \"editor\"\n  ],\n  \"watermark_info\": {\n    \"is_watermarked\": true\n  },\n  \"can_non_owners_view_collaborators\": true\n}"
            }
          ]
        }
      ],
      "_postman_id": "e52d8ca4-cb08-47cc-8194-d04a6cff4ef4"
    },
    {
      "name": "Trashed files",
      "item": [
        {
          "name": "Get trashed file",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "4613af62-b7a5-4b0c-a792-93bcb3bd4a0a",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "45dd2eb6-f173-4f4c-9ce0-754f64ccc18c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/files/:file_id/trash?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "files",
                ":file_id",
                "trash"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "9d07ae1c-94be-478d-994e-1e28e44b8552",
                  "key": "file_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                }
              ]
            },
            "description": "Retrieves a file that has been moved to the trash.\n\nhttps://developer.box.com/en/reference/get-files-id-trash"
          },
          "response": [
            {
              "id": "912834dd-742d-48e2-91c5-19e86de6feae",
              "name": "[404] Returns an error if the file is not in the trash.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/trash?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "trash"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "9d07ae1c-94be-478d-994e-1e28e44b8552",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Retrieves a file that has been moved to the trash.\n\nhttps://developer.box.com/en/reference/get-files-id-trash"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "bf8ba268-9235-4aee-a6e0-bd81157cd10d",
              "name": "[200] Returns the file that was trashed,",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/trash?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "trash"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "9d07ae1c-94be-478d-994e-1e28e44b8552",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Retrieves a file that has been moved to the trash.\n\nhttps://developer.box.com/en/reference/get-files-id-trash"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"12345\",\n  \"etag\": \"1\",\n  \"type\": \"file\",\n  \"sequence_id\": \"3\",\n  \"name\": \"Contract.pdf\",\n  \"sha1\": \"85136C79CBF9FE36BB9D05D0639C70C265C18D37\",\n  \"description\": \"Contract for Q1 renewal\",\n  \"size\": 629644,\n  \"path_collection\": {\n    \"total_count\": 1,\n    \"entries\": [\n      {\n        \"id\": \"12345\",\n        \"etag\": \"1\",\n        \"type\": \"folder\",\n        \"sequence_id\": \"3\",\n        \"name\": \"Contracts\"\n      }\n    ]\n  },\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"trashed_at\": \"2012-12-12T10:53:43-08:00\",\n  \"purged_at\": \"2012-12-12T10:53:43-08:00\",\n  \"content_created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"content_modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"modified_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"owned_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"shared_link\": {\n    \"url\": \"https://www.box.com/s/vspke7y05sb214wjokpk\",\n    \"download_url\": \"https://www.box.com/shared/static/rh935iit6ewrmw0unyul.jpeg\",\n    \"vanity_url\": \"https://acme.app.box.com/v/my_url/\",\n    \"access\": \"open\",\n    \"effective_access\": \"company\",\n    \"effective_permission\": \"can_download\",\n    \"unshared_at\": \"2018-04-13T13:53:23-07:00\",\n    \"is_password_enabled\": true,\n    \"permissions\": {\n      \"can_download\": true,\n      \"can_preview\": true\n    },\n    \"download_count\": 3,\n    \"preview_count\": 3\n  },\n  \"parent\": {\n    \"id\": \"12345\",\n    \"etag\": \"1\",\n    \"type\": \"folder\",\n    \"sequence_id\": \"3\",\n    \"name\": \"Contracts\"\n  },\n  \"item_status\": \"active\",\n  \"version_number\": \"1\",\n  \"comment_count\": 10,\n  \"permissions\": {\n    \"can_delete\": true,\n    \"can_download\": true,\n    \"can_invite_collaborator\": true,\n    \"can_rename\": true,\n    \"can_set_share_access\": true,\n    \"can_share\": true,\n    \"can_annotate\": true,\n    \"can_comment\": true,\n    \"can_preview\": true,\n    \"can_upload\": true,\n    \"can_view_annotations_all\": true,\n    \"can_view_annotations_self\": true\n  },\n  \"tags\": [\n    \"approved\"\n  ],\n  \"lock\": {\n    \"id\": \"11446498\",\n    \"type\": \"lock\",\n    \"created_by\": {\n      \"id\": \"11446498\",\n      \"type\": \"user\",\n      \"name\": \"Aaron Levie\",\n      \"login\": \"ceo@example.com\"\n    },\n    \"created_at\": \"2012-12-12T10:53:43-08:00\",\n    \"expired_at\": \"2012-12-12T10:53:43-08:00\",\n    \"is_download_prevented\": true\n  },\n  \"extension\": \"pdf\",\n  \"is_package\": true,\n  \"expiring_embed_link\": {\n    \"access_token\": \"c3FIOG9vSGV4VHo4QzAyg5T1JvNnJoZ3ExaVNyQWw6WjRsanRKZG5lQk9qUE1BVQ\",\n    \"expires_in\": 3600,\n    \"token_type\": \"bearer\",\n    \"restricted_to\": [\n      {\n        \"scope\": \"item_download\",\n        \"object\": {\n          \"id\": \"12345\",\n          \"etag\": \"1\",\n          \"type\": \"file\",\n          \"sequence_id\": \"3\",\n          \"name\": \"Contract.pdf\"\n        }\n      }\n    ],\n    \"url\": \"https://cloud.app.box.com/preview/expiring_embed/...\"\n  },\n  \"watermark_info\": {\n    \"is_watermarked\": true\n  },\n  \"allowed_invitee_roles\": [\n    \"editor\"\n  ],\n  \"is_externally_owned\": true,\n  \"has_collaborations\": true,\n  \"metadata\": {\n    \"global\": {\n      \"marketingCollateral\": {\n        \"$canEdit\": true,\n        \"$id\": \"01234500-12f1-1234-aa12-b1d234cb567e\",\n        \"$parent\": \"folder_59449484661\",\n        \"$scope\": \"enterprise_27335\",\n        \"$template\": \"properties\",\n        \"$type\": \"properties-6bcba49f-ca6d-4d2a-a758-57fe6edf44d0\",\n        \"$typeVersion\": 2,\n        \"$version\": 1\n      }\n    }\n  },\n  \"expires_at\": \"2012-12-12T10:53:43-08:00\",\n  \"representations\": {\n    \"entries\": [\n      {\n        \"content\": {\n          \"url_template\": \"https://dl.boxcloud.com/api/2.0/internal_files/123/versions/345/representations/png_paged_2048x2048/content/{+asset_path}?watermark_content=4567\"\n        },\n        \"info\": {\n          \"url\": \"https://api.box.com/2.0/internal_files/123/versions/345/representations/png_paged_2048x2048\"\n        },\n        \"properties\": {\n          \"dimensions\": \"2048x2048\",\n          \"paged\": true,\n          \"thumb\": true\n        },\n        \"representation\": \"png\",\n        \"status\": {\n          \"state\": \"success\"\n        }\n      }\n    ]\n  }\n}"
            }
          ]
        },
        {
          "name": "Restore file",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b9010045-fad5-41a0-af1d-c599132e3c2b",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "de79ed36-677b-41bc-a64d-58569f43ca64",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Restored.docx\",\n  \"parent\": {\n    \"id\": \"123\"\n  }\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/files/:file_id?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "files",
                ":file_id"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "0147e92e-b854-4852-a06c-c0a87cfff773",
                  "key": "file_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                }
              ]
            },
            "description": "Restores a file that has been moved to the trash.\n\nhttps://developer.box.com/en/reference/post-files-id"
          },
          "response": [
            {
              "id": "267f9ca5-d8d5-4ed8-a8cf-dbb8dcc697b8",
              "name": "[404] Returns an error if the file is not in the trash.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Restored.docx\",\n  \"parent\": {\n    \"id\": \"123\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "0147e92e-b854-4852-a06c-c0a87cfff773",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Restores a file that has been moved to the trash.\n\nhttps://developer.box.com/en/reference/post-files-id"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "59f1f218-54f5-4171-b43b-adf58d974b3b",
              "name": "[403] Returns an error if the user does not have access to the folder",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Restored.docx\",\n  \"parent\": {\n    \"id\": \"123\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "0147e92e-b854-4852-a06c-c0a87cfff773",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Restores a file that has been moved to the trash.\n\nhttps://developer.box.com/en/reference/post-files-id"
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "8ac4628f-41f2-4e9b-821a-eb3f37197279",
              "name": "[409] Returns an error if there is an file with the same name",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Restored.docx\",\n  \"parent\": {\n    \"id\": \"123\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "0147e92e-b854-4852-a06c-c0a87cfff773",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Restores a file that has been moved to the trash.\n\nhttps://developer.box.com/en/reference/post-files-id"
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "dc506ed5-40fc-4d0e-8e5c-dc974b33a853",
              "name": "[201] Returns a file object when the file has been restored.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Restored.docx\",\n  \"parent\": {\n    \"id\": \"123\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "0147e92e-b854-4852-a06c-c0a87cfff773",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Restores a file that has been moved to the trash.\n\nhttps://developer.box.com/en/reference/post-files-id"
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"12345\",\n  \"etag\": \"1\",\n  \"type\": \"file\",\n  \"sequence_id\": \"3\",\n  \"name\": \"Contract.pdf\",\n  \"sha1\": \"85136C79CBF9FE36BB9D05D0639C70C265C18D37\",\n  \"description\": \"Contract for Q1 renewal\",\n  \"size\": 629644,\n  \"path_collection\": {\n    \"total_count\": 1,\n    \"entries\": [\n      {\n        \"id\": \"12345\",\n        \"etag\": \"1\",\n        \"type\": \"folder\",\n        \"sequence_id\": \"3\",\n        \"name\": \"Contracts\"\n      }\n    ]\n  },\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"trashed_at\": \"2012-12-12T10:53:43-08:00\",\n  \"purged_at\": \"2012-12-12T10:53:43-08:00\",\n  \"content_created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"content_modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"modified_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"owned_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"shared_link\": {\n    \"url\": \"https://www.box.com/s/vspke7y05sb214wjokpk\",\n    \"download_url\": \"https://www.box.com/shared/static/rh935iit6ewrmw0unyul.jpeg\",\n    \"vanity_url\": \"https://acme.app.box.com/v/my_url/\",\n    \"access\": \"open\",\n    \"effective_access\": \"company\",\n    \"effective_permission\": \"can_download\",\n    \"unshared_at\": \"2018-04-13T13:53:23-07:00\",\n    \"is_password_enabled\": true,\n    \"permissions\": {\n      \"can_download\": true,\n      \"can_preview\": true\n    },\n    \"download_count\": 3,\n    \"preview_count\": 3\n  },\n  \"parent\": {\n    \"id\": \"12345\",\n    \"etag\": \"1\",\n    \"type\": \"folder\",\n    \"sequence_id\": \"3\",\n    \"name\": \"Contracts\"\n  },\n  \"item_status\": \"active\",\n  \"version_number\": \"1\",\n  \"comment_count\": 10,\n  \"permissions\": {\n    \"can_delete\": true,\n    \"can_download\": true,\n    \"can_invite_collaborator\": true,\n    \"can_rename\": true,\n    \"can_set_share_access\": true,\n    \"can_share\": true,\n    \"can_annotate\": true,\n    \"can_comment\": true,\n    \"can_preview\": true,\n    \"can_upload\": true,\n    \"can_view_annotations_all\": true,\n    \"can_view_annotations_self\": true\n  },\n  \"tags\": [\n    \"approved\"\n  ],\n  \"lock\": {\n    \"id\": \"11446498\",\n    \"type\": \"lock\",\n    \"created_by\": {\n      \"id\": \"11446498\",\n      \"type\": \"user\",\n      \"name\": \"Aaron Levie\",\n      \"login\": \"ceo@example.com\"\n    },\n    \"created_at\": \"2012-12-12T10:53:43-08:00\",\n    \"expired_at\": \"2012-12-12T10:53:43-08:00\",\n    \"is_download_prevented\": true\n  },\n  \"extension\": \"pdf\",\n  \"is_package\": true,\n  \"expiring_embed_link\": {\n    \"access_token\": \"c3FIOG9vSGV4VHo4QzAyg5T1JvNnJoZ3ExaVNyQWw6WjRsanRKZG5lQk9qUE1BVQ\",\n    \"expires_in\": 3600,\n    \"token_type\": \"bearer\",\n    \"restricted_to\": [\n      {\n        \"scope\": \"item_download\",\n        \"object\": {\n          \"id\": \"12345\",\n          \"etag\": \"1\",\n          \"type\": \"file\",\n          \"sequence_id\": \"3\",\n          \"name\": \"Contract.pdf\"\n        }\n      }\n    ],\n    \"url\": \"https://cloud.app.box.com/preview/expiring_embed/...\"\n  },\n  \"watermark_info\": {\n    \"is_watermarked\": true\n  },\n  \"allowed_invitee_roles\": [\n    \"editor\"\n  ],\n  \"is_externally_owned\": true,\n  \"has_collaborations\": true,\n  \"metadata\": {\n    \"global\": {\n      \"marketingCollateral\": {\n        \"$canEdit\": true,\n        \"$id\": \"01234500-12f1-1234-aa12-b1d234cb567e\",\n        \"$parent\": \"folder_59449484661\",\n        \"$scope\": \"enterprise_27335\",\n        \"$template\": \"properties\",\n        \"$type\": \"properties-6bcba49f-ca6d-4d2a-a758-57fe6edf44d0\",\n        \"$typeVersion\": 2,\n        \"$version\": 1\n      }\n    }\n  },\n  \"expires_at\": \"2012-12-12T10:53:43-08:00\",\n  \"representations\": {\n    \"entries\": [\n      {\n        \"content\": {\n          \"url_template\": \"https://dl.boxcloud.com/api/2.0/internal_files/123/versions/345/representations/png_paged_2048x2048/content/{+asset_path}?watermark_content=4567\"\n        },\n        \"info\": {\n          \"url\": \"https://api.box.com/2.0/internal_files/123/versions/345/representations/png_paged_2048x2048\"\n        },\n        \"properties\": {\n          \"dimensions\": \"2048x2048\",\n          \"paged\": true,\n          \"thumb\": true\n        },\n        \"representation\": \"png\",\n        \"status\": {\n          \"state\": \"success\"\n        }\n      }\n    ]\n  }\n}"
            }
          ]
        },
        {
          "name": "Permanently remove file",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "63ecfab5-7b40-4457-b2c4-1713931e9ec4",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "0720b43b-c164-43bc-8957-0064b4035e11",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/files/:file_id/trash",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "files",
                ":file_id",
                "trash"
              ],
              "variable": [
                {
                  "id": "ec23fcd4-0f98-4e1b-8253-2abddeb81ba8",
                  "key": "file_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                }
              ]
            },
            "description": "Permanently deletes a file that is in the trash.\n\nhttps://developer.box.com/en/reference/delete-files-id-trash"
          },
          "response": [
            {
              "id": "4031038b-e9ab-4455-9756-346661fcee58",
              "name": "[204] Returns an empty response when the file was",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/trash",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "trash"
                  ],
                  "variable": [
                    {
                      "id": "ec23fcd4-0f98-4e1b-8253-2abddeb81ba8",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Permanently deletes a file that is in the trash.\n\nhttps://developer.box.com/en/reference/delete-files-id-trash"
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "c3968a05-c29c-41e8-8d5d-2d056b9b195e",
              "name": "[404] Returns an error if the file is not in the trash.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/trash",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "trash"
                  ],
                  "variable": [
                    {
                      "id": "ec23fcd4-0f98-4e1b-8253-2abddeb81ba8",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Permanently deletes a file that is in the trash.\n\nhttps://developer.box.com/en/reference/delete-files-id-trash"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        }
      ],
      "_postman_id": "45656890-2561-4c12-8168-37d2b60c0096"
    },
    {
      "name": "Trashed folders",
      "item": [
        {
          "name": "Get trashed folder",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d1f1083e-ca17-429e-b4a4-b4fffd987eac",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "1ea46b9c-71c2-409c-8ab1-0f40809397b9",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/trash?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "folders",
                ":folder_id",
                "trash"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "dbf406c7-0d46-456a-a7a2-8afb96ba19b8",
                  "key": "folder_id",
                  "value": "0",
                  "type": "string",
                  "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                }
              ]
            },
            "description": "Retrieves a folder that has been moved to the trash.\n\nhttps://developer.box.com/en/reference/get-folders-id-trash"
          },
          "response": [
            {
              "id": "262fc89c-ffb5-4cb2-b867-ef621564d416",
              "name": "[200] Returns the folder that was trashed,",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/trash?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "trash"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "dbf406c7-0d46-456a-a7a2-8afb96ba19b8",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Retrieves a folder that has been moved to the trash.\n\nhttps://developer.box.com/en/reference/get-folders-id-trash"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"12345\",\n  \"etag\": \"1\",\n  \"type\": \"folder\",\n  \"sequence_id\": \"3\",\n  \"name\": \"Contracts\",\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"description\": \"Legal contracts for the new ACME deal\",\n  \"size\": 629644,\n  \"path_collection\": {\n    \"total_count\": 1,\n    \"entries\": [\n      {\n        \"id\": \"12345\",\n        \"etag\": \"1\",\n        \"type\": \"folder\",\n        \"sequence_id\": \"3\",\n        \"name\": \"Contracts\"\n      }\n    ]\n  },\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"modified_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"trashed_at\": \"2012-12-12T10:53:43-08:00\",\n  \"purged_at\": \"2012-12-12T10:53:43-08:00\",\n  \"content_created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"content_modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"expires_at\": \"2012-12-12T10:53:43-08:00\",\n  \"owned_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"shared_link\": {\n    \"url\": \"https://www.box.com/s/vspke7y05sb214wjokpk\",\n    \"download_url\": \"https://www.box.com/shared/static/rh935iit6ewrmw0unyul.jpeg\",\n    \"vanity_url\": \"https://acme.app.box.com/v/my_url/\",\n    \"access\": \"open\",\n    \"effective_access\": \"company\",\n    \"effective_permission\": \"can_download\",\n    \"unshared_at\": \"2018-04-13T13:53:23-07:00\",\n    \"is_password_enabled\": true,\n    \"permissions\": {\n      \"can_download\": true,\n      \"can_preview\": true\n    },\n    \"download_count\": 3,\n    \"preview_count\": 3\n  },\n  \"folder_upload_email\": {\n    \"access\": \"open\",\n    \"email\": \"upload.Contracts.asd7asd@u.box.com\"\n  },\n  \"parent\": {\n    \"id\": \"12345\",\n    \"etag\": \"1\",\n    \"type\": \"folder\",\n    \"sequence_id\": \"3\",\n    \"name\": \"Contracts\"\n  },\n  \"item_status\": \"active\",\n  \"item_collection\": {\n    \"total_count\": 5000,\n    \"limit\": 1000,\n    \"offset\": 2000,\n    \"order\": [\n      {\n        \"by\": \"type\",\n        \"direction\": \"ASC\"\n      }\n    ],\n    \"entries\": {\n      \"id\": \"12345\",\n      \"etag\": \"1\",\n      \"type\": \"file\",\n      \"sequence_id\": \"3\",\n      \"name\": \"Contract.pdf\"\n    }\n  },\n  \"sync_state\": \"synced\",\n  \"has_collaborations\": true,\n  \"permissions\": {\n    \"can_delete\": true,\n    \"can_download\": true,\n    \"can_invite_collaborator\": true,\n    \"can_rename\": true,\n    \"can_set_share_access\": true,\n    \"can_share\": true,\n    \"can_upload\": true\n  },\n  \"tags\": [\n    \"approved\"\n  ],\n  \"can_non_owners_invite\": true,\n  \"is_externally_owned\": true,\n  \"is_collaboration_restricted_to_enterprise\": true,\n  \"allowed_shared_link_access_levels\": [\n    \"open\"\n  ],\n  \"allowed_invitee_roles\": [\n    \"editor\"\n  ],\n  \"watermark_info\": {\n    \"is_watermarked\": true\n  },\n  \"can_non_owners_view_collaborators\": true\n}"
            },
            {
              "id": "c6adf95d-3df9-4221-b2d1-13d6eee249d5",
              "name": "[404] Returns an error if the folder is not in the trash.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/trash?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "trash"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "dbf406c7-0d46-456a-a7a2-8afb96ba19b8",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Retrieves a folder that has been moved to the trash.\n\nhttps://developer.box.com/en/reference/get-folders-id-trash"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        },
        {
          "name": "Restore folder",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "58337b24-4278-4ac2-ad90-7b6c6e0dc436",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "87cfd51c-7ac1-41c7-bf4e-58bd9c1e42b8",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Restored Photos\",\n  \"parent\": {\n    \"id\": \"123\"\n  }\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/folders/:folder_id?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "folders",
                ":folder_id"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "be66e2bf-cae9-45b1-af28-feb6966d896a",
                  "key": "folder_id",
                  "value": "0",
                  "type": "string",
                  "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                }
              ]
            },
            "description": "Restores a folder that has been moved to the trash.\n\nhttps://developer.box.com/en/reference/post-folders-id"
          },
          "response": [
            {
              "id": "07703963-2746-4591-b5e2-6f6af4f69f7a",
              "name": "[201] Returns a folder object when the folder has been restored.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Restored Photos\",\n  \"parent\": {\n    \"id\": \"123\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "be66e2bf-cae9-45b1-af28-feb6966d896a",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Restores a folder that has been moved to the trash.\n\nhttps://developer.box.com/en/reference/post-folders-id"
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"12345\",\n  \"etag\": \"1\",\n  \"type\": \"folder\",\n  \"sequence_id\": \"3\",\n  \"name\": \"Contracts\",\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"description\": \"Legal contracts for the new ACME deal\",\n  \"size\": 629644,\n  \"path_collection\": {\n    \"total_count\": 1,\n    \"entries\": [\n      {\n        \"id\": \"12345\",\n        \"etag\": \"1\",\n        \"type\": \"folder\",\n        \"sequence_id\": \"3\",\n        \"name\": \"Contracts\"\n      }\n    ]\n  },\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"modified_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"trashed_at\": \"2012-12-12T10:53:43-08:00\",\n  \"purged_at\": \"2012-12-12T10:53:43-08:00\",\n  \"content_created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"content_modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"expires_at\": \"2012-12-12T10:53:43-08:00\",\n  \"owned_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"shared_link\": {\n    \"url\": \"https://www.box.com/s/vspke7y05sb214wjokpk\",\n    \"download_url\": \"https://www.box.com/shared/static/rh935iit6ewrmw0unyul.jpeg\",\n    \"vanity_url\": \"https://acme.app.box.com/v/my_url/\",\n    \"access\": \"open\",\n    \"effective_access\": \"company\",\n    \"effective_permission\": \"can_download\",\n    \"unshared_at\": \"2018-04-13T13:53:23-07:00\",\n    \"is_password_enabled\": true,\n    \"permissions\": {\n      \"can_download\": true,\n      \"can_preview\": true\n    },\n    \"download_count\": 3,\n    \"preview_count\": 3\n  },\n  \"folder_upload_email\": {\n    \"access\": \"open\",\n    \"email\": \"upload.Contracts.asd7asd@u.box.com\"\n  },\n  \"parent\": {\n    \"id\": \"12345\",\n    \"etag\": \"1\",\n    \"type\": \"folder\",\n    \"sequence_id\": \"3\",\n    \"name\": \"Contracts\"\n  },\n  \"item_status\": \"active\",\n  \"item_collection\": {\n    \"total_count\": 5000,\n    \"limit\": 1000,\n    \"offset\": 2000,\n    \"order\": [\n      {\n        \"by\": \"type\",\n        \"direction\": \"ASC\"\n      }\n    ],\n    \"entries\": {\n      \"id\": \"12345\",\n      \"etag\": \"1\",\n      \"type\": \"file\",\n      \"sequence_id\": \"3\",\n      \"name\": \"Contract.pdf\"\n    }\n  },\n  \"sync_state\": \"synced\",\n  \"has_collaborations\": true,\n  \"permissions\": {\n    \"can_delete\": true,\n    \"can_download\": true,\n    \"can_invite_collaborator\": true,\n    \"can_rename\": true,\n    \"can_set_share_access\": true,\n    \"can_share\": true,\n    \"can_upload\": true\n  },\n  \"tags\": [\n    \"approved\"\n  ],\n  \"can_non_owners_invite\": true,\n  \"is_externally_owned\": true,\n  \"is_collaboration_restricted_to_enterprise\": true,\n  \"allowed_shared_link_access_levels\": [\n    \"open\"\n  ],\n  \"allowed_invitee_roles\": [\n    \"editor\"\n  ],\n  \"watermark_info\": {\n    \"is_watermarked\": true\n  },\n  \"can_non_owners_view_collaborators\": true\n}"
            },
            {
              "id": "0ca0bd7f-a37e-4020-af64-4e490e188bee",
              "name": "[404] Returns an error if the folder is not in the trash.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Restored Photos\",\n  \"parent\": {\n    \"id\": \"123\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "be66e2bf-cae9-45b1-af28-feb6966d896a",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Restores a folder that has been moved to the trash.\n\nhttps://developer.box.com/en/reference/post-folders-id"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "105dc623-ca2d-40b4-b4cb-f060c832cf64",
              "name": "[403] Returns an error if the user does not have access to the folder",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Restored Photos\",\n  \"parent\": {\n    \"id\": \"123\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "be66e2bf-cae9-45b1-af28-feb6966d896a",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Restores a folder that has been moved to the trash.\n\nhttps://developer.box.com/en/reference/post-folders-id"
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "7e738561-e66c-485c-85bd-54ef406ee275",
              "name": "[409] * Returned an error if there is a folder with the same name",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Restored Photos\",\n  \"parent\": {\n    \"id\": \"123\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "be66e2bf-cae9-45b1-af28-feb6966d896a",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Restores a folder that has been moved to the trash.\n\nhttps://developer.box.com/en/reference/post-folders-id"
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        },
        {
          "name": "Permanently remove folder",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "a360f489-b3b4-429c-b989-4f447f74717d",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "7372adb7-547f-40f3-b63b-76d2e4297a41",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/trash",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "folders",
                ":folder_id",
                "trash"
              ],
              "variable": [
                {
                  "id": "f1c7f6d5-f9df-479d-b6dd-23265f926bc0",
                  "key": "folder_id",
                  "value": "0",
                  "type": "string",
                  "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                }
              ]
            },
            "description": "Permanently deletes a folder that is in the trash.\n\nhttps://developer.box.com/en/reference/delete-folders-id-trash"
          },
          "response": [
            {
              "id": "7150f072-049e-4b86-9ff8-3a35f6b7c16b",
              "name": "[404] Returns an error if the folder is not in the trash.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/trash",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "trash"
                  ],
                  "variable": [
                    {
                      "id": "f1c7f6d5-f9df-479d-b6dd-23265f926bc0",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Permanently deletes a folder that is in the trash.\n\nhttps://developer.box.com/en/reference/delete-folders-id-trash"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "9bd1f857-3204-4de4-963b-a84fb2e5b350",
              "name": "[204] Returns an empty response when the folder was",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/trash",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "trash"
                  ],
                  "variable": [
                    {
                      "id": "f1c7f6d5-f9df-479d-b6dd-23265f926bc0",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Permanently deletes a folder that is in the trash.\n\nhttps://developer.box.com/en/reference/delete-folders-id-trash"
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        }
      ],
      "_postman_id": "83e75bb8-5222-42af-997f-6813751cd3b5"
    },
    {
      "name": "Trashed items",
      "item": [
        {
          "name": "List trashed items",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "cd294574-beff-4ef1-96cc-67baf5cfd48d",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "a47835d3-77d1-43d7-9315-9a40715c5245",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/folders/trash/items?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "folders",
                "trash",
                "items"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "1000",
                  "description": "The maximum number of items to return per page.",
                  "disabled": true
                },
                {
                  "key": "offset",
                  "value": "1000",
                  "description": "The offset of the item at which to begin the response.",
                  "disabled": true
                },
                {
                  "key": "usemarker",
                  "value": "true",
                  "description": "Specifies whether to use marker-based pagination instead of\noffset-based pagination. Only one pagination method can\nbe used at a time.\n\nBy setting this value to true, the API will return a `marker` field\nthat can be passed as a parameter to this endpoint to get the next\npage of the response.",
                  "disabled": true
                },
                {
                  "key": "marker",
                  "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                  "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                  "disabled": true
                },
                {
                  "key": "direction",
                  "value": "ASC",
                  "description": "The direction to sort results in. This can be either in alphabetical ascending\n(`ASC`) or descending (`DESC`) order.",
                  "disabled": true
                },
                {
                  "key": "sort",
                  "value": "id",
                  "description": "Defines the **second** attribute by which items\nare sorted.\n\nItems are always sorted by their `type` first, with\nfolders listed before files, and files listed\nbefore web links.\n\nThis parameter is not supported when using marker-based pagination.",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieves the files and folders that have been moved\n\nhttps://developer.box.com/en/reference/get-folders-trash-items"
          },
          "response": [
            {
              "id": "33c4a525-a026-40b1-b94b-3f79158d1f95",
              "name": "[200] Returns a list of items that have been deleted",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/trash/items?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    "trash",
                    "items"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    },
                    {
                      "key": "offset",
                      "value": "1000",
                      "description": "The offset of the item at which to begin the response.",
                      "disabled": true
                    },
                    {
                      "key": "usemarker",
                      "value": "true",
                      "description": "Specifies whether to use marker-based pagination instead of\noffset-based pagination. Only one pagination method can\nbe used at a time.\n\nBy setting this value to true, the API will return a `marker` field\nthat can be passed as a parameter to this endpoint to get the next\npage of the response.",
                      "disabled": true
                    },
                    {
                      "key": "marker",
                      "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                      "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                      "disabled": true
                    },
                    {
                      "key": "direction",
                      "value": "ASC",
                      "description": "The direction to sort results in. This can be either in alphabetical ascending\n(`ASC`) or descending (`DESC`) order.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "id",
                      "description": "Defines the **second** attribute by which items\nare sorted.\n\nItems are always sorted by their `type` first, with\nfolders listed before files, and files listed\nbefore web links.\n\nThis parameter is not supported when using marker-based pagination.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Retrieves the files and folders that have been moved\n\nhttps://developer.box.com/en/reference/get-folders-trash-items"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"total_count\": 5000,\n  \"limit\": 1000,\n  \"offset\": 2000,\n  \"order\": [\n    {\n      \"by\": \"type\",\n      \"direction\": \"ASC\"\n    }\n  ],\n  \"entries\": {\n    \"id\": \"12345\",\n    \"etag\": \"1\",\n    \"type\": \"file\",\n    \"sequence_id\": \"3\",\n    \"name\": \"Contract.pdf\"\n  }\n}"
            },
            {
              "id": "e0bfc481-4175-419b-8f7c-8d93d34e1af0",
              "name": "[400] Returns an error if some of the parameters are missing or",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/trash/items?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    "trash",
                    "items"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    },
                    {
                      "key": "offset",
                      "value": "1000",
                      "description": "The offset of the item at which to begin the response.",
                      "disabled": true
                    },
                    {
                      "key": "usemarker",
                      "value": "true",
                      "description": "Specifies whether to use marker-based pagination instead of\noffset-based pagination. Only one pagination method can\nbe used at a time.\n\nBy setting this value to true, the API will return a `marker` field\nthat can be passed as a parameter to this endpoint to get the next\npage of the response.",
                      "disabled": true
                    },
                    {
                      "key": "marker",
                      "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                      "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                      "disabled": true
                    },
                    {
                      "key": "direction",
                      "value": "ASC",
                      "description": "The direction to sort results in. This can be either in alphabetical ascending\n(`ASC`) or descending (`DESC`) order.",
                      "disabled": true
                    },
                    {
                      "key": "sort",
                      "value": "id",
                      "description": "Defines the **second** attribute by which items\nare sorted.\n\nItems are always sorted by their `type` first, with\nfolders listed before files, and files listed\nbefore web links.\n\nThis parameter is not supported when using marker-based pagination.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Retrieves the files and folders that have been moved\n\nhttps://developer.box.com/en/reference/get-folders-trash-items"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        }
      ],
      "_postman_id": "42db598f-b984-4681-83cd-11f965077421"
    },
    {
      "name": "Trashed web links",
      "item": [
        {
          "name": "Get trashed web link",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "bc9fbd12-53cf-4f86-9af6-08450762d77e",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "e7a26ad3-fe27-41bd-994a-5343f73dec4a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/web_links/:web_link_id/trash?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "web_links",
                ":web_link_id",
                "trash"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "d08ad003-d3c4-42d2-8aa2-565a504c6c07",
                  "key": "web_link_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The ID of the web link."
                }
              ]
            },
            "description": "Retrieves a web link that has been moved to the trash.\n\nhttps://developer.box.com/en/reference/get-web-links-id-trash"
          },
          "response": [
            {
              "id": "7309a9fc-3255-42d2-83c5-d1063abbdacb",
              "name": "[404] Returns an error if the web link is not in the trash.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/web_links/:web_link_id/trash?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "web_links",
                    ":web_link_id",
                    "trash"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "d08ad003-d3c4-42d2-8aa2-565a504c6c07",
                      "key": "web_link_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the web link."
                    }
                  ]
                },
                "description": "Retrieves a web link that has been moved to the trash.\n\nhttps://developer.box.com/en/reference/get-web-links-id-trash"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "81b1af6a-5f12-4f2c-a357-1b59b49a1880",
              "name": "[200] Returns the web link that was trashed,",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/web_links/:web_link_id/trash?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "web_links",
                    ":web_link_id",
                    "trash"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "d08ad003-d3c4-42d2-8aa2-565a504c6c07",
                      "key": "web_link_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the web link."
                    }
                  ]
                },
                "description": "Retrieves a web link that has been moved to the trash.\n\nhttps://developer.box.com/en/reference/get-web-links-id-trash"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"12345\",\n  \"etag\": \"1\",\n  \"type\": \"folder\",\n  \"sequence_id\": \"3\",\n  \"name\": \"Contracts\",\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"description\": \"Legal contracts for the new ACME deal\",\n  \"size\": 629644,\n  \"path_collection\": {\n    \"total_count\": 1,\n    \"entries\": [\n      {\n        \"id\": \"12345\",\n        \"etag\": \"1\",\n        \"type\": \"folder\",\n        \"sequence_id\": \"3\",\n        \"name\": \"Contracts\"\n      }\n    ]\n  },\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"modified_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"trashed_at\": \"2012-12-12T10:53:43-08:00\",\n  \"purged_at\": \"2012-12-12T10:53:43-08:00\",\n  \"content_created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"content_modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"expires_at\": \"2012-12-12T10:53:43-08:00\",\n  \"owned_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"shared_link\": {\n    \"url\": \"https://www.box.com/s/vspke7y05sb214wjokpk\",\n    \"download_url\": \"https://www.box.com/shared/static/rh935iit6ewrmw0unyul.jpeg\",\n    \"vanity_url\": \"https://acme.app.box.com/v/my_url/\",\n    \"access\": \"open\",\n    \"effective_access\": \"company\",\n    \"effective_permission\": \"can_download\",\n    \"unshared_at\": \"2018-04-13T13:53:23-07:00\",\n    \"is_password_enabled\": true,\n    \"permissions\": {\n      \"can_download\": true,\n      \"can_preview\": true\n    },\n    \"download_count\": 3,\n    \"preview_count\": 3\n  },\n  \"folder_upload_email\": {\n    \"access\": \"open\",\n    \"email\": \"upload.Contracts.asd7asd@u.box.com\"\n  },\n  \"parent\": {\n    \"id\": \"12345\",\n    \"etag\": \"1\",\n    \"type\": \"folder\",\n    \"sequence_id\": \"3\",\n    \"name\": \"Contracts\"\n  },\n  \"item_status\": \"active\",\n  \"item_collection\": {\n    \"total_count\": 5000,\n    \"limit\": 1000,\n    \"offset\": 2000,\n    \"order\": [\n      {\n        \"by\": \"type\",\n        \"direction\": \"ASC\"\n      }\n    ],\n    \"entries\": {\n      \"id\": \"12345\",\n      \"etag\": \"1\",\n      \"type\": \"file\",\n      \"sequence_id\": \"3\",\n      \"name\": \"Contract.pdf\"\n    }\n  },\n  \"sync_state\": \"synced\",\n  \"has_collaborations\": true,\n  \"permissions\": {\n    \"can_delete\": true,\n    \"can_download\": true,\n    \"can_invite_collaborator\": true,\n    \"can_rename\": true,\n    \"can_set_share_access\": true,\n    \"can_share\": true,\n    \"can_upload\": true\n  },\n  \"tags\": [\n    \"approved\"\n  ],\n  \"can_non_owners_invite\": true,\n  \"is_externally_owned\": true,\n  \"is_collaboration_restricted_to_enterprise\": true,\n  \"allowed_shared_link_access_levels\": [\n    \"open\"\n  ],\n  \"allowed_invitee_roles\": [\n    \"editor\"\n  ],\n  \"watermark_info\": {\n    \"is_watermarked\": true\n  },\n  \"can_non_owners_view_collaborators\": true\n}"
            }
          ]
        },
        {
          "name": "Restore web link",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "bceb866e-6497-412d-9338-b7055ac7b157",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "06b8469b-9ffd-4bf7-93bf-7990a9245bbd",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Restored.docx\",\n  \"parent\": {\n    \"id\": \"123\"\n  }\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/web_links/:web_link_id?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "web_links",
                ":web_link_id"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "9d7b8118-d72d-4a88-a799-968ce3deef81",
                  "key": "web_link_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The ID of the web link."
                }
              ]
            },
            "description": "Restores a web link that has been moved to the trash.\n\nhttps://developer.box.com/en/reference/post-web-links-id"
          },
          "response": [
            {
              "id": "452ac311-9530-4c09-8f59-3a2112559a0c",
              "name": "[409] Returns an error if there is an web link with the same name",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Restored.docx\",\n  \"parent\": {\n    \"id\": \"123\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/web_links/:web_link_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "web_links",
                    ":web_link_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "9d7b8118-d72d-4a88-a799-968ce3deef81",
                      "key": "web_link_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the web link."
                    }
                  ]
                },
                "description": "Restores a web link that has been moved to the trash.\n\nhttps://developer.box.com/en/reference/post-web-links-id"
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "7d2d4f30-6411-4d53-82ec-eb1c5866c88b",
              "name": "[201] Returns a web link object when it has been restored.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Restored.docx\",\n  \"parent\": {\n    \"id\": \"123\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/web_links/:web_link_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "web_links",
                    ":web_link_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "9d7b8118-d72d-4a88-a799-968ce3deef81",
                      "key": "web_link_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the web link."
                    }
                  ]
                },
                "description": "Restores a web link that has been moved to the trash.\n\nhttps://developer.box.com/en/reference/post-web-links-id"
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"web_link\",\n  \"sequence_id\": \"3\",\n  \"etag\": \"1\",\n  \"name\": \"My Bookmark\",\n  \"url\": \"https://www.example.com/example/1234\",\n  \"parent\": {\n    \"id\": \"12345\",\n    \"etag\": \"1\",\n    \"type\": \"folder\",\n    \"sequence_id\": \"3\",\n    \"name\": \"Contracts\"\n  },\n  \"description\": \"Example page\",\n  \"path_collection\": [\n    {\n      \"id\": \"12345\",\n      \"etag\": \"1\",\n      \"type\": \"folder\",\n      \"sequence_id\": \"3\",\n      \"name\": \"Contracts\"\n    }\n  ],\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"trashed_at\": \"2012-12-12T10:53:43-08:00\",\n  \"purged_at\": \"2012-12-12T10:53:43-08:00\",\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"modified_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"owned_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"shared_link\": {\n    \"url\": \"https://www.box.com/s/vspke7y05sb214wjokpk\",\n    \"download_url\": \"https://www.box.com/shared/static/rh935iit6ewrmw0unyul.jpeg\",\n    \"vanity_url\": \"https://acme.app.box.com/v/my_url/\",\n    \"access\": \"open\",\n    \"effective_access\": \"company\",\n    \"effective_permission\": \"can_download\",\n    \"unshared_at\": \"2018-04-13T13:53:23-07:00\",\n    \"is_password_enabled\": true,\n    \"permissions\": {\n      \"can_download\": true,\n      \"can_preview\": true\n    },\n    \"download_count\": 3,\n    \"preview_count\": 3\n  },\n  \"item_status\": \"active\"\n}"
            },
            {
              "id": "b68fc846-d507-4bc4-a695-771a7401cf6d",
              "name": "[403] Returns an error if the user does not have access to the folder",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Restored.docx\",\n  \"parent\": {\n    \"id\": \"123\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/web_links/:web_link_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "web_links",
                    ":web_link_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "9d7b8118-d72d-4a88-a799-968ce3deef81",
                      "key": "web_link_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the web link."
                    }
                  ]
                },
                "description": "Restores a web link that has been moved to the trash.\n\nhttps://developer.box.com/en/reference/post-web-links-id"
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "f132f458-09ed-4361-939f-25dd1672d7c6",
              "name": "[404] Returns an error if the web link is not in the trash.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Restored.docx\",\n  \"parent\": {\n    \"id\": \"123\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/web_links/:web_link_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "web_links",
                    ":web_link_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "9d7b8118-d72d-4a88-a799-968ce3deef81",
                      "key": "web_link_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the web link."
                    }
                  ]
                },
                "description": "Restores a web link that has been moved to the trash.\n\nhttps://developer.box.com/en/reference/post-web-links-id"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        },
        {
          "name": "Permanently remove web link",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c29e1fe0-a7f8-4276-96d8-6ca4665c3ba8",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "9fe2edb6-2692-435d-97ac-692708406e1c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/web_links/:web_link_id/trash",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "web_links",
                ":web_link_id",
                "trash"
              ],
              "variable": [
                {
                  "id": "317a6f98-2867-48a9-9732-3a75d1e65c82",
                  "key": "web_link_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The ID of the web link."
                }
              ]
            },
            "description": "Permanently deletes a web link that is in the trash.\n\nhttps://developer.box.com/en/reference/delete-web-links-id-trash"
          },
          "response": [
            {
              "id": "3ca7d993-1665-4238-a4a7-e08d6628ffeb",
              "name": "[204] Returns an empty response when the web link was",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/web_links/:web_link_id/trash",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "web_links",
                    ":web_link_id",
                    "trash"
                  ],
                  "variable": [
                    {
                      "id": "317a6f98-2867-48a9-9732-3a75d1e65c82",
                      "key": "web_link_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the web link."
                    }
                  ]
                },
                "description": "Permanently deletes a web link that is in the trash.\n\nhttps://developer.box.com/en/reference/delete-web-links-id-trash"
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "a5e7516e-46aa-408b-a0d1-3c087daecf1d",
              "name": "[404] Returns an error if the web link is not in the trash.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/web_links/:web_link_id/trash",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "web_links",
                    ":web_link_id",
                    "trash"
                  ],
                  "variable": [
                    {
                      "id": "317a6f98-2867-48a9-9732-3a75d1e65c82",
                      "key": "web_link_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the web link."
                    }
                  ]
                },
                "description": "Permanently deletes a web link that is in the trash.\n\nhttps://developer.box.com/en/reference/delete-web-links-id-trash"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        }
      ],
      "_postman_id": "2d9cd646-695e-410e-bfb7-5bc98c54d297"
    },
    {
      "name": "Uploads",
      "item": [
        {
          "name": "Preflight check before upload",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "13071f62-c488-43be-98e1-d350d34ddc05",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "5c08f744-1587-43d8-9a8f-6695af84e053",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "OPTIONS",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"File.mp4\",\n  \"size\": 1024,\n  \"parent\": {\n    \"id\": \"123\"\n  }\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "https://{{api.box.com}}/2.0/files/content",
            "description": "Performs a check to verify that a file will be accepted by Box\n\nhttps://developer.box.com/en/reference/options-files-content"
          },
          "response": [
            {
              "id": "060ea271-3b03-45a0-8c37-55bc51732e0c",
              "name": "[409] If the check did not pass, the response will include some details on",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "OPTIONS",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"File.mp4\",\n  \"size\": 1024,\n  \"parent\": {\n    \"id\": \"123\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/files/content",
                "description": "Performs a check to verify that a file will be accepted by Box\n\nhttps://developer.box.com/en/reference/options-files-content"
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\",\n  \"context_info\": {\n    \"conflicts\": {\n      \"id\": \"12345\",\n      \"etag\": \"1\",\n      \"type\": \"file\",\n      \"sequence_id\": \"3\",\n      \"name\": \"Contract.pdf\",\n      \"sha1\": \"85136C79CBF9FE36BB9D05D0639C70C265C18D37\",\n      \"file_version\": {\n        \"id\": \"12345\",\n        \"type\": \"file_version\",\n        \"sha1\": \"134b65991ed521fcfe4724b7d814ab8ded5185dc\"\n      }\n    }\n  }\n}"
            },
            {
              "id": "5c5a5591-d4e6-43d9-86bf-a3c1b0d1a7a9",
              "name": "[200] If the check passed, the response will include a session URL that",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "OPTIONS",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"File.mp4\",\n  \"size\": 1024,\n  \"parent\": {\n    \"id\": \"123\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/files/content",
                "description": "Performs a check to verify that a file will be accepted by Box\n\nhttps://developer.box.com/en/reference/options-files-content"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"upload_url\": \"https://upload-las.app.box.com/api/2.0/files/content?upload_session_id=1234\",\n  \"upload_token\": \"Pc3FIOG9vSGV4VHo4QzAyg5T1JvNnJoZ3ExaVNyQWw6WjRsanRKZG5lQk9qUE1BVQP\"\n}"
            }
          ]
        },
        {
          "name": "Upload file version",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "44fc29c9-85c2-41a6-9aa4-c44ba275bdee",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "646954f7-eb94-4554-9e4c-ebcb95efe045",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "If-Match",
                "value": "1",
                "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                "disabled": true
              },
              {
                "key": "Content-MD5",
                "value": "134b65991ed521fcfe4724b7d814ab8ded5185dc",
                "description": "An optional header containing the SHA1 hash of the file to\nensure that the file was not corrupted in transit.",
                "disabled": true
              },
              {
                "key": "Content-Type",
                "value": "multipart/form-data"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "attributes",
                  "value": "{\n  \"name\": \"Photo 2.0.png\",\n  \"content_modified_at\": \"2012-12-12T10:53:43-08:00\"\n}",
                  "description": "The additional attributes of the file being uploaded. Mainly the\nname and the parent folder. These attributes are part of the multi\npart request body and are in JSON format.\n\n<Message warning>\n\n  The `attributes` part of the body must come **before** the\n  `file` part. Requests that do not follow this format when\n  uploading the file will receive a HTTP `400` error with a\n  `metadata_after_file_contents` error code.\n\n</Message>",
                  "type": "text"
                },
                {
                  "key": "file",
                  "value": "",
                  "description": "The content of the file to upload to Box.\n\n<Message warning>\n\n  The `attributes` part of the body must come **before** the\n  `file` part. Requests that do not follow this format when\n  uploading the file will receive a HTTP `400` error with a\n  `metadata_after_file_contents` error code.\n\n</Message>",
                  "type": "file"
                }
              ],
              "options": {
                "formdata": {}
              }
            },
            "url": {
              "raw": "https://{{upload.box.com}}/api/2.0/files/:file_id/content?",
              "protocol": "https",
              "host": [
                "{{upload.box.com}}"
              ],
              "path": [
                "api",
                "2.0",
                "files",
                ":file_id",
                "content"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "87b456d8-b89e-4eaf-b759-01387edef31c",
                  "key": "file_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                }
              ]
            },
            "description": "Update a file's content. For file sizes over 50MB we recommend\n\nhttps://developer.box.com/en/reference/post-files-id-content"
          },
          "response": [
            {
              "id": "6e1fec6d-fb5f-46e3-86b8-493642f98d23",
              "name": "[200] Returns the new file object in a list.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "If-Match",
                    "value": "1",
                    "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                    "disabled": true
                  },
                  {
                    "key": "Content-MD5",
                    "value": "134b65991ed521fcfe4724b7d814ab8ded5185dc",
                    "description": "An optional header containing the SHA1 hash of the file to\nensure that the file was not corrupted in transit.",
                    "disabled": true
                  },
                  {
                    "key": "Content-Type",
                    "value": "multipart/form-data"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "attributes",
                      "value": "{\n  \"name\": \"Photo 2.0.png\",\n  \"content_modified_at\": \"2012-12-12T10:53:43-08:00\"\n}",
                      "description": "The additional attributes of the file being uploaded. Mainly the\nname and the parent folder. These attributes are part of the multi\npart request body and are in JSON format.\n\n<Message warning>\n\n  The `attributes` part of the body must come **before** the\n  `file` part. Requests that do not follow this format when\n  uploading the file will receive a HTTP `400` error with a\n  `metadata_after_file_contents` error code.\n\n</Message>",
                      "type": "text"
                    },
                    {
                      "key": "file",
                      "value": "",
                      "description": "The content of the file to upload to Box.\n\n<Message warning>\n\n  The `attributes` part of the body must come **before** the\n  `file` part. Requests that do not follow this format when\n  uploading the file will receive a HTTP `400` error with a\n  `metadata_after_file_contents` error code.\n\n</Message>",
                      "type": "file"
                    }
                  ],
                  "options": {
                    "formdata": {}
                  }
                },
                "url": {
                  "raw": "https://{{upload.box.com}}/api/2.0/files/:file_id/content?",
                  "protocol": "https",
                  "host": [
                    "{{upload.box.com}}"
                  ],
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    ":file_id",
                    "content"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "87b456d8-b89e-4eaf-b759-01387edef31c",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Update a file's content. For file sizes over 50MB we recommend\n\nhttps://developer.box.com/en/reference/post-files-id-content"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"total_count\": 1,\n  \"entries\": [\n    {\n      \"id\": \"12345\",\n      \"etag\": \"1\",\n      \"type\": \"file\",\n      \"sequence_id\": \"3\",\n      \"name\": \"Contract.pdf\",\n      \"sha1\": \"85136C79CBF9FE36BB9D05D0639C70C265C18D37\",\n      \"description\": \"Contract for Q1 renewal\",\n      \"size\": 629644,\n      \"path_collection\": {\n        \"total_count\": 1,\n        \"entries\": [\n          {\n            \"id\": \"12345\",\n            \"etag\": \"1\",\n            \"type\": \"folder\",\n            \"sequence_id\": \"3\",\n            \"name\": \"Contracts\"\n          }\n        ]\n      },\n      \"created_at\": \"2012-12-12T10:53:43-08:00\",\n      \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n      \"trashed_at\": \"2012-12-12T10:53:43-08:00\",\n      \"purged_at\": \"2012-12-12T10:53:43-08:00\",\n      \"content_created_at\": \"2012-12-12T10:53:43-08:00\",\n      \"content_modified_at\": \"2012-12-12T10:53:43-08:00\",\n      \"created_by\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      },\n      \"modified_by\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      },\n      \"owned_by\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      },\n      \"shared_link\": {\n        \"url\": \"https://www.box.com/s/vspke7y05sb214wjokpk\",\n        \"download_url\": \"https://www.box.com/shared/static/rh935iit6ewrmw0unyul.jpeg\",\n        \"vanity_url\": \"https://acme.app.box.com/v/my_url/\",\n        \"access\": \"open\",\n        \"effective_access\": \"company\",\n        \"effective_permission\": \"can_download\",\n        \"unshared_at\": \"2018-04-13T13:53:23-07:00\",\n        \"is_password_enabled\": true,\n        \"permissions\": {\n          \"can_download\": true,\n          \"can_preview\": true\n        },\n        \"download_count\": 3,\n        \"preview_count\": 3\n      },\n      \"parent\": {\n        \"id\": \"12345\",\n        \"etag\": \"1\",\n        \"type\": \"folder\",\n        \"sequence_id\": \"3\",\n        \"name\": \"Contracts\"\n      },\n      \"item_status\": \"active\",\n      \"version_number\": \"1\",\n      \"comment_count\": 10,\n      \"permissions\": {\n        \"can_delete\": true,\n        \"can_download\": true,\n        \"can_invite_collaborator\": true,\n        \"can_rename\": true,\n        \"can_set_share_access\": true,\n        \"can_share\": true,\n        \"can_annotate\": true,\n        \"can_comment\": true,\n        \"can_preview\": true,\n        \"can_upload\": true,\n        \"can_view_annotations_all\": true,\n        \"can_view_annotations_self\": true\n      },\n      \"tags\": [\n        \"approved\"\n      ],\n      \"lock\": {\n        \"id\": \"11446498\",\n        \"type\": \"lock\",\n        \"created_by\": {\n          \"id\": \"11446498\",\n          \"type\": \"user\",\n          \"name\": \"Aaron Levie\",\n          \"login\": \"ceo@example.com\"\n        },\n        \"created_at\": \"2012-12-12T10:53:43-08:00\",\n        \"expired_at\": \"2012-12-12T10:53:43-08:00\",\n        \"is_download_prevented\": true\n      },\n      \"extension\": \"pdf\",\n      \"is_package\": true,\n      \"expiring_embed_link\": {\n        \"access_token\": \"c3FIOG9vSGV4VHo4QzAyg5T1JvNnJoZ3ExaVNyQWw6WjRsanRKZG5lQk9qUE1BVQ\",\n        \"expires_in\": 3600,\n        \"token_type\": \"bearer\",\n        \"restricted_to\": [\n          {\n            \"scope\": \"item_download\",\n            \"object\": {\n              \"id\": \"12345\",\n              \"etag\": \"1\",\n              \"type\": \"file\",\n              \"sequence_id\": \"3\",\n              \"name\": \"Contract.pdf\"\n            }\n          }\n        ],\n        \"url\": \"https://cloud.app.box.com/preview/expiring_embed/...\"\n      },\n      \"watermark_info\": {\n        \"is_watermarked\": true\n      },\n      \"allowed_invitee_roles\": [\n        \"editor\"\n      ],\n      \"is_externally_owned\": true,\n      \"has_collaborations\": true,\n      \"metadata\": {\n        \"global\": {\n          \"marketingCollateral\": {\n            \"$canEdit\": true,\n            \"$id\": \"01234500-12f1-1234-aa12-b1d234cb567e\",\n            \"$parent\": \"folder_59449484661\",\n            \"$scope\": \"enterprise_27335\",\n            \"$template\": \"properties\",\n            \"$type\": \"properties-6bcba49f-ca6d-4d2a-a758-57fe6edf44d0\",\n            \"$typeVersion\": 2,\n            \"$version\": 1\n          }\n        }\n      },\n      \"expires_at\": \"2012-12-12T10:53:43-08:00\",\n      \"representations\": {\n        \"entries\": [\n          {\n            \"content\": {\n              \"url_template\": \"https://dl.boxcloud.com/api/2.0/internal_files/123/versions/345/representations/png_paged_2048x2048/content/{+asset_path}?watermark_content=4567\"\n            },\n            \"info\": {\n              \"url\": \"https://api.box.com/2.0/internal_files/123/versions/345/representations/png_paged_2048x2048\"\n            },\n            \"properties\": {\n              \"dimensions\": \"2048x2048\",\n              \"paged\": true,\n              \"thumb\": true\n            },\n            \"representation\": \"png\",\n            \"status\": {\n              \"state\": \"success\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
            },
            {
              "id": "cf1b5ff7-5287-45f6-a1eb-925a55e58f51",
              "name": "[412] Returns an error when the `If-Match` header does not match",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "If-Match",
                    "value": "1",
                    "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                    "disabled": true
                  },
                  {
                    "key": "Content-MD5",
                    "value": "134b65991ed521fcfe4724b7d814ab8ded5185dc",
                    "description": "An optional header containing the SHA1 hash of the file to\nensure that the file was not corrupted in transit.",
                    "disabled": true
                  },
                  {
                    "key": "Content-Type",
                    "value": "multipart/form-data"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "attributes",
                      "value": "{\n  \"name\": \"Photo 2.0.png\",\n  \"content_modified_at\": \"2012-12-12T10:53:43-08:00\"\n}",
                      "description": "The additional attributes of the file being uploaded. Mainly the\nname and the parent folder. These attributes are part of the multi\npart request body and are in JSON format.\n\n<Message warning>\n\n  The `attributes` part of the body must come **before** the\n  `file` part. Requests that do not follow this format when\n  uploading the file will receive a HTTP `400` error with a\n  `metadata_after_file_contents` error code.\n\n</Message>",
                      "type": "text"
                    },
                    {
                      "key": "file",
                      "value": "",
                      "description": "The content of the file to upload to Box.\n\n<Message warning>\n\n  The `attributes` part of the body must come **before** the\n  `file` part. Requests that do not follow this format when\n  uploading the file will receive a HTTP `400` error with a\n  `metadata_after_file_contents` error code.\n\n</Message>",
                      "type": "file"
                    }
                  ],
                  "options": {
                    "formdata": {}
                  }
                },
                "url": {
                  "raw": "https://{{upload.box.com}}/api/2.0/files/:file_id/content?",
                  "protocol": "https",
                  "host": [
                    "{{upload.box.com}}"
                  ],
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    ":file_id",
                    "content"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "87b456d8-b89e-4eaf-b759-01387edef31c",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Update a file's content. For file sizes over 50MB we recommend\n\nhttps://developer.box.com/en/reference/post-files-id-content"
              },
              "status": "Precondition Failed",
              "code": 412,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        },
        {
          "name": "Upload file",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6604236e-dc15-402b-a5c6-33eeab816b2a",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "79f4747e-0f54-4c40-97fd-a36943cefcdf",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-MD5",
                "value": "134b65991ed521fcfe4724b7d814ab8ded5185dc",
                "description": "An optional header containing the SHA1 hash of the file to\nensure that the file was not corrupted in transit.",
                "disabled": true
              },
              {
                "key": "Content-Type",
                "value": "multipart/form-data"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": [
                {
                  "key": "attributes",
                  "value": "{\n  \"name\": \"Photo.png\",\n  \"parent\": {\n    \"id\": \"124132\"\n  },\n  \"content_created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"content_modified_at\": \"2012-12-12T10:53:43-08:00\"\n}",
                  "description": "The additional attributes of the file being uploaded. Mainly the\nname and the parent folder. These attributes are part of the multi\npart request body and are in JSON format.\n\n<Message warning>\n\n  The `attributes` part of the body must come **before** the\n  `file` part. Requests that do not follow this format when\n  uploading the file will receive a HTTP `400` error with a\n  `metadata_after_file_contents` error code.\n\n</Message>",
                  "type": "text"
                },
                {
                  "key": "file",
                  "value": "",
                  "description": "The content of the file to upload to Box.\n\n<Message warning>\n\n  The `attributes` part of the body must come **before** the\n  `file` part. Requests that do not follow this format when\n  uploading the file will receive a HTTP `400` error with a\n  `metadata_after_file_contents` error code.\n\n</Message>",
                  "type": "file"
                }
              ],
              "options": {
                "formdata": {}
              }
            },
            "url": {
              "raw": "https://{{upload.box.com}}/api/2.0/files/content?",
              "protocol": "https",
              "host": [
                "{{upload.box.com}}"
              ],
              "path": [
                "api",
                "2.0",
                "files",
                "content"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ]
            },
            "description": "Uploads a small file to Box. For file sizes over 50MB we recommend\n\nhttps://developer.box.com/en/reference/post-files-content"
          },
          "response": [
            {
              "id": "3f15cec0-14a3-4e49-b978-86bea3bbf708",
              "name": "[201] Returns the new file object in a list.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-MD5",
                    "value": "134b65991ed521fcfe4724b7d814ab8ded5185dc",
                    "description": "An optional header containing the SHA1 hash of the file to\nensure that the file was not corrupted in transit.",
                    "disabled": true
                  },
                  {
                    "key": "Content-Type",
                    "value": "multipart/form-data"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "attributes",
                      "value": "{\n  \"name\": \"Photo.png\",\n  \"parent\": {\n    \"id\": \"124132\"\n  },\n  \"content_created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"content_modified_at\": \"2012-12-12T10:53:43-08:00\"\n}",
                      "description": "The additional attributes of the file being uploaded. Mainly the\nname and the parent folder. These attributes are part of the multi\npart request body and are in JSON format.\n\n<Message warning>\n\n  The `attributes` part of the body must come **before** the\n  `file` part. Requests that do not follow this format when\n  uploading the file will receive a HTTP `400` error with a\n  `metadata_after_file_contents` error code.\n\n</Message>",
                      "type": "text"
                    },
                    {
                      "key": "file",
                      "value": "",
                      "description": "The content of the file to upload to Box.\n\n<Message warning>\n\n  The `attributes` part of the body must come **before** the\n  `file` part. Requests that do not follow this format when\n  uploading the file will receive a HTTP `400` error with a\n  `metadata_after_file_contents` error code.\n\n</Message>",
                      "type": "file"
                    }
                  ],
                  "options": {
                    "formdata": {}
                  }
                },
                "url": {
                  "raw": "https://{{upload.box.com}}/api/2.0/files/content?",
                  "protocol": "https",
                  "host": [
                    "{{upload.box.com}}"
                  ],
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    "content"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Uploads a small file to Box. For file sizes over 50MB we recommend\n\nhttps://developer.box.com/en/reference/post-files-content"
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"total_count\": 1,\n  \"entries\": [\n    {\n      \"id\": \"12345\",\n      \"etag\": \"1\",\n      \"type\": \"file\",\n      \"sequence_id\": \"3\",\n      \"name\": \"Contract.pdf\",\n      \"sha1\": \"85136C79CBF9FE36BB9D05D0639C70C265C18D37\",\n      \"description\": \"Contract for Q1 renewal\",\n      \"size\": 629644,\n      \"path_collection\": {\n        \"total_count\": 1,\n        \"entries\": [\n          {\n            \"id\": \"12345\",\n            \"etag\": \"1\",\n            \"type\": \"folder\",\n            \"sequence_id\": \"3\",\n            \"name\": \"Contracts\"\n          }\n        ]\n      },\n      \"created_at\": \"2012-12-12T10:53:43-08:00\",\n      \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n      \"trashed_at\": \"2012-12-12T10:53:43-08:00\",\n      \"purged_at\": \"2012-12-12T10:53:43-08:00\",\n      \"content_created_at\": \"2012-12-12T10:53:43-08:00\",\n      \"content_modified_at\": \"2012-12-12T10:53:43-08:00\",\n      \"created_by\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      },\n      \"modified_by\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      },\n      \"owned_by\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      },\n      \"shared_link\": {\n        \"url\": \"https://www.box.com/s/vspke7y05sb214wjokpk\",\n        \"download_url\": \"https://www.box.com/shared/static/rh935iit6ewrmw0unyul.jpeg\",\n        \"vanity_url\": \"https://acme.app.box.com/v/my_url/\",\n        \"access\": \"open\",\n        \"effective_access\": \"company\",\n        \"effective_permission\": \"can_download\",\n        \"unshared_at\": \"2018-04-13T13:53:23-07:00\",\n        \"is_password_enabled\": true,\n        \"permissions\": {\n          \"can_download\": true,\n          \"can_preview\": true\n        },\n        \"download_count\": 3,\n        \"preview_count\": 3\n      },\n      \"parent\": {\n        \"id\": \"12345\",\n        \"etag\": \"1\",\n        \"type\": \"folder\",\n        \"sequence_id\": \"3\",\n        \"name\": \"Contracts\"\n      },\n      \"item_status\": \"active\",\n      \"version_number\": \"1\",\n      \"comment_count\": 10,\n      \"permissions\": {\n        \"can_delete\": true,\n        \"can_download\": true,\n        \"can_invite_collaborator\": true,\n        \"can_rename\": true,\n        \"can_set_share_access\": true,\n        \"can_share\": true,\n        \"can_annotate\": true,\n        \"can_comment\": true,\n        \"can_preview\": true,\n        \"can_upload\": true,\n        \"can_view_annotations_all\": true,\n        \"can_view_annotations_self\": true\n      },\n      \"tags\": [\n        \"approved\"\n      ],\n      \"lock\": {\n        \"id\": \"11446498\",\n        \"type\": \"lock\",\n        \"created_by\": {\n          \"id\": \"11446498\",\n          \"type\": \"user\",\n          \"name\": \"Aaron Levie\",\n          \"login\": \"ceo@example.com\"\n        },\n        \"created_at\": \"2012-12-12T10:53:43-08:00\",\n        \"expired_at\": \"2012-12-12T10:53:43-08:00\",\n        \"is_download_prevented\": true\n      },\n      \"extension\": \"pdf\",\n      \"is_package\": true,\n      \"expiring_embed_link\": {\n        \"access_token\": \"c3FIOG9vSGV4VHo4QzAyg5T1JvNnJoZ3ExaVNyQWw6WjRsanRKZG5lQk9qUE1BVQ\",\n        \"expires_in\": 3600,\n        \"token_type\": \"bearer\",\n        \"restricted_to\": [\n          {\n            \"scope\": \"item_download\",\n            \"object\": {\n              \"id\": \"12345\",\n              \"etag\": \"1\",\n              \"type\": \"file\",\n              \"sequence_id\": \"3\",\n              \"name\": \"Contract.pdf\"\n            }\n          }\n        ],\n        \"url\": \"https://cloud.app.box.com/preview/expiring_embed/...\"\n      },\n      \"watermark_info\": {\n        \"is_watermarked\": true\n      },\n      \"allowed_invitee_roles\": [\n        \"editor\"\n      ],\n      \"is_externally_owned\": true,\n      \"has_collaborations\": true,\n      \"metadata\": {\n        \"global\": {\n          \"marketingCollateral\": {\n            \"$canEdit\": true,\n            \"$id\": \"01234500-12f1-1234-aa12-b1d234cb567e\",\n            \"$parent\": \"folder_59449484661\",\n            \"$scope\": \"enterprise_27335\",\n            \"$template\": \"properties\",\n            \"$type\": \"properties-6bcba49f-ca6d-4d2a-a758-57fe6edf44d0\",\n            \"$typeVersion\": 2,\n            \"$version\": 1\n          }\n        }\n      },\n      \"expires_at\": \"2012-12-12T10:53:43-08:00\",\n      \"representations\": {\n        \"entries\": [\n          {\n            \"content\": {\n              \"url_template\": \"https://dl.boxcloud.com/api/2.0/internal_files/123/versions/345/representations/png_paged_2048x2048/content/{+asset_path}?watermark_content=4567\"\n            },\n            \"info\": {\n              \"url\": \"https://api.box.com/2.0/internal_files/123/versions/345/representations/png_paged_2048x2048\"\n            },\n            \"properties\": {\n              \"dimensions\": \"2048x2048\",\n              \"paged\": true,\n              \"thumb\": true\n            },\n            \"representation\": \"png\",\n            \"status\": {\n              \"state\": \"success\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
            },
            {
              "id": "9bb122fd-56e5-4918-964b-fd1825086a46",
              "name": "[409] Returns an error if the file already exists,",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-MD5",
                    "value": "134b65991ed521fcfe4724b7d814ab8ded5185dc",
                    "description": "An optional header containing the SHA1 hash of the file to\nensure that the file was not corrupted in transit.",
                    "disabled": true
                  },
                  {
                    "key": "Content-Type",
                    "value": "multipart/form-data"
                  }
                ],
                "body": {
                  "mode": "formdata",
                  "formdata": [
                    {
                      "key": "attributes",
                      "value": "{\n  \"name\": \"Photo.png\",\n  \"parent\": {\n    \"id\": \"124132\"\n  },\n  \"content_created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"content_modified_at\": \"2012-12-12T10:53:43-08:00\"\n}",
                      "description": "The additional attributes of the file being uploaded. Mainly the\nname and the parent folder. These attributes are part of the multi\npart request body and are in JSON format.\n\n<Message warning>\n\n  The `attributes` part of the body must come **before** the\n  `file` part. Requests that do not follow this format when\n  uploading the file will receive a HTTP `400` error with a\n  `metadata_after_file_contents` error code.\n\n</Message>",
                      "type": "text"
                    },
                    {
                      "key": "file",
                      "value": "",
                      "description": "The content of the file to upload to Box.\n\n<Message warning>\n\n  The `attributes` part of the body must come **before** the\n  `file` part. Requests that do not follow this format when\n  uploading the file will receive a HTTP `400` error with a\n  `metadata_after_file_contents` error code.\n\n</Message>",
                      "type": "file"
                    }
                  ],
                  "options": {
                    "formdata": {}
                  }
                },
                "url": {
                  "raw": "https://{{upload.box.com}}/api/2.0/files/content?",
                  "protocol": "https",
                  "host": [
                    "{{upload.box.com}}"
                  ],
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    "content"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Uploads a small file to Box. For file sizes over 50MB we recommend\n\nhttps://developer.box.com/en/reference/post-files-content"
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        }
      ],
      "_postman_id": "a71f337a-64de-4a96-895c-ec78d3d43f6a"
    },
    {
      "name": "Uploads (Chunked)",
      "item": [
        {
          "name": "Get upload session",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5f96e01f-7a06-4f49-ab3e-a3f73a24f572",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "3a11e920-d313-49ff-8309-6870b829134c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{upload.box.com}}/api/2.0/files/upload_sessions/:upload_session_id",
              "protocol": "https",
              "host": [
                "{{upload.box.com}}"
              ],
              "path": [
                "api",
                "2.0",
                "files",
                "upload_sessions",
                ":upload_session_id"
              ],
              "variable": [
                {
                  "id": "f59ffd83-a7f5-4ece-900c-a692d8976da3",
                  "key": "upload_session_id",
                  "value": "D5E3F7A",
                  "type": "string",
                  "description": "The ID of the upload session."
                }
              ]
            },
            "description": "Return information about an upload session.\n\nhttps://developer.box.com/en/reference/get-files-upload-sessions-id"
          },
          "response": [
            {
              "id": "8043168a-d8f7-4454-8a5f-a81059fe9477",
              "name": "[200] Returns an upload session object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{upload.box.com}}/api/2.0/files/upload_sessions/:upload_session_id",
                  "protocol": "https",
                  "host": [
                    "{{upload.box.com}}"
                  ],
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    "upload_sessions",
                    ":upload_session_id"
                  ],
                  "variable": [
                    {
                      "id": "f59ffd83-a7f5-4ece-900c-a692d8976da3",
                      "key": "upload_session_id",
                      "value": "D5E3F7A",
                      "type": "string",
                      "description": "The ID of the upload session."
                    }
                  ]
                },
                "description": "Return information about an upload session.\n\nhttps://developer.box.com/en/reference/get-files-upload-sessions-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"F971964745A5CD0C001BBE4E58196BFD\",\n  \"type\": \"upload_session\",\n  \"session_expires_at\": \"2012-12-12T10:53:43-08:00\",\n  \"part_size\": 1024,\n  \"total_parts\": 1000,\n  \"num_parts_processed\": 455,\n  \"session_endpoints\": {\n    \"upload_part\": \"https://upload.box.com/api/2.0/files/upload_sessions/F971964745A5CD0C001BBE4E58196BFD\",\n    \"commit\": \"https://upload.box.com/api/2.0/files/upload_sessions/F971964745A5CD0C001BBE4E58196BFD/commit\",\n    \"abort\": \"https://upload.box.com/api/2.0/files/upload_sessions/F971964745A5CD0C001BBE4E58196BFD\",\n    \"list_parts\": \"https://upload.box.com/api/2.0/files/upload_sessions/F971964745A5CD0C001BBE4E58196BFD/parts\",\n    \"status\": \"https://upload.box.com/api/2.0/files/upload_sessions/F971964745A5CD0C001BBE4E58196BFD\",\n    \"log_event\": \"https://upload.box.com/api/2.0/files/upload_sessions/F971964745A5CD0C001BBE4E58196BFD/log\"\n  }\n}"
            }
          ]
        },
        {
          "name": "List parts",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c05cd813-a6c0-413a-9957-66173f22b343",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "6c677929-33b2-46b2-b909-d9ee414a1219",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{upload.box.com}}/api/2.0/files/upload_sessions/:upload_session_id/parts?",
              "protocol": "https",
              "host": [
                "{{upload.box.com}}"
              ],
              "path": [
                "api",
                "2.0",
                "files",
                "upload_sessions",
                ":upload_session_id",
                "parts"
              ],
              "query": [
                {
                  "key": "offset",
                  "value": "1000",
                  "description": "The offset of the item at which to begin the response.",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "1000",
                  "description": "The maximum number of items to return per page.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "010efc72-aaaa-4b0e-9511-11fbe2220cb8",
                  "key": "upload_session_id",
                  "value": "D5E3F7A",
                  "type": "string",
                  "description": "The ID of the upload session."
                }
              ]
            },
            "description": "Return a list of the chunks uploaded to the upload\n\nhttps://developer.box.com/en/reference/get-files-upload-sessions-id-parts"
          },
          "response": [
            {
              "id": "cf7beba1-5a54-4ba8-9ef1-0a01d5b5f837",
              "name": "[200] Returns a list of parts that have been uploaded.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{upload.box.com}}/api/2.0/files/upload_sessions/:upload_session_id/parts?",
                  "protocol": "https",
                  "host": [
                    "{{upload.box.com}}"
                  ],
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    "upload_sessions",
                    ":upload_session_id",
                    "parts"
                  ],
                  "query": [
                    {
                      "key": "offset",
                      "value": "1000",
                      "description": "The offset of the item at which to begin the response.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "010efc72-aaaa-4b0e-9511-11fbe2220cb8",
                      "key": "upload_session_id",
                      "value": "D5E3F7A",
                      "type": "string",
                      "description": "The ID of the upload session."
                    }
                  ]
                },
                "description": "Return a list of the chunks uploaded to the upload\n\nhttps://developer.box.com/en/reference/get-files-upload-sessions-id-parts"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"total_count\": 5000,\n  \"limit\": 1000,\n  \"offset\": 2000,\n  \"order\": [\n    {\n      \"by\": \"type\",\n      \"direction\": \"ASC\"\n    }\n  ],\n  \"entries\": [\n    {\n      \"part_id\": \"6F2D3486\",\n      \"offset\": 16777216,\n      \"size\": 3222784,\n      \"sha1\": \"134b65991ed521fcfe4724b7d814ab8ded5185dc\"\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "Create upload session",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "04f00e25-30f1-45e0-831e-af3f747a052f",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "8a825b4d-ed29-4c90-ac73-8454bfaeab76",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"folder_id\": \"0\",\n  \"file_size\": 104857600,\n  \"file_name\": \"Project.mov\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "https://{{upload.box.com}}/api/2.0/files/upload_sessions",
            "description": "Creates an upload session for a new file.\n\nhttps://developer.box.com/en/reference/post-files-upload-sessions"
          },
          "response": [
            {
              "id": "3d180ad4-a19e-4ffd-89be-0c1089502f6f",
              "name": "[409] Returns an error if the file already exists,",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"folder_id\": \"0\",\n  \"file_size\": 104857600,\n  \"file_name\": \"Project.mov\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{upload.box.com}}/api/2.0/files/upload_sessions",
                "description": "Creates an upload session for a new file.\n\nhttps://developer.box.com/en/reference/post-files-upload-sessions"
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "48b7420f-38bb-4d42-924a-e15b1d70b812",
              "name": "[400] Returns an error if some of the parameters are missing or",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"folder_id\": \"0\",\n  \"file_size\": 104857600,\n  \"file_name\": \"Project.mov\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{upload.box.com}}/api/2.0/files/upload_sessions",
                "description": "Creates an upload session for a new file.\n\nhttps://developer.box.com/en/reference/post-files-upload-sessions"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "793470ea-7034-4118-9843-4dee4ec684b8",
              "name": "[201] Returns a new upload session.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"folder_id\": \"0\",\n  \"file_size\": 104857600,\n  \"file_name\": \"Project.mov\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{upload.box.com}}/api/2.0/files/upload_sessions",
                "description": "Creates an upload session for a new file.\n\nhttps://developer.box.com/en/reference/post-files-upload-sessions"
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"F971964745A5CD0C001BBE4E58196BFD\",\n  \"type\": \"upload_session\",\n  \"session_expires_at\": \"2012-12-12T10:53:43-08:00\",\n  \"part_size\": 1024,\n  \"total_parts\": 1000,\n  \"num_parts_processed\": 455,\n  \"session_endpoints\": {\n    \"upload_part\": \"https://upload.box.com/api/2.0/files/upload_sessions/F971964745A5CD0C001BBE4E58196BFD\",\n    \"commit\": \"https://upload.box.com/api/2.0/files/upload_sessions/F971964745A5CD0C001BBE4E58196BFD/commit\",\n    \"abort\": \"https://upload.box.com/api/2.0/files/upload_sessions/F971964745A5CD0C001BBE4E58196BFD\",\n    \"list_parts\": \"https://upload.box.com/api/2.0/files/upload_sessions/F971964745A5CD0C001BBE4E58196BFD/parts\",\n    \"status\": \"https://upload.box.com/api/2.0/files/upload_sessions/F971964745A5CD0C001BBE4E58196BFD\",\n    \"log_event\": \"https://upload.box.com/api/2.0/files/upload_sessions/F971964745A5CD0C001BBE4E58196BFD/log\"\n  }\n}"
            }
          ]
        },
        {
          "name": "Create upload session for existing file",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "bff48eb9-d72e-4b0e-9b23-53870d2572d4",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "a26bd35b-37d0-42b1-be1a-f488b26a92e2",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"file_size\": 104857600,\n  \"file_name\": \"Project.mov\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{upload.box.com}}/api/2.0/files/:file_id/upload_sessions",
              "protocol": "https",
              "host": [
                "{{upload.box.com}}"
              ],
              "path": [
                "api",
                "2.0",
                "files",
                ":file_id",
                "upload_sessions"
              ],
              "variable": [
                {
                  "id": "a8a8beb2-297f-439f-b919-c6b801bcb542",
                  "key": "file_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                }
              ]
            },
            "description": "Creates an upload session for an existing file.\n\nhttps://developer.box.com/en/reference/post-files-id-upload-sessions"
          },
          "response": [
            {
              "id": "33ac472c-d6bd-4ef7-b34b-ac0804de2272",
              "name": "[409] Returns an error if the file already exists,",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"file_size\": 104857600,\n  \"file_name\": \"Project.mov\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{upload.box.com}}/api/2.0/files/:file_id/upload_sessions",
                  "protocol": "https",
                  "host": [
                    "{{upload.box.com}}"
                  ],
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    ":file_id",
                    "upload_sessions"
                  ],
                  "variable": [
                    {
                      "id": "a8a8beb2-297f-439f-b919-c6b801bcb542",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Creates an upload session for an existing file.\n\nhttps://developer.box.com/en/reference/post-files-id-upload-sessions"
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "b51b8ae7-e53d-4913-8702-3c6910f891e5",
              "name": "[201] Returns a new upload session.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"file_size\": 104857600,\n  \"file_name\": \"Project.mov\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{upload.box.com}}/api/2.0/files/:file_id/upload_sessions",
                  "protocol": "https",
                  "host": [
                    "{{upload.box.com}}"
                  ],
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    ":file_id",
                    "upload_sessions"
                  ],
                  "variable": [
                    {
                      "id": "a8a8beb2-297f-439f-b919-c6b801bcb542",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Creates an upload session for an existing file.\n\nhttps://developer.box.com/en/reference/post-files-id-upload-sessions"
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"F971964745A5CD0C001BBE4E58196BFD\",\n  \"type\": \"upload_session\",\n  \"session_expires_at\": \"2012-12-12T10:53:43-08:00\",\n  \"part_size\": 1024,\n  \"total_parts\": 1000,\n  \"num_parts_processed\": 455,\n  \"session_endpoints\": {\n    \"upload_part\": \"https://upload.box.com/api/2.0/files/upload_sessions/F971964745A5CD0C001BBE4E58196BFD\",\n    \"commit\": \"https://upload.box.com/api/2.0/files/upload_sessions/F971964745A5CD0C001BBE4E58196BFD/commit\",\n    \"abort\": \"https://upload.box.com/api/2.0/files/upload_sessions/F971964745A5CD0C001BBE4E58196BFD\",\n    \"list_parts\": \"https://upload.box.com/api/2.0/files/upload_sessions/F971964745A5CD0C001BBE4E58196BFD/parts\",\n    \"status\": \"https://upload.box.com/api/2.0/files/upload_sessions/F971964745A5CD0C001BBE4E58196BFD\",\n    \"log_event\": \"https://upload.box.com/api/2.0/files/upload_sessions/F971964745A5CD0C001BBE4E58196BFD/log\"\n  }\n}"
            }
          ]
        },
        {
          "name": "Commit upload session",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "04afb74a-77e0-4815-ac3e-ce6abec3ae4c",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "79d63334-666d-4ab4-990f-ef21ad2d07ef",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Digest",
                "value": "sha=fpRyg5eVQletdZqEKaFlqwBXJzM=",
                "description": "The [RFC3230][1] message digest of the whole file.\n\nOnly SHA1 is supported. The SHA1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230"
              },
              {
                "key": "If-Match",
                "value": "1",
                "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                "disabled": true
              },
              {
                "key": "If-None-Match",
                "value": "1",
                "description": "Ensures an item is only returned if it has changed.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `304 Not Modified` if the item has not\nchanged since.",
                "disabled": true
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"parts\": [\n    {\n      \"part_id\": \"6F2D3486\",\n      \"offset\": 16777216,\n      \"size\": 3222784\n    }\n  ]\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{upload.box.com}}/api/2.0/files/upload_sessions/:upload_session_id/commit",
              "protocol": "https",
              "host": [
                "{{upload.box.com}}"
              ],
              "path": [
                "api",
                "2.0",
                "files",
                "upload_sessions",
                ":upload_session_id",
                "commit"
              ],
              "variable": [
                {
                  "id": "4603b023-9c27-4544-b6a8-b714b4b1676f",
                  "key": "upload_session_id",
                  "value": "D5E3F7A",
                  "type": "string",
                  "description": "The ID of the upload session."
                }
              ]
            },
            "description": "Close an upload session and create a file from the\n\nhttps://developer.box.com/en/reference/post-files-upload-sessions-id-commit"
          },
          "response": [
            {
              "id": "1601ff86-ad06-41c2-9559-0cfa7a48f9b9",
              "name": "[409] Returns an error if there is already a file with the same name",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Digest",
                    "value": "sha=fpRyg5eVQletdZqEKaFlqwBXJzM=",
                    "description": "The [RFC3230][1] message digest of the whole file.\n\nOnly SHA1 is supported. The SHA1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230"
                  },
                  {
                    "key": "If-Match",
                    "value": "1",
                    "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                    "disabled": true
                  },
                  {
                    "key": "If-None-Match",
                    "value": "1",
                    "description": "Ensures an item is only returned if it has changed.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `304 Not Modified` if the item has not\nchanged since.",
                    "disabled": true
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"parts\": [\n    {\n      \"part_id\": \"6F2D3486\",\n      \"offset\": 16777216,\n      \"size\": 3222784\n    }\n  ]\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{upload.box.com}}/api/2.0/files/upload_sessions/:upload_session_id/commit",
                  "protocol": "https",
                  "host": [
                    "{{upload.box.com}}"
                  ],
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    "upload_sessions",
                    ":upload_session_id",
                    "commit"
                  ],
                  "variable": [
                    {
                      "id": "4603b023-9c27-4544-b6a8-b714b4b1676f",
                      "key": "upload_session_id",
                      "value": "D5E3F7A",
                      "type": "string",
                      "description": "The ID of the upload session."
                    }
                  ]
                },
                "description": "Close an upload session and create a file from the\n\nhttps://developer.box.com/en/reference/post-files-upload-sessions-id-commit"
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "7a29f7cc-b2a9-4d67-987e-086b3a1eb67c",
              "name": "[201] Returns the file object in a list.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Digest",
                    "value": "sha=fpRyg5eVQletdZqEKaFlqwBXJzM=",
                    "description": "The [RFC3230][1] message digest of the whole file.\n\nOnly SHA1 is supported. The SHA1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230"
                  },
                  {
                    "key": "If-Match",
                    "value": "1",
                    "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                    "disabled": true
                  },
                  {
                    "key": "If-None-Match",
                    "value": "1",
                    "description": "Ensures an item is only returned if it has changed.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `304 Not Modified` if the item has not\nchanged since.",
                    "disabled": true
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"parts\": [\n    {\n      \"part_id\": \"6F2D3486\",\n      \"offset\": 16777216,\n      \"size\": 3222784\n    }\n  ]\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{upload.box.com}}/api/2.0/files/upload_sessions/:upload_session_id/commit",
                  "protocol": "https",
                  "host": [
                    "{{upload.box.com}}"
                  ],
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    "upload_sessions",
                    ":upload_session_id",
                    "commit"
                  ],
                  "variable": [
                    {
                      "id": "4603b023-9c27-4544-b6a8-b714b4b1676f",
                      "key": "upload_session_id",
                      "value": "D5E3F7A",
                      "type": "string",
                      "description": "The ID of the upload session."
                    }
                  ]
                },
                "description": "Close an upload session and create a file from the\n\nhttps://developer.box.com/en/reference/post-files-upload-sessions-id-commit"
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"total_count\": 1,\n  \"entries\": [\n    {\n      \"id\": \"12345\",\n      \"etag\": \"1\",\n      \"type\": \"file\",\n      \"sequence_id\": \"3\",\n      \"name\": \"Contract.pdf\",\n      \"sha1\": \"85136C79CBF9FE36BB9D05D0639C70C265C18D37\",\n      \"description\": \"Contract for Q1 renewal\",\n      \"size\": 629644,\n      \"path_collection\": {\n        \"total_count\": 1,\n        \"entries\": [\n          {\n            \"id\": \"12345\",\n            \"etag\": \"1\",\n            \"type\": \"folder\",\n            \"sequence_id\": \"3\",\n            \"name\": \"Contracts\"\n          }\n        ]\n      },\n      \"created_at\": \"2012-12-12T10:53:43-08:00\",\n      \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n      \"trashed_at\": \"2012-12-12T10:53:43-08:00\",\n      \"purged_at\": \"2012-12-12T10:53:43-08:00\",\n      \"content_created_at\": \"2012-12-12T10:53:43-08:00\",\n      \"content_modified_at\": \"2012-12-12T10:53:43-08:00\",\n      \"created_by\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      },\n      \"modified_by\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      },\n      \"owned_by\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      },\n      \"shared_link\": {\n        \"url\": \"https://www.box.com/s/vspke7y05sb214wjokpk\",\n        \"download_url\": \"https://www.box.com/shared/static/rh935iit6ewrmw0unyul.jpeg\",\n        \"vanity_url\": \"https://acme.app.box.com/v/my_url/\",\n        \"access\": \"open\",\n        \"effective_access\": \"company\",\n        \"effective_permission\": \"can_download\",\n        \"unshared_at\": \"2018-04-13T13:53:23-07:00\",\n        \"is_password_enabled\": true,\n        \"permissions\": {\n          \"can_download\": true,\n          \"can_preview\": true\n        },\n        \"download_count\": 3,\n        \"preview_count\": 3\n      },\n      \"parent\": {\n        \"id\": \"12345\",\n        \"etag\": \"1\",\n        \"type\": \"folder\",\n        \"sequence_id\": \"3\",\n        \"name\": \"Contracts\"\n      },\n      \"item_status\": \"active\",\n      \"version_number\": \"1\",\n      \"comment_count\": 10,\n      \"permissions\": {\n        \"can_delete\": true,\n        \"can_download\": true,\n        \"can_invite_collaborator\": true,\n        \"can_rename\": true,\n        \"can_set_share_access\": true,\n        \"can_share\": true,\n        \"can_annotate\": true,\n        \"can_comment\": true,\n        \"can_preview\": true,\n        \"can_upload\": true,\n        \"can_view_annotations_all\": true,\n        \"can_view_annotations_self\": true\n      },\n      \"tags\": [\n        \"approved\"\n      ],\n      \"lock\": {\n        \"id\": \"11446498\",\n        \"type\": \"lock\",\n        \"created_by\": {\n          \"id\": \"11446498\",\n          \"type\": \"user\",\n          \"name\": \"Aaron Levie\",\n          \"login\": \"ceo@example.com\"\n        },\n        \"created_at\": \"2012-12-12T10:53:43-08:00\",\n        \"expired_at\": \"2012-12-12T10:53:43-08:00\",\n        \"is_download_prevented\": true\n      },\n      \"extension\": \"pdf\",\n      \"is_package\": true,\n      \"expiring_embed_link\": {\n        \"access_token\": \"c3FIOG9vSGV4VHo4QzAyg5T1JvNnJoZ3ExaVNyQWw6WjRsanRKZG5lQk9qUE1BVQ\",\n        \"expires_in\": 3600,\n        \"token_type\": \"bearer\",\n        \"restricted_to\": [\n          {\n            \"scope\": \"item_download\",\n            \"object\": {\n              \"id\": \"12345\",\n              \"etag\": \"1\",\n              \"type\": \"file\",\n              \"sequence_id\": \"3\",\n              \"name\": \"Contract.pdf\"\n            }\n          }\n        ],\n        \"url\": \"https://cloud.app.box.com/preview/expiring_embed/...\"\n      },\n      \"watermark_info\": {\n        \"is_watermarked\": true\n      },\n      \"allowed_invitee_roles\": [\n        \"editor\"\n      ],\n      \"is_externally_owned\": true,\n      \"has_collaborations\": true,\n      \"metadata\": {\n        \"global\": {\n          \"marketingCollateral\": {\n            \"$canEdit\": true,\n            \"$id\": \"01234500-12f1-1234-aa12-b1d234cb567e\",\n            \"$parent\": \"folder_59449484661\",\n            \"$scope\": \"enterprise_27335\",\n            \"$template\": \"properties\",\n            \"$type\": \"properties-6bcba49f-ca6d-4d2a-a758-57fe6edf44d0\",\n            \"$typeVersion\": 2,\n            \"$version\": 1\n          }\n        }\n      },\n      \"expires_at\": \"2012-12-12T10:53:43-08:00\",\n      \"representations\": {\n        \"entries\": [\n          {\n            \"content\": {\n              \"url_template\": \"https://dl.boxcloud.com/api/2.0/internal_files/123/versions/345/representations/png_paged_2048x2048/content/{+asset_path}?watermark_content=4567\"\n            },\n            \"info\": {\n              \"url\": \"https://api.box.com/2.0/internal_files/123/versions/345/representations/png_paged_2048x2048\"\n            },\n            \"properties\": {\n              \"dimensions\": \"2048x2048\",\n              \"paged\": true,\n              \"thumb\": true\n            },\n            \"representation\": \"png\",\n            \"status\": {\n              \"state\": \"success\"\n            }\n          }\n        ]\n      }\n    }\n  ]\n}"
            },
            {
              "id": "90d18800-162d-467d-a3af-b248dca8b3c1",
              "name": "[412] Returns an error if the `If-Match` or `If-None-Match` conditions fail.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Digest",
                    "value": "sha=fpRyg5eVQletdZqEKaFlqwBXJzM=",
                    "description": "The [RFC3230][1] message digest of the whole file.\n\nOnly SHA1 is supported. The SHA1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230"
                  },
                  {
                    "key": "If-Match",
                    "value": "1",
                    "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                    "disabled": true
                  },
                  {
                    "key": "If-None-Match",
                    "value": "1",
                    "description": "Ensures an item is only returned if it has changed.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `304 Not Modified` if the item has not\nchanged since.",
                    "disabled": true
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"parts\": [\n    {\n      \"part_id\": \"6F2D3486\",\n      \"offset\": 16777216,\n      \"size\": 3222784\n    }\n  ]\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{upload.box.com}}/api/2.0/files/upload_sessions/:upload_session_id/commit",
                  "protocol": "https",
                  "host": [
                    "{{upload.box.com}}"
                  ],
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    "upload_sessions",
                    ":upload_session_id",
                    "commit"
                  ],
                  "variable": [
                    {
                      "id": "4603b023-9c27-4544-b6a8-b714b4b1676f",
                      "key": "upload_session_id",
                      "value": "D5E3F7A",
                      "type": "string",
                      "description": "The ID of the upload session."
                    }
                  ]
                },
                "description": "Close an upload session and create a file from the\n\nhttps://developer.box.com/en/reference/post-files-upload-sessions-id-commit"
              },
              "status": "Precondition Failed",
              "code": 412,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "cc776bdb-4ae7-439b-a857-a9f228ba5475",
              "name": "[202] Returns when all chunks have been uploaded but not yet processed.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Digest",
                    "value": "sha=fpRyg5eVQletdZqEKaFlqwBXJzM=",
                    "description": "The [RFC3230][1] message digest of the whole file.\n\nOnly SHA1 is supported. The SHA1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230"
                  },
                  {
                    "key": "If-Match",
                    "value": "1",
                    "description": "Ensures this item hasn't recently changed before\nmaking changes.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `412 Precondition Failed` if it\nhas changed since.",
                    "disabled": true
                  },
                  {
                    "key": "If-None-Match",
                    "value": "1",
                    "description": "Ensures an item is only returned if it has changed.\n\nPass in the item's last observed `etag` value\ninto this header and the endpoint will fail\nwith a `304 Not Modified` if the item has not\nchanged since.",
                    "disabled": true
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"parts\": [\n    {\n      \"part_id\": \"6F2D3486\",\n      \"offset\": 16777216,\n      \"size\": 3222784\n    }\n  ]\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{upload.box.com}}/api/2.0/files/upload_sessions/:upload_session_id/commit",
                  "protocol": "https",
                  "host": [
                    "{{upload.box.com}}"
                  ],
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    "upload_sessions",
                    ":upload_session_id",
                    "commit"
                  ],
                  "variable": [
                    {
                      "id": "4603b023-9c27-4544-b6a8-b714b4b1676f",
                      "key": "upload_session_id",
                      "value": "D5E3F7A",
                      "type": "string",
                      "description": "The ID of the upload session."
                    }
                  ]
                },
                "description": "Close an upload session and create a file from the\n\nhttps://developer.box.com/en/reference/post-files-upload-sessions-id-commit"
              },
              "status": "Accepted",
              "code": 202,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Retry-After",
                  "value": "",
                  "description": "Indicates the number of seconds the client should wait before\nattempting their commit request again."
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        },
        {
          "name": "Upload part of file",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ab45b5d9-223a-4193-9258-fb503e713f2a",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "752c305f-d3ce-478e-a9d6-ba1aed17c84a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "PUT",
            "header": [
              {
                "key": "Digest",
                "value": "sha=fpRyg5eVQletdZqEKaFlqwBXJzM=",
                "description": "The [RFC3230][1] message digest of the chunk uploaded.\n\nOnly SHA1 is supported. The SHA1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230"
              },
              {
                "key": "Content-Range",
                "value": "bytes 8388608-16777215/445856194",
                "description": "The byte range of the chunk.\n\nMust not overlap with the range of a part already\nuploaded this session."
              },
              {
                "key": "Content-Type",
                "value": "application/octet-stream"
              }
            ],
            "body": {
              "mode": "file",
              "file": {}
            },
            "url": {
              "raw": "https://{{upload.box.com}}/api/2.0/files/upload_sessions/:upload_session_id",
              "protocol": "https",
              "host": [
                "{{upload.box.com}}"
              ],
              "path": [
                "api",
                "2.0",
                "files",
                "upload_sessions",
                ":upload_session_id"
              ],
              "variable": [
                {
                  "id": "ff870f53-9d1f-4c79-be3d-4182d605df6f",
                  "key": "upload_session_id",
                  "value": "D5E3F7A",
                  "type": "string",
                  "description": "The ID of the upload session."
                }
              ]
            },
            "description": "Updates a chunk of an upload session for a file.\n\nhttps://developer.box.com/en/reference/put-files-upload-sessions-id"
          },
          "response": [
            {
              "id": "1709a524-dd93-4be1-a333-3098774c97e2",
              "name": "[200] Chunk has been uploaded successfully.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Digest",
                    "value": "sha=fpRyg5eVQletdZqEKaFlqwBXJzM=",
                    "description": "The [RFC3230][1] message digest of the chunk uploaded.\n\nOnly SHA1 is supported. The SHA1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230"
                  },
                  {
                    "key": "Content-Range",
                    "value": "bytes 8388608-16777215/445856194",
                    "description": "The byte range of the chunk.\n\nMust not overlap with the range of a part already\nuploaded this session."
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/octet-stream"
                  }
                ],
                "body": {
                  "mode": "file",
                  "file": {}
                },
                "url": {
                  "raw": "https://{{upload.box.com}}/api/2.0/files/upload_sessions/:upload_session_id",
                  "protocol": "https",
                  "host": [
                    "{{upload.box.com}}"
                  ],
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    "upload_sessions",
                    ":upload_session_id"
                  ],
                  "variable": [
                    {
                      "id": "ff870f53-9d1f-4c79-be3d-4182d605df6f",
                      "key": "upload_session_id",
                      "value": "D5E3F7A",
                      "type": "string",
                      "description": "The ID of the upload session."
                    }
                  ]
                },
                "description": "Updates a chunk of an upload session for a file.\n\nhttps://developer.box.com/en/reference/put-files-upload-sessions-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"part_id\": \"6F2D3486\",\n  \"offset\": 16777216,\n  \"size\": 3222784,\n  \"sha1\": \"134b65991ed521fcfe4724b7d814ab8ded5185dc\"\n}"
            },
            {
              "id": "76c49337-5200-41f0-8abc-de43bd710ced",
              "name": "[416] Returns an error if the content range does not match a specified range",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Digest",
                    "value": "sha=fpRyg5eVQletdZqEKaFlqwBXJzM=",
                    "description": "The [RFC3230][1] message digest of the chunk uploaded.\n\nOnly SHA1 is supported. The SHA1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230"
                  },
                  {
                    "key": "Content-Range",
                    "value": "bytes 8388608-16777215/445856194",
                    "description": "The byte range of the chunk.\n\nMust not overlap with the range of a part already\nuploaded this session."
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/octet-stream"
                  }
                ],
                "body": {
                  "mode": "file",
                  "file": {}
                },
                "url": {
                  "raw": "https://{{upload.box.com}}/api/2.0/files/upload_sessions/:upload_session_id",
                  "protocol": "https",
                  "host": [
                    "{{upload.box.com}}"
                  ],
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    "upload_sessions",
                    ":upload_session_id"
                  ],
                  "variable": [
                    {
                      "id": "ff870f53-9d1f-4c79-be3d-4182d605df6f",
                      "key": "upload_session_id",
                      "value": "D5E3F7A",
                      "type": "string",
                      "description": "The ID of the upload session."
                    }
                  ]
                },
                "description": "Updates a chunk of an upload session for a file.\n\nhttps://developer.box.com/en/reference/put-files-upload-sessions-id"
              },
              "status": "Requested Range Not Satisfiable",
              "code": 416,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "c47e8d39-f2db-4bc2-b773-5816a199de0a",
              "name": "[412] Returns an error if a precondition was not met.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Digest",
                    "value": "sha=fpRyg5eVQletdZqEKaFlqwBXJzM=",
                    "description": "The [RFC3230][1] message digest of the chunk uploaded.\n\nOnly SHA1 is supported. The SHA1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230"
                  },
                  {
                    "key": "Content-Range",
                    "value": "bytes 8388608-16777215/445856194",
                    "description": "The byte range of the chunk.\n\nMust not overlap with the range of a part already\nuploaded this session."
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/octet-stream"
                  }
                ],
                "body": {
                  "mode": "file",
                  "file": {}
                },
                "url": {
                  "raw": "https://{{upload.box.com}}/api/2.0/files/upload_sessions/:upload_session_id",
                  "protocol": "https",
                  "host": [
                    "{{upload.box.com}}"
                  ],
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    "upload_sessions",
                    ":upload_session_id"
                  ],
                  "variable": [
                    {
                      "id": "ff870f53-9d1f-4c79-be3d-4182d605df6f",
                      "key": "upload_session_id",
                      "value": "D5E3F7A",
                      "type": "string",
                      "description": "The ID of the upload session."
                    }
                  ]
                },
                "description": "Updates a chunk of an upload session for a file.\n\nhttps://developer.box.com/en/reference/put-files-upload-sessions-id"
              },
              "status": "Precondition Failed",
              "code": 412,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "e5f225c1-87c6-4b40-b6ef-4dc14a4d1548",
              "name": "[409] Returns an error if the chunk conflicts with another",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Digest",
                    "value": "sha=fpRyg5eVQletdZqEKaFlqwBXJzM=",
                    "description": "The [RFC3230][1] message digest of the chunk uploaded.\n\nOnly SHA1 is supported. The SHA1 digest must be Base64\nencoded. The format of this header is as\n`sha=BASE64_ENCODED_DIGEST`.\n\n[1]: https://tools.ietf.org/html/rfc3230"
                  },
                  {
                    "key": "Content-Range",
                    "value": "bytes 8388608-16777215/445856194",
                    "description": "The byte range of the chunk.\n\nMust not overlap with the range of a part already\nuploaded this session."
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/octet-stream"
                  }
                ],
                "body": {
                  "mode": "file",
                  "file": {}
                },
                "url": {
                  "raw": "https://{{upload.box.com}}/api/2.0/files/upload_sessions/:upload_session_id",
                  "protocol": "https",
                  "host": [
                    "{{upload.box.com}}"
                  ],
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    "upload_sessions",
                    ":upload_session_id"
                  ],
                  "variable": [
                    {
                      "id": "ff870f53-9d1f-4c79-be3d-4182d605df6f",
                      "key": "upload_session_id",
                      "value": "D5E3F7A",
                      "type": "string",
                      "description": "The ID of the upload session."
                    }
                  ]
                },
                "description": "Updates a chunk of an upload session for a file.\n\nhttps://developer.box.com/en/reference/put-files-upload-sessions-id"
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        },
        {
          "name": "Remove upload session",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "fc01cf54-1f32-4155-bf82-a0e8c02657b0",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "f521a50f-8a76-42a6-a67f-5977fd30c206",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "https://{{upload.box.com}}/api/2.0/files/upload_sessions/:upload_session_id",
              "protocol": "https",
              "host": [
                "{{upload.box.com}}"
              ],
              "path": [
                "api",
                "2.0",
                "files",
                "upload_sessions",
                ":upload_session_id"
              ],
              "variable": [
                {
                  "id": "9545f1f4-090c-4718-8232-a4ee6bf91b1d",
                  "key": "upload_session_id",
                  "value": "D5E3F7A",
                  "type": "string",
                  "description": "The ID of the upload session."
                }
              ]
            },
            "description": "Abort an upload session and discard all data uploaded.\n\nhttps://developer.box.com/en/reference/delete-files-upload-sessions-id"
          },
          "response": [
            {
              "id": "be403a30-7886-4258-9e56-ceb9edbc961d",
              "name": "[204] A blank response is returned if the session was",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{upload.box.com}}/api/2.0/files/upload_sessions/:upload_session_id",
                  "protocol": "https",
                  "host": [
                    "{{upload.box.com}}"
                  ],
                  "path": [
                    "api",
                    "2.0",
                    "files",
                    "upload_sessions",
                    ":upload_session_id"
                  ],
                  "variable": [
                    {
                      "id": "9545f1f4-090c-4718-8232-a4ee6bf91b1d",
                      "key": "upload_session_id",
                      "value": "D5E3F7A",
                      "type": "string",
                      "description": "The ID of the upload session."
                    }
                  ]
                },
                "description": "Abort an upload session and discard all data uploaded.\n\nhttps://developer.box.com/en/reference/delete-files-upload-sessions-id"
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        }
      ],
      "_postman_id": "dc3fb345-8f97-4782-9a18-4f07877ab05d"
    },
    {
      "name": "User avatars",
      "item": [
        {
          "name": "Get user avatar",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "fd391cca-a445-4a61-98aa-45a6f73999a9",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "b08b94cb-8eee-43bd-93e7-cbc9ac92d875",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/users/:user_id/avatar",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "users",
                ":user_id",
                "avatar"
              ],
              "variable": [
                {
                  "id": "188a5d29-faa6-4129-9597-a725f9a0168e",
                  "key": "user_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The ID of the user."
                }
              ]
            },
            "description": "Retrieves an image of a the user's avatar.\n\nhttps://developer.box.com/en/reference/get-users-id-avatar"
          },
          "response": [
            {
              "id": "c911ec0e-863e-47ac-a84c-5d2c4a111f63",
              "name": "[200] When an avatar can be found for the user the",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/users/:user_id/avatar",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "users",
                    ":user_id",
                    "avatar"
                  ],
                  "variable": [
                    {
                      "id": "188a5d29-faa6-4129-9597-a725f9a0168e",
                      "key": "user_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the user."
                    }
                  ]
                },
                "description": "Retrieves an image of a the user's avatar.\n\nhttps://developer.box.com/en/reference/get-users-id-avatar"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "image/jpg"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        }
      ],
      "_postman_id": "cb35f170-e4db-429a-8fe8-0ca8f6325121"
    },
    {
      "name": "Users",
      "item": [
        {
          "name": "List enterprise users",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e6b5d5c5-b393-4766-a45d-40ea27a5d138",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "9c6af81a-b644-46fc-9559-7c6a4846c9e8",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/users?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "users"
              ],
              "query": [
                {
                  "key": "filter_term",
                  "value": "john",
                  "description": "Limits the results to only users who's `name` or\n`login` start with the search term.\n\nFor externally managed users, the search term needs\nto completely match the in order to find the user, and\nit will only return one user at a time.",
                  "disabled": true
                },
                {
                  "key": "user_type",
                  "value": "managed",
                  "description": "Limits the results to the kind  of user specified.\n\n* `all` returns every kind of user for whom the\n  `login` or `name` partially matches the\n  `filter_term`. It will only return an external user\n  if the login matches the `filter_term` completely,\n  and in that case it will only return that user.\n* `managed` returns all managed and app users for whom\n  the `login` or `name` partially matches the\n  `filter_term`.\n* `external` returns all external users for whom the\n  `login` matches the `filter_term` exactly.",
                  "disabled": true
                },
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                },
                {
                  "key": "offset",
                  "value": "1000",
                  "description": "The offset of the item at which to begin the response.",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "1000",
                  "description": "The maximum number of items to return per page.",
                  "disabled": true
                },
                {
                  "key": "usemarker",
                  "value": "true",
                  "description": "Specifies whether to use marker-based pagination instead of\noffset-based pagination. Only one pagination method can\nbe used at a time.\n\nBy setting this value to true, the API will return a `marker` field\nthat can be passed as a parameter to this endpoint to get the next\npage of the response.",
                  "disabled": true
                },
                {
                  "key": "marker",
                  "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                  "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                  "disabled": true
                }
              ]
            },
            "description": "Returns a list of all users for the Enterprise along with their user_id,\n\nhttps://developer.box.com/en/reference/get-users"
          },
          "response": [
            {
              "id": "fb7c09c7-b9cf-444c-aa26-08d01ff9e89d",
              "name": "[200] Returns all of the users in the enterprise.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/users?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "users"
                  ],
                  "query": [
                    {
                      "key": "filter_term",
                      "value": "john",
                      "description": "Limits the results to only users who's `name` or\n`login` start with the search term.\n\nFor externally managed users, the search term needs\nto completely match the in order to find the user, and\nit will only return one user at a time.",
                      "disabled": true
                    },
                    {
                      "key": "user_type",
                      "value": "managed",
                      "description": "Limits the results to the kind  of user specified.\n\n* `all` returns every kind of user for whom the\n  `login` or `name` partially matches the\n  `filter_term`. It will only return an external user\n  if the login matches the `filter_term` completely,\n  and in that case it will only return that user.\n* `managed` returns all managed and app users for whom\n  the `login` or `name` partially matches the\n  `filter_term`.\n* `external` returns all external users for whom the\n  `login` matches the `filter_term` exactly.",
                      "disabled": true
                    },
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    },
                    {
                      "key": "offset",
                      "value": "1000",
                      "description": "The offset of the item at which to begin the response.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    },
                    {
                      "key": "usemarker",
                      "value": "true",
                      "description": "Specifies whether to use marker-based pagination instead of\noffset-based pagination. Only one pagination method can\nbe used at a time.\n\nBy setting this value to true, the API will return a `marker` field\nthat can be passed as a parameter to this endpoint to get the next\npage of the response.",
                      "disabled": true
                    },
                    {
                      "key": "marker",
                      "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                      "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Returns a list of all users for the Enterprise along with their user_id,\n\nhttps://developer.box.com/en/reference/get-users"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"total_count\": 5000,\n  \"limit\": 1000,\n  \"offset\": 2000,\n  \"order\": [\n    {\n      \"by\": \"type\",\n      \"direction\": \"ASC\"\n    }\n  ],\n  \"entries\": [\n    {\n      \"id\": \"11446498\",\n      \"type\": \"user\",\n      \"name\": \"Aaron Levie\",\n      \"login\": \"ceo@example.com\",\n      \"created_at\": \"2012-12-12T10:53:43-08:00\",\n      \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n      \"language\": \"en\",\n      \"timezone\": \"Africa/Bujumbura\",\n      \"space_amount\": 11345156112,\n      \"space_used\": 1237009912,\n      \"max_upload_size\": 2147483648,\n      \"status\": \"active\",\n      \"job_title\": \"CEO\",\n      \"phone\": \"6509241374\",\n      \"address\": \"900 Jefferson Ave, Redwood City, CA 94063\",\n      \"avatar_url\": \"https://www.box.com/api/avatar/large/181216415\",\n      \"role\": \"admin\",\n      \"tracking_codes\": [\n        {\n          \"type\": \"tracking_code\",\n          \"name\": \"department\",\n          \"value\": \"Sales\"\n        }\n      ],\n      \"can_see_managed_users\": true,\n      \"is_sync_enabled\": true,\n      \"is_external_collab_restricted\": true,\n      \"is_exempt_from_device_limits\": true,\n      \"is_exempt_from_login_verification\": true,\n      \"enterprise\": {\n        \"id\": \"11446498\",\n        \"type\": \"enterprise\",\n        \"name\": \"Acme Inc.\"\n      },\n      \"my_tags\": [\n        \"important\"\n      ],\n      \"hostname\": \"https://example.app.box.com/\",\n      \"is_platform_access_only\": true,\n      \"external_app_user_id\": \"my-user-1234\",\n      \"notification_email\": {\n        \"email\": \"notifications@example.com\",\n        \"is_confirmed\": true\n      }\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "Get current user",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ce5193f8-88b8-44a6-8e80-c7fd8f2e7c54",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "0bab2f27-3347-4112-847c-b0a59ec4c863",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/users/me?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "users",
                "me"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ]
            },
            "description": "Retrieves information about the user who is currently authenticated.\n\nhttps://developer.box.com/en/reference/get-users-me"
          },
          "response": [
            {
              "id": "ef419dc3-e087-4a44-a933-75b8890edfd7",
              "name": "[200] Returns a single user object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/users/me?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "users",
                    "me"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Retrieves information about the user who is currently authenticated.\n\nhttps://developer.box.com/en/reference/get-users-me"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"user\",\n  \"name\": \"Aaron Levie\",\n  \"login\": \"ceo@example.com\",\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"language\": \"en\",\n  \"timezone\": \"Africa/Bujumbura\",\n  \"space_amount\": 11345156112,\n  \"space_used\": 1237009912,\n  \"max_upload_size\": 2147483648,\n  \"status\": \"active\",\n  \"job_title\": \"CEO\",\n  \"phone\": \"6509241374\",\n  \"address\": \"900 Jefferson Ave, Redwood City, CA 94063\",\n  \"avatar_url\": \"https://www.box.com/api/avatar/large/181216415\",\n  \"role\": \"admin\",\n  \"tracking_codes\": [\n    {\n      \"type\": \"tracking_code\",\n      \"name\": \"department\",\n      \"value\": \"Sales\"\n    }\n  ],\n  \"can_see_managed_users\": true,\n  \"is_sync_enabled\": true,\n  \"is_external_collab_restricted\": true,\n  \"is_exempt_from_device_limits\": true,\n  \"is_exempt_from_login_verification\": true,\n  \"enterprise\": {\n    \"id\": \"11446498\",\n    \"type\": \"enterprise\",\n    \"name\": \"Acme Inc.\"\n  },\n  \"my_tags\": [\n    \"important\"\n  ],\n  \"hostname\": \"https://example.app.box.com/\",\n  \"is_platform_access_only\": true,\n  \"external_app_user_id\": \"my-user-1234\",\n  \"notification_email\": {\n    \"email\": \"notifications@example.com\",\n    \"is_confirmed\": true\n  }\n}"
            }
          ]
        },
        {
          "name": "Get user",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "9829e1ca-e7a2-4567-82f4-3fccf638b228",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "acd055e6-0de7-4c9b-9791-8c0fa85b39f1",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/users/:user_id?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "users",
                ":user_id"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "69633343-9fae-401a-8c35-64d823a9ee85",
                  "key": "user_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The ID of the user."
                }
              ]
            },
            "description": "Retrieves information about a user in the enterprise.\n\nhttps://developer.box.com/en/reference/get-users-id"
          },
          "response": [
            {
              "id": "d96ee484-02d0-44b0-bbe0-b5851cfb03bf",
              "name": "[200] Returns a single user object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/users/:user_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "users",
                    ":user_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "69633343-9fae-401a-8c35-64d823a9ee85",
                      "key": "user_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the user."
                    }
                  ]
                },
                "description": "Retrieves information about a user in the enterprise.\n\nhttps://developer.box.com/en/reference/get-users-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"user\",\n  \"name\": \"Aaron Levie\",\n  \"login\": \"ceo@example.com\",\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"language\": \"en\",\n  \"timezone\": \"Africa/Bujumbura\",\n  \"space_amount\": 11345156112,\n  \"space_used\": 1237009912,\n  \"max_upload_size\": 2147483648,\n  \"status\": \"active\",\n  \"job_title\": \"CEO\",\n  \"phone\": \"6509241374\",\n  \"address\": \"900 Jefferson Ave, Redwood City, CA 94063\",\n  \"avatar_url\": \"https://www.box.com/api/avatar/large/181216415\",\n  \"role\": \"admin\",\n  \"tracking_codes\": [\n    {\n      \"type\": \"tracking_code\",\n      \"name\": \"department\",\n      \"value\": \"Sales\"\n    }\n  ],\n  \"can_see_managed_users\": true,\n  \"is_sync_enabled\": true,\n  \"is_external_collab_restricted\": true,\n  \"is_exempt_from_device_limits\": true,\n  \"is_exempt_from_login_verification\": true,\n  \"enterprise\": {\n    \"id\": \"11446498\",\n    \"type\": \"enterprise\",\n    \"name\": \"Acme Inc.\"\n  },\n  \"my_tags\": [\n    \"important\"\n  ],\n  \"hostname\": \"https://example.app.box.com/\",\n  \"is_platform_access_only\": true,\n  \"external_app_user_id\": \"my-user-1234\",\n  \"notification_email\": {\n    \"email\": \"notifications@example.com\",\n    \"is_confirmed\": true\n  }\n}"
            }
          ]
        },
        {
          "name": "Create user",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0f3a6dea-957b-45ab-9530-77b003777473",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "74bfe00d-2cb1-4a4a-ae55-6dc94c478148",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Aaron Levie\",\n  \"login\": \"boss@box.com\",\n  \"is_platform_access_only\": true,\n  \"role\": \"user\",\n  \"language\": \"en\",\n  \"is_sync_enabled\": true,\n  \"job_title\": \"CEO\",\n  \"phone\": \"6509241374\",\n  \"address\": \"900 Jefferson Ave, Redwood City, CA 94063\",\n  \"space_amount\": 11345156112,\n  \"tracking_codes\": [\n    \"code1: 12345\"\n  ],\n  \"can_see_managed_users\": true,\n  \"timezone\": \"Africa/Bujumbura\",\n  \"is_external_collab_restricted\": true,\n  \"is_exempt_from_device_limits\": true,\n  \"is_exempt_from_login_verification\": true,\n  \"status\": \"active\",\n  \"external_app_user_id\": \"my-user-1234\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/users?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "users"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ]
            },
            "description": "Creates a new managed user in an enterprise. This endpoint\n\nhttps://developer.box.com/en/reference/post-users"
          },
          "response": [
            {
              "id": "0b3758e7-feb3-4c24-9325-33f737c287f5",
              "name": "[201] Returns a user object for the newly created user.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Aaron Levie\",\n  \"login\": \"boss@box.com\",\n  \"is_platform_access_only\": true,\n  \"role\": \"user\",\n  \"language\": \"en\",\n  \"is_sync_enabled\": true,\n  \"job_title\": \"CEO\",\n  \"phone\": \"6509241374\",\n  \"address\": \"900 Jefferson Ave, Redwood City, CA 94063\",\n  \"space_amount\": 11345156112,\n  \"tracking_codes\": [\n    \"code1: 12345\"\n  ],\n  \"can_see_managed_users\": true,\n  \"timezone\": \"Africa/Bujumbura\",\n  \"is_external_collab_restricted\": true,\n  \"is_exempt_from_device_limits\": true,\n  \"is_exempt_from_login_verification\": true,\n  \"status\": \"active\",\n  \"external_app_user_id\": \"my-user-1234\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/users?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "users"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Creates a new managed user in an enterprise. This endpoint\n\nhttps://developer.box.com/en/reference/post-users"
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"user\",\n  \"name\": \"Aaron Levie\",\n  \"login\": \"ceo@example.com\",\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"language\": \"en\",\n  \"timezone\": \"Africa/Bujumbura\",\n  \"space_amount\": 11345156112,\n  \"space_used\": 1237009912,\n  \"max_upload_size\": 2147483648,\n  \"status\": \"active\",\n  \"job_title\": \"CEO\",\n  \"phone\": \"6509241374\",\n  \"address\": \"900 Jefferson Ave, Redwood City, CA 94063\",\n  \"avatar_url\": \"https://www.box.com/api/avatar/large/181216415\",\n  \"role\": \"admin\",\n  \"tracking_codes\": [\n    {\n      \"type\": \"tracking_code\",\n      \"name\": \"department\",\n      \"value\": \"Sales\"\n    }\n  ],\n  \"can_see_managed_users\": true,\n  \"is_sync_enabled\": true,\n  \"is_external_collab_restricted\": true,\n  \"is_exempt_from_device_limits\": true,\n  \"is_exempt_from_login_verification\": true,\n  \"enterprise\": {\n    \"id\": \"11446498\",\n    \"type\": \"enterprise\",\n    \"name\": \"Acme Inc.\"\n  },\n  \"my_tags\": [\n    \"important\"\n  ],\n  \"hostname\": \"https://example.app.box.com/\",\n  \"is_platform_access_only\": true,\n  \"external_app_user_id\": \"my-user-1234\",\n  \"notification_email\": {\n    \"email\": \"notifications@example.com\",\n    \"is_confirmed\": true\n  }\n}"
            }
          ]
        },
        {
          "name": "Update user",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6e9989c6-5013-4c64-a081-9ee7aae7d5f8",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "52a024de-50d6-4cf5-b193-e4f625f51f9a",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"enterprise\": null,\n  \"notify\": true,\n  \"name\": \"Aaron Levie\",\n  \"login\": \"boss@box.com\",\n  \"role\": \"user\",\n  \"language\": \"en\",\n  \"is_sync_enabled\": true,\n  \"job_title\": \"CEO\",\n  \"phone\": \"6509241374\",\n  \"address\": \"900 Jefferson Ave, Redwood City, CA 94063\",\n  \"tracking_codes\": [\n    \"code1: 12345\"\n  ],\n  \"can_see_managed_users\": true,\n  \"timezone\": \"Africa/Bujumbura\",\n  \"is_external_collab_restricted\": true,\n  \"is_exempt_from_device_limits\": true,\n  \"is_exempt_from_login_verification\": true,\n  \"is_password_reset_required\": true,\n  \"status\": \"active\",\n  \"space_amount\": 11345156112,\n  \"notification_email\": {\n    \"email\": \"notifications@example.com\"\n  }\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/users/:user_id?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "users",
                ":user_id"
              ],
              "query": [
                {
                  "key": "fields",
                  "value": "[\"id\",\"type\",\"name\"]",
                  "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "1ed01e5b-6c01-4f90-a20a-dc0585b339ba",
                  "key": "user_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The ID of the user."
                }
              ]
            },
            "description": "Updates a managed user in an enterprise. This endpoint\n\nhttps://developer.box.com/en/reference/put-users-id"
          },
          "response": [
            {
              "id": "8637fb5b-cfd2-4d7f-bfae-6898a34b7a51",
              "name": "[403] Returns an error if the user is not allowed to make the changes.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"enterprise\": null,\n  \"notify\": true,\n  \"name\": \"Aaron Levie\",\n  \"login\": \"boss@box.com\",\n  \"role\": \"user\",\n  \"language\": \"en\",\n  \"is_sync_enabled\": true,\n  \"job_title\": \"CEO\",\n  \"phone\": \"6509241374\",\n  \"address\": \"900 Jefferson Ave, Redwood City, CA 94063\",\n  \"tracking_codes\": [\n    \"code1: 12345\"\n  ],\n  \"can_see_managed_users\": true,\n  \"timezone\": \"Africa/Bujumbura\",\n  \"is_external_collab_restricted\": true,\n  \"is_exempt_from_device_limits\": true,\n  \"is_exempt_from_login_verification\": true,\n  \"is_password_reset_required\": true,\n  \"status\": \"active\",\n  \"space_amount\": 11345156112,\n  \"notification_email\": {\n    \"email\": \"notifications@example.com\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/users/:user_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "users",
                    ":user_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "1ed01e5b-6c01-4f90-a20a-dc0585b339ba",
                      "key": "user_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the user."
                    }
                  ]
                },
                "description": "Updates a managed user in an enterprise. This endpoint\n\nhttps://developer.box.com/en/reference/put-users-id"
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "8e381323-326b-4e40-a267-d7b24aa18694",
              "name": "[200] Returns the updated user object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"enterprise\": null,\n  \"notify\": true,\n  \"name\": \"Aaron Levie\",\n  \"login\": \"boss@box.com\",\n  \"role\": \"user\",\n  \"language\": \"en\",\n  \"is_sync_enabled\": true,\n  \"job_title\": \"CEO\",\n  \"phone\": \"6509241374\",\n  \"address\": \"900 Jefferson Ave, Redwood City, CA 94063\",\n  \"tracking_codes\": [\n    \"code1: 12345\"\n  ],\n  \"can_see_managed_users\": true,\n  \"timezone\": \"Africa/Bujumbura\",\n  \"is_external_collab_restricted\": true,\n  \"is_exempt_from_device_limits\": true,\n  \"is_exempt_from_login_verification\": true,\n  \"is_password_reset_required\": true,\n  \"status\": \"active\",\n  \"space_amount\": 11345156112,\n  \"notification_email\": {\n    \"email\": \"notifications@example.com\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/users/:user_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "users",
                    ":user_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "1ed01e5b-6c01-4f90-a20a-dc0585b339ba",
                      "key": "user_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the user."
                    }
                  ]
                },
                "description": "Updates a managed user in an enterprise. This endpoint\n\nhttps://developer.box.com/en/reference/put-users-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"user\",\n  \"name\": \"Aaron Levie\",\n  \"login\": \"ceo@example.com\",\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"language\": \"en\",\n  \"timezone\": \"Africa/Bujumbura\",\n  \"space_amount\": 11345156112,\n  \"space_used\": 1237009912,\n  \"max_upload_size\": 2147483648,\n  \"status\": \"active\",\n  \"job_title\": \"CEO\",\n  \"phone\": \"6509241374\",\n  \"address\": \"900 Jefferson Ave, Redwood City, CA 94063\",\n  \"avatar_url\": \"https://www.box.com/api/avatar/large/181216415\",\n  \"role\": \"admin\",\n  \"tracking_codes\": [\n    {\n      \"type\": \"tracking_code\",\n      \"name\": \"department\",\n      \"value\": \"Sales\"\n    }\n  ],\n  \"can_see_managed_users\": true,\n  \"is_sync_enabled\": true,\n  \"is_external_collab_restricted\": true,\n  \"is_exempt_from_device_limits\": true,\n  \"is_exempt_from_login_verification\": true,\n  \"enterprise\": {\n    \"id\": \"11446498\",\n    \"type\": \"enterprise\",\n    \"name\": \"Acme Inc.\"\n  },\n  \"my_tags\": [\n    \"important\"\n  ],\n  \"hostname\": \"https://example.app.box.com/\",\n  \"is_platform_access_only\": true,\n  \"external_app_user_id\": \"my-user-1234\",\n  \"notification_email\": {\n    \"email\": \"notifications@example.com\",\n    \"is_confirmed\": true\n  }\n}"
            },
            {
              "id": "a102d47a-7203-419d-b6e9-f8c355dd5aa7",
              "name": "[400] Returns an error if some of the parameters are missing or",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"enterprise\": null,\n  \"notify\": true,\n  \"name\": \"Aaron Levie\",\n  \"login\": \"boss@box.com\",\n  \"role\": \"user\",\n  \"language\": \"en\",\n  \"is_sync_enabled\": true,\n  \"job_title\": \"CEO\",\n  \"phone\": \"6509241374\",\n  \"address\": \"900 Jefferson Ave, Redwood City, CA 94063\",\n  \"tracking_codes\": [\n    \"code1: 12345\"\n  ],\n  \"can_see_managed_users\": true,\n  \"timezone\": \"Africa/Bujumbura\",\n  \"is_external_collab_restricted\": true,\n  \"is_exempt_from_device_limits\": true,\n  \"is_exempt_from_login_verification\": true,\n  \"is_password_reset_required\": true,\n  \"status\": \"active\",\n  \"space_amount\": 11345156112,\n  \"notification_email\": {\n    \"email\": \"notifications@example.com\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/users/:user_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "users",
                    ":user_id"
                  ],
                  "query": [
                    {
                      "key": "fields",
                      "value": "[\"id\",\"type\",\"name\"]",
                      "description": "A comma-separated list of attributes to include in the\nresponse. This can be used to request fields that are\nnot normally returned in a standard response.\n\nBe aware that specifying this parameter will have the\neffect that none of the standard fields are returned in\nthe response unless explicitly specified, instead only\nfields for the mini representation are returned, additional\nto the fields requested.",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "1ed01e5b-6c01-4f90-a20a-dc0585b339ba",
                      "key": "user_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the user."
                    }
                  ]
                },
                "description": "Updates a managed user in an enterprise. This endpoint\n\nhttps://developer.box.com/en/reference/put-users-id"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        },
        {
          "name": "Delete user",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "8ff170a7-8a53-4288-8c58-4dc319116d7f",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "b608e068-db68-4b6b-b2e1-2506a02b6cdc",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/users/:user_id?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "users",
                ":user_id"
              ],
              "query": [
                {
                  "key": "notify",
                  "value": "true",
                  "description": "Whether the user will receive email notification of\nthe deletion",
                  "disabled": true
                },
                {
                  "key": "force",
                  "value": "true",
                  "description": "Whether the user should be deleted even if this user\nstill own files",
                  "disabled": true
                }
              ],
              "variable": [
                {
                  "id": "0dad04eb-2a18-4a5e-82dd-fa13729578fd",
                  "key": "user_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The ID of the user."
                }
              ]
            },
            "description": "Deletes a user. By default this will fail if the user\n\nhttps://developer.box.com/en/reference/delete-users-id"
          },
          "response": [
            {
              "id": "2cd700ad-eb45-4622-a63f-a231976568c4",
              "name": "[204] Removes the user and returns an empty response.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/users/:user_id?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "users",
                    ":user_id"
                  ],
                  "query": [
                    {
                      "key": "notify",
                      "value": "true",
                      "description": "Whether the user will receive email notification of\nthe deletion",
                      "disabled": true
                    },
                    {
                      "key": "force",
                      "value": "true",
                      "description": "Whether the user should be deleted even if this user\nstill own files",
                      "disabled": true
                    }
                  ],
                  "variable": [
                    {
                      "id": "0dad04eb-2a18-4a5e-82dd-fa13729578fd",
                      "key": "user_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the user."
                    }
                  ]
                },
                "description": "Deletes a user. By default this will fail if the user\n\nhttps://developer.box.com/en/reference/delete-users-id"
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        }
      ],
      "_postman_id": "10ff60d5-72d1-47af-b7ba-ca7b17d85add"
    },
    {
      "name": "Watermarks (Files)",
      "item": [
        {
          "name": "Get watermark on file",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c53ca5bf-c4b8-4d35-9db3-7e6bafa0afff",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "3a9a919c-00ef-435f-a599-27f4cb2c9725",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/files/:file_id/watermark",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "files",
                ":file_id",
                "watermark"
              ],
              "variable": [
                {
                  "id": "657052eb-1756-4c7d-9c51-66e5903637db",
                  "key": "file_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                }
              ]
            },
            "description": "Retrieve the watermark for a file.\n\nhttps://developer.box.com/en/reference/get-files-id-watermark"
          },
          "response": [
            {
              "id": "76fe1c54-9c66-4744-944b-55fe0bbe3c9e",
              "name": "[200] Returns an object containing information about the",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/watermark",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "watermark"
                  ],
                  "variable": [
                    {
                      "id": "657052eb-1756-4c7d-9c51-66e5903637db",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Retrieve the watermark for a file.\n\nhttps://developer.box.com/en/reference/get-files-id-watermark"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"watermark\": {\n    \"created_at\": \"2012-12-12T10:53:43-08:00\",\n    \"modified_at\": \"2012-12-12T10:53:43-08:00\"\n  }\n}"
            },
            {
              "id": "f1dafa40-4589-4f51-aba1-c01b39bbca91",
              "name": "[404] Returns an error if the file does not have a watermark applied.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/watermark",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "watermark"
                  ],
                  "variable": [
                    {
                      "id": "657052eb-1756-4c7d-9c51-66e5903637db",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Retrieve the watermark for a file.\n\nhttps://developer.box.com/en/reference/get-files-id-watermark"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        },
        {
          "name": "Apply watermark to file",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0057fa59-2bb4-4b17-bb5b-54401db4a0f9",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "25a46f5a-a439-4e12-8725-3103e8dfb472",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"watermark\": {\n    \"imprint\": \"default\"\n  }\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/files/:file_id/watermark",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "files",
                ":file_id",
                "watermark"
              ],
              "variable": [
                {
                  "id": "4a2a28f9-5aab-4c6d-b1ce-29fbf0170e57",
                  "key": "file_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                }
              ]
            },
            "description": "Applies or update a watermark on a file.\n\nhttps://developer.box.com/en/reference/put-files-id-watermark"
          },
          "response": [
            {
              "id": "623b3c02-4c3b-4977-9070-f0b291047175",
              "name": "[200] Returns an updated watermark if a watermark already",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"watermark\": {\n    \"imprint\": \"default\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/watermark",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "watermark"
                  ],
                  "variable": [
                    {
                      "id": "4a2a28f9-5aab-4c6d-b1ce-29fbf0170e57",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Applies or update a watermark on a file.\n\nhttps://developer.box.com/en/reference/put-files-id-watermark"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"watermark\": {\n    \"created_at\": \"2012-12-12T10:53:43-08:00\",\n    \"modified_at\": \"2012-12-12T10:53:43-08:00\"\n  }\n}"
            },
            {
              "id": "85134108-a345-448c-a4ad-1e14823e25c6",
              "name": "[201] Returns a new watermark if no watermark existed on",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"watermark\": {\n    \"imprint\": \"default\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/watermark",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "watermark"
                  ],
                  "variable": [
                    {
                      "id": "4a2a28f9-5aab-4c6d-b1ce-29fbf0170e57",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Applies or update a watermark on a file.\n\nhttps://developer.box.com/en/reference/put-files-id-watermark"
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"watermark\": {\n    \"created_at\": \"2012-12-12T10:53:43-08:00\",\n    \"modified_at\": \"2012-12-12T10:53:43-08:00\"\n  }\n}"
            }
          ]
        },
        {
          "name": "Remove watermark from file",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7e559389-ca7c-4b1c-abac-6f9929360399",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "4e821c44-5b1f-439f-af1d-df64ad97339f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/files/:file_id/watermark",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "files",
                ":file_id",
                "watermark"
              ],
              "variable": [
                {
                  "id": "e6ee2383-2c19-4f72-b47d-81021609f7f9",
                  "key": "file_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                }
              ]
            },
            "description": "Removes the watermark from a file.\n\nhttps://developer.box.com/en/reference/delete-files-id-watermark"
          },
          "response": [
            {
              "id": "f174fb06-c230-40af-96ba-6ff8e1d68039",
              "name": "[204] An empty response will be returned when the watermark",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/watermark",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "watermark"
                  ],
                  "variable": [
                    {
                      "id": "e6ee2383-2c19-4f72-b47d-81021609f7f9",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Removes the watermark from a file.\n\nhttps://developer.box.com/en/reference/delete-files-id-watermark"
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "faa31ea0-0e35-4794-93f4-ba23683cc581",
              "name": "[404] Returns an error if the file did not have",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/files/:file_id/watermark",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "files",
                    ":file_id",
                    "watermark"
                  ],
                  "variable": [
                    {
                      "id": "e6ee2383-2c19-4f72-b47d-81021609f7f9",
                      "key": "file_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The unique identifier that represent a file.\n\nThe ID for any file can be determined\nby visiting a file in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/files/123`\nthe `file_id` is `123`."
                    }
                  ]
                },
                "description": "Removes the watermark from a file.\n\nhttps://developer.box.com/en/reference/delete-files-id-watermark"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        }
      ],
      "_postman_id": "80886211-9cbc-4386-adbd-b7029d16e462"
    },
    {
      "name": "Watermarks (Folders)",
      "item": [
        {
          "name": "Get watermark for folder",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d8fc6d69-0ba2-4713-8c86-0491fdcd4351",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "c6c72efa-5f6b-4889-859a-7ac4e7ff1c3b",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/watermark",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "folders",
                ":folder_id",
                "watermark"
              ],
              "variable": [
                {
                  "id": "046bc6ee-2b8b-44e4-bb83-10d50ab09afa",
                  "key": "folder_id",
                  "value": "0",
                  "type": "string",
                  "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                }
              ]
            },
            "description": "Retrieve the watermark for a folder.\n\nhttps://developer.box.com/en/reference/get-folders-id-watermark"
          },
          "response": [
            {
              "id": "b46af4d8-bea6-4b26-9e99-146584dc1c60",
              "name": "[200] Returns an object containing information about the",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/watermark",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "watermark"
                  ],
                  "variable": [
                    {
                      "id": "046bc6ee-2b8b-44e4-bb83-10d50ab09afa",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Retrieve the watermark for a folder.\n\nhttps://developer.box.com/en/reference/get-folders-id-watermark"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"watermark\": {\n    \"created_at\": \"2012-12-12T10:53:43-08:00\",\n    \"modified_at\": \"2012-12-12T10:53:43-08:00\"\n  }\n}"
            },
            {
              "id": "d320cade-6ff8-4e09-8235-c922566f83ca",
              "name": "[404] Returns an error if the folder does not have a watermark applied.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/watermark",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "watermark"
                  ],
                  "variable": [
                    {
                      "id": "046bc6ee-2b8b-44e4-bb83-10d50ab09afa",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Retrieve the watermark for a folder.\n\nhttps://developer.box.com/en/reference/get-folders-id-watermark"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        },
        {
          "name": "Apply watermark to folder",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b50953c1-cc05-4674-ab89-a1a3c62683cf",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "f6048688-9162-4757-8a46-078c5bb80e78",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"watermark\": {\n    \"imprint\": \"default\"\n  }\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/watermark",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "folders",
                ":folder_id",
                "watermark"
              ],
              "variable": [
                {
                  "id": "65900d3f-e50c-4827-aa8e-db55a14f84f9",
                  "key": "folder_id",
                  "value": "0",
                  "type": "string",
                  "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                }
              ]
            },
            "description": "Applies or update a watermark on a folder.\n\nhttps://developer.box.com/en/reference/put-folders-id-watermark"
          },
          "response": [
            {
              "id": "1212cf64-69bf-49c9-8ec5-cf785633588c",
              "name": "[200] Returns an updated watermark if a watermark already",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"watermark\": {\n    \"imprint\": \"default\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/watermark",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "watermark"
                  ],
                  "variable": [
                    {
                      "id": "65900d3f-e50c-4827-aa8e-db55a14f84f9",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Applies or update a watermark on a folder.\n\nhttps://developer.box.com/en/reference/put-folders-id-watermark"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"watermark\": {\n    \"created_at\": \"2012-12-12T10:53:43-08:00\",\n    \"modified_at\": \"2012-12-12T10:53:43-08:00\"\n  }\n}"
            },
            {
              "id": "b5016790-bae1-4344-9ed3-4c2ae8a9a860",
              "name": "[201] Returns a new watermark if no watermark existed on",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"watermark\": {\n    \"imprint\": \"default\"\n  }\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/watermark",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "watermark"
                  ],
                  "variable": [
                    {
                      "id": "65900d3f-e50c-4827-aa8e-db55a14f84f9",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Applies or update a watermark on a folder.\n\nhttps://developer.box.com/en/reference/put-folders-id-watermark"
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"watermark\": {\n    \"created_at\": \"2012-12-12T10:53:43-08:00\",\n    \"modified_at\": \"2012-12-12T10:53:43-08:00\"\n  }\n}"
            }
          ]
        },
        {
          "name": "Remove watermark from folder",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "17503484-c408-4fb7-9c50-5819624d1a0f",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "2ec9e8b9-a4ad-4793-ab82-06300830f254",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/watermark",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "folders",
                ":folder_id",
                "watermark"
              ],
              "variable": [
                {
                  "id": "7963214c-1f3e-476f-90f4-dd1fc6181ab2",
                  "key": "folder_id",
                  "value": "0",
                  "type": "string",
                  "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                }
              ]
            },
            "description": "Removes the watermark from a folder.\n\nhttps://developer.box.com/en/reference/delete-folders-id-watermark"
          },
          "response": [
            {
              "id": "8df0bc66-9e10-443b-93f6-9e157934d796",
              "name": "[404] Returns an error if the folder did not have",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/watermark",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "watermark"
                  ],
                  "variable": [
                    {
                      "id": "7963214c-1f3e-476f-90f4-dd1fc6181ab2",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Removes the watermark from a folder.\n\nhttps://developer.box.com/en/reference/delete-folders-id-watermark"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "c1c09189-8d1d-4979-b6d2-6debeab819ee",
              "name": "[204] An empty response will be returned when the watermark",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/folders/:folder_id/watermark",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "folders",
                    ":folder_id",
                    "watermark"
                  ],
                  "variable": [
                    {
                      "id": "7963214c-1f3e-476f-90f4-dd1fc6181ab2",
                      "key": "folder_id",
                      "value": "0",
                      "type": "string",
                      "description": "The unique identifier that represent a folder.\n\nThe ID for any folder can be determined\nby visiting this folder in the web application\nand copying the ID from the URL. For example,\nfor the URL `https://*.app.box.com/folder/123`\nthe `folder_id` is `123`.\n\nThe root folder of a Box account is\nalways represented by the ID `0`."
                    }
                  ]
                },
                "description": "Removes the watermark from a folder.\n\nhttps://developer.box.com/en/reference/delete-folders-id-watermark"
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        }
      ],
      "_postman_id": "b3202864-4599-486a-b627-f4f648851be6"
    },
    {
      "name": "Web links",
      "item": [
        {
          "name": "Get web link",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "4bcb1b56-ead4-4146-84be-63e3f3698f52",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "ebde6ea8-3db6-441f-969d-a7c4a1a80c5f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/web_links/:web_link_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "web_links",
                ":web_link_id"
              ],
              "variable": [
                {
                  "id": "e17cca19-e90a-4c20-ba98-5be1fab47862",
                  "key": "web_link_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The ID of the web link."
                }
              ]
            },
            "description": "Retrieve information about a web link.\n\nhttps://developer.box.com/en/reference/get-web-links-id"
          },
          "response": [
            {
              "id": "e440fab4-203e-4322-bf0f-9e152b9635f2",
              "name": "[200] Returns the web link object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/web_links/:web_link_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "web_links",
                    ":web_link_id"
                  ],
                  "variable": [
                    {
                      "id": "e17cca19-e90a-4c20-ba98-5be1fab47862",
                      "key": "web_link_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the web link."
                    }
                  ]
                },
                "description": "Retrieve information about a web link.\n\nhttps://developer.box.com/en/reference/get-web-links-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"web_link\",\n  \"sequence_id\": \"3\",\n  \"etag\": \"1\",\n  \"name\": \"My Bookmark\",\n  \"url\": \"https://www.example.com/example/1234\",\n  \"parent\": {\n    \"id\": \"12345\",\n    \"etag\": \"1\",\n    \"type\": \"folder\",\n    \"sequence_id\": \"3\",\n    \"name\": \"Contracts\"\n  },\n  \"description\": \"Example page\",\n  \"path_collection\": [\n    {\n      \"id\": \"12345\",\n      \"etag\": \"1\",\n      \"type\": \"folder\",\n      \"sequence_id\": \"3\",\n      \"name\": \"Contracts\"\n    }\n  ],\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"trashed_at\": \"2012-12-12T10:53:43-08:00\",\n  \"purged_at\": \"2012-12-12T10:53:43-08:00\",\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"modified_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"owned_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"shared_link\": {\n    \"url\": \"https://www.box.com/s/vspke7y05sb214wjokpk\",\n    \"download_url\": \"https://www.box.com/shared/static/rh935iit6ewrmw0unyul.jpeg\",\n    \"vanity_url\": \"https://acme.app.box.com/v/my_url/\",\n    \"access\": \"open\",\n    \"effective_access\": \"company\",\n    \"effective_permission\": \"can_download\",\n    \"unshared_at\": \"2018-04-13T13:53:23-07:00\",\n    \"is_password_enabled\": true,\n    \"permissions\": {\n      \"can_download\": true,\n      \"can_preview\": true\n    },\n    \"download_count\": 3,\n    \"preview_count\": 3\n  },\n  \"item_status\": \"active\"\n}"
            }
          ]
        },
        {
          "name": "Create web link",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2ed067bb-71a6-4b40-bb47-b63e212cb656",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "d50b1f3e-6502-46c6-834c-b6da4b6ddd74",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"url\": \"https://box.com\",\n  \"parent\": {\n    \"id\": \"0\"\n  },\n  \"name\": \"Box Website\",\n  \"description\": \"Cloud Content Management\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "https://{{api.box.com}}/2.0/web_links",
            "description": "Creates a web link object within a folder.\n\nhttps://developer.box.com/en/reference/post-web-links"
          },
          "response": [
            {
              "id": "5acf6ff8-4156-4d3c-aa3d-2a9622647460",
              "name": "[200] Returns the newly created web link object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"url\": \"https://box.com\",\n  \"parent\": {\n    \"id\": \"0\"\n  },\n  \"name\": \"Box Website\",\n  \"description\": \"Cloud Content Management\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/web_links",
                "description": "Creates a web link object within a folder.\n\nhttps://developer.box.com/en/reference/post-web-links"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"web_link\",\n  \"sequence_id\": \"3\",\n  \"etag\": \"1\",\n  \"name\": \"My Bookmark\",\n  \"url\": \"https://www.example.com/example/1234\",\n  \"parent\": {\n    \"id\": \"12345\",\n    \"etag\": \"1\",\n    \"type\": \"folder\",\n    \"sequence_id\": \"3\",\n    \"name\": \"Contracts\"\n  },\n  \"description\": \"Example page\",\n  \"path_collection\": [\n    {\n      \"id\": \"12345\",\n      \"etag\": \"1\",\n      \"type\": \"folder\",\n      \"sequence_id\": \"3\",\n      \"name\": \"Contracts\"\n    }\n  ],\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"trashed_at\": \"2012-12-12T10:53:43-08:00\",\n  \"purged_at\": \"2012-12-12T10:53:43-08:00\",\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"modified_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"owned_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"shared_link\": {\n    \"url\": \"https://www.box.com/s/vspke7y05sb214wjokpk\",\n    \"download_url\": \"https://www.box.com/shared/static/rh935iit6ewrmw0unyul.jpeg\",\n    \"vanity_url\": \"https://acme.app.box.com/v/my_url/\",\n    \"access\": \"open\",\n    \"effective_access\": \"company\",\n    \"effective_permission\": \"can_download\",\n    \"unshared_at\": \"2018-04-13T13:53:23-07:00\",\n    \"is_password_enabled\": true,\n    \"permissions\": {\n      \"can_download\": true,\n      \"can_preview\": true\n    },\n    \"download_count\": 3,\n    \"preview_count\": 3\n  },\n  \"item_status\": \"active\"\n}"
            }
          ]
        },
        {
          "name": "Update web link",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "3b677826-b4a3-4014-a25e-3efbe416d389",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "68b6728c-35a5-4bdf-92da-47143242e475",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"url\": \"https://box.com\",\n  \"parent\": {\n    \"id\": \"123\"\n  },\n  \"name\": \"Box Website\",\n  \"description\": \"Cloud Content Management\"\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/web_links/:web_link_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "web_links",
                ":web_link_id"
              ],
              "variable": [
                {
                  "id": "b1b1c0e2-0f58-4f69-a14c-3574047cbbc2",
                  "key": "web_link_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The ID of the web link."
                }
              ]
            },
            "description": "Updates a web link object.\n\nhttps://developer.box.com/en/reference/put-web-links-id"
          },
          "response": [
            {
              "id": "8e9f455b-4c6f-458e-a8be-ab6ad694a9b5",
              "name": "[200] Returns the updated web link object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"url\": \"https://box.com\",\n  \"parent\": {\n    \"id\": \"123\"\n  },\n  \"name\": \"Box Website\",\n  \"description\": \"Cloud Content Management\"\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/web_links/:web_link_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "web_links",
                    ":web_link_id"
                  ],
                  "variable": [
                    {
                      "id": "b1b1c0e2-0f58-4f69-a14c-3574047cbbc2",
                      "key": "web_link_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the web link."
                    }
                  ]
                },
                "description": "Updates a web link object.\n\nhttps://developer.box.com/en/reference/put-web-links-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"web_link\",\n  \"sequence_id\": \"3\",\n  \"etag\": \"1\",\n  \"name\": \"My Bookmark\",\n  \"url\": \"https://www.example.com/example/1234\",\n  \"parent\": {\n    \"id\": \"12345\",\n    \"etag\": \"1\",\n    \"type\": \"folder\",\n    \"sequence_id\": \"3\",\n    \"name\": \"Contracts\"\n  },\n  \"description\": \"Example page\",\n  \"path_collection\": [\n    {\n      \"id\": \"12345\",\n      \"etag\": \"1\",\n      \"type\": \"folder\",\n      \"sequence_id\": \"3\",\n      \"name\": \"Contracts\"\n    }\n  ],\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"modified_at\": \"2012-12-12T10:53:43-08:00\",\n  \"trashed_at\": \"2012-12-12T10:53:43-08:00\",\n  \"purged_at\": \"2012-12-12T10:53:43-08:00\",\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"modified_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"owned_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"shared_link\": {\n    \"url\": \"https://www.box.com/s/vspke7y05sb214wjokpk\",\n    \"download_url\": \"https://www.box.com/shared/static/rh935iit6ewrmw0unyul.jpeg\",\n    \"vanity_url\": \"https://acme.app.box.com/v/my_url/\",\n    \"access\": \"open\",\n    \"effective_access\": \"company\",\n    \"effective_permission\": \"can_download\",\n    \"unshared_at\": \"2018-04-13T13:53:23-07:00\",\n    \"is_password_enabled\": true,\n    \"permissions\": {\n      \"can_download\": true,\n      \"can_preview\": true\n    },\n    \"download_count\": 3,\n    \"preview_count\": 3\n  },\n  \"item_status\": \"active\"\n}"
            }
          ]
        },
        {
          "name": "Remove web link",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7c8e39f9-9ff1-463e-9d13-9d83831e7682",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "656adbeb-b14d-4f7f-bb09-6b084328f3ce",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/web_links/:web_link_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "web_links",
                ":web_link_id"
              ],
              "variable": [
                {
                  "id": "e59288ad-947c-4ac7-8618-142155dce12d",
                  "key": "web_link_id",
                  "value": "12345",
                  "type": "string",
                  "description": "The ID of the web link."
                }
              ]
            },
            "description": "Deletes a web link.\n\nhttps://developer.box.com/en/reference/delete-web-links-id"
          },
          "response": [
            {
              "id": "269ff85b-ae93-4554-b1be-8311f64f4679",
              "name": "[204] An empty response will be returned when the web link",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/web_links/:web_link_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "web_links",
                    ":web_link_id"
                  ],
                  "variable": [
                    {
                      "id": "e59288ad-947c-4ac7-8618-142155dce12d",
                      "key": "web_link_id",
                      "value": "12345",
                      "type": "string",
                      "description": "The ID of the web link."
                    }
                  ]
                },
                "description": "Deletes a web link.\n\nhttps://developer.box.com/en/reference/delete-web-links-id"
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        }
      ],
      "_postman_id": "16334516-f373-4d34-b07d-7532540bb3c8"
    },
    {
      "name": "Webhooks",
      "item": [
        {
          "name": "List all webhooks",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "92b1fa19-ac6e-4186-b7ab-6144513a5400",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "ae294467-af02-4ee5-afbc-0077e0e13703",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/webhooks?",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "webhooks"
              ],
              "query": [
                {
                  "key": "marker",
                  "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                  "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                  "disabled": true
                },
                {
                  "key": "limit",
                  "value": "1000",
                  "description": "The maximum number of items to return per page.",
                  "disabled": true
                }
              ]
            },
            "description": "Returns all defined webhooks for the requesting application.\n\nhttps://developer.box.com/en/reference/get-webhooks"
          },
          "response": [
            {
              "id": "7ded9287-68df-4c70-a175-080d88ddba02",
              "name": "[403] Returns an error if the application does not",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/webhooks?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "webhooks"
                  ],
                  "query": [
                    {
                      "key": "marker",
                      "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                      "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Returns all defined webhooks for the requesting application.\n\nhttps://developer.box.com/en/reference/get-webhooks"
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "ff6056ff-6ae8-4283-83db-37464e1d352f",
              "name": "[200] Returns a list of webhooks.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/webhooks?",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "webhooks"
                  ],
                  "query": [
                    {
                      "key": "marker",
                      "value": "JV9IRGZmieiBasejOG9yDCRNgd2ymoZIbjsxbJMjIs3kioVii",
                      "description": "Defines the position marker at which to begin returning results. This is\nused when paginating using marker-based pagination.\n\nThis requires `usemarker` to be set to `true`.",
                      "disabled": true
                    },
                    {
                      "key": "limit",
                      "value": "1000",
                      "description": "The maximum number of items to return per page.",
                      "disabled": true
                    }
                  ]
                },
                "description": "Returns all defined webhooks for the requesting application.\n\nhttps://developer.box.com/en/reference/get-webhooks"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"limit\": 1000,\n  \"next_marker\": 3000,\n  \"prev_marker\": 1000,\n  \"entries\": [\n    {\n      \"id\": \"11446498\",\n      \"type\": \"webhook\",\n      \"target\": {\n        \"id\": \"1231232\",\n        \"type\": \"file\"\n      },\n      \"created_by\": {\n        \"id\": \"11446498\",\n        \"type\": \"user\",\n        \"name\": \"Aaron Levie\",\n        \"login\": \"ceo@example.com\"\n      },\n      \"created_at\": \"2012-12-12T10:53:43-08:00\",\n      \"address\": \"https://example.com/webhooks\",\n      \"triggers\": [\n        \"FILE.UPLOADED\"\n      ]\n    }\n  ]\n}"
            }
          ]
        },
        {
          "name": "Get webhook",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "fcea0d1c-16ea-4340-82ab-dfda23af58d0",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "d9be4e1a-41dc-4ce4-a54d-237245570c54",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "GET",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/webhooks/:webhook_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "webhooks",
                ":webhook_id"
              ],
              "variable": [
                {
                  "id": "79ab2893-fcd1-4882-96dd-49459697c5f3",
                  "key": "webhook_id",
                  "value": "3321123",
                  "type": "string",
                  "description": "The ID of the webhook."
                }
              ]
            },
            "description": "Retrieves a specific webhook\n\nhttps://developer.box.com/en/reference/get-webhooks-id"
          },
          "response": [
            {
              "id": "195973ce-3072-43c8-86bc-40df3722241a",
              "name": "[200] Returns a webhook object",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/webhooks/:webhook_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "webhooks",
                    ":webhook_id"
                  ],
                  "variable": [
                    {
                      "id": "79ab2893-fcd1-4882-96dd-49459697c5f3",
                      "key": "webhook_id",
                      "value": "3321123",
                      "type": "string",
                      "description": "The ID of the webhook."
                    }
                  ]
                },
                "description": "Retrieves a specific webhook\n\nhttps://developer.box.com/en/reference/get-webhooks-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"webhook\",\n  \"target\": {\n    \"id\": \"1231232\",\n    \"type\": \"file\"\n  },\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"address\": \"https://example.com/webhooks\",\n  \"triggers\": [\n    \"FILE.UPLOADED\"\n  ]\n}"
            },
            {
              "id": "56685fb2-5582-42f7-b566-61afd34da817",
              "name": "[403] Returns an error if the application does not",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/webhooks/:webhook_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "webhooks",
                    ":webhook_id"
                  ],
                  "variable": [
                    {
                      "id": "79ab2893-fcd1-4882-96dd-49459697c5f3",
                      "key": "webhook_id",
                      "value": "3321123",
                      "type": "string",
                      "description": "The ID of the webhook."
                    }
                  ]
                },
                "description": "Retrieves a specific webhook\n\nhttps://developer.box.com/en/reference/get-webhooks-id"
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "873d1021-7a34-4ac6-8acb-75780f29cd6f",
              "name": "[404] Returns an error if the webhook could not be found",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/webhooks/:webhook_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "webhooks",
                    ":webhook_id"
                  ],
                  "variable": [
                    {
                      "id": "79ab2893-fcd1-4882-96dd-49459697c5f3",
                      "key": "webhook_id",
                      "value": "3321123",
                      "type": "string",
                      "description": "The ID of the webhook."
                    }
                  ]
                },
                "description": "Retrieves a specific webhook\n\nhttps://developer.box.com/en/reference/get-webhooks-id"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        },
        {
          "name": "Create webhook",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6e44fc53-d5bd-468c-bc9e-6f51aad6b002",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "37c20e7e-0e25-464e-8a4f-8747c42cc855",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"target\": {\n    \"id\": \"1231232\",\n    \"type\": \"file\"\n  },\n  \"address\": \"https://example.com/webhooks\",\n  \"triggers\": [\n    \"FILE.UPLOADED\"\n  ]\n}",
              "options": {
                "raw": {}
              }
            },
            "url": "https://{{api.box.com}}/2.0/webhooks",
            "description": "Creates a webhook.\n\nhttps://developer.box.com/en/reference/post-webhooks"
          },
          "response": [
            {
              "id": "1a76f44c-d90c-4e44-9355-0483f13eece4",
              "name": "[400] Returns an error if the parameters were",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"target\": {\n    \"id\": \"1231232\",\n    \"type\": \"file\"\n  },\n  \"address\": \"https://example.com/webhooks\",\n  \"triggers\": [\n    \"FILE.UPLOADED\"\n  ]\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/webhooks",
                "description": "Creates a webhook.\n\nhttps://developer.box.com/en/reference/post-webhooks"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "6a85364d-976d-495b-80cd-0cb3112ff4a5",
              "name": "[409] Returns an error if the a webhook for this",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"target\": {\n    \"id\": \"1231232\",\n    \"type\": \"file\"\n  },\n  \"address\": \"https://example.com/webhooks\",\n  \"triggers\": [\n    \"FILE.UPLOADED\"\n  ]\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/webhooks",
                "description": "Creates a webhook.\n\nhttps://developer.box.com/en/reference/post-webhooks"
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "a26d2aec-208c-4573-85d5-58f55ab12c6e",
              "name": "[404] Returns an error if the target item could",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"target\": {\n    \"id\": \"1231232\",\n    \"type\": \"file\"\n  },\n  \"address\": \"https://example.com/webhooks\",\n  \"triggers\": [\n    \"FILE.UPLOADED\"\n  ]\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/webhooks",
                "description": "Creates a webhook.\n\nhttps://developer.box.com/en/reference/post-webhooks"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "ad95757e-130a-4374-be4e-4a77efadeb1e",
              "name": "[403] Returns an error if the application does not",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"target\": {\n    \"id\": \"1231232\",\n    \"type\": \"file\"\n  },\n  \"address\": \"https://example.com/webhooks\",\n  \"triggers\": [\n    \"FILE.UPLOADED\"\n  ]\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/webhooks",
                "description": "Creates a webhook.\n\nhttps://developer.box.com/en/reference/post-webhooks"
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "edd820f7-c3c2-4efd-8d3c-74461e13a55f",
              "name": "[201] Returns the new webhook object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"target\": {\n    \"id\": \"1231232\",\n    \"type\": \"file\"\n  },\n  \"address\": \"https://example.com/webhooks\",\n  \"triggers\": [\n    \"FILE.UPLOADED\"\n  ]\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": "https://{{api.box.com}}/2.0/webhooks",
                "description": "Creates a webhook.\n\nhttps://developer.box.com/en/reference/post-webhooks"
              },
              "status": "Created",
              "code": 201,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"webhook\",\n  \"target\": {\n    \"id\": \"1231232\",\n    \"type\": \"file\"\n  },\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"address\": \"https://example.com/webhooks\",\n  \"triggers\": [\n    \"FILE.UPLOADED\"\n  ]\n}"
            }
          ]
        },
        {
          "name": "Update webhook",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "333bd707-a2d9-4e20-b3ca-d3b9689c77f7",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "2d4e79fe-40e5-41a1-a08b-41f6c9b06ac1",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"target\": {\n    \"id\": \"1231232\",\n    \"type\": \"file\"\n  },\n  \"address\": \"https://example.com/webhooks\",\n  \"triggers\": [\n    \"FILE.UPLOADED\"\n  ]\n}",
              "options": {
                "raw": {}
              }
            },
            "url": {
              "raw": "https://{{api.box.com}}/2.0/webhooks/:webhook_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "webhooks",
                ":webhook_id"
              ],
              "variable": [
                {
                  "id": "dbc39a86-31fd-4643-9e80-bc0fb319953c",
                  "key": "webhook_id",
                  "value": "3321123",
                  "type": "string",
                  "description": "The ID of the webhook."
                }
              ]
            },
            "description": "Updates a webhook.\n\nhttps://developer.box.com/en/reference/put-webhooks-id"
          },
          "response": [
            {
              "id": "24e42ac8-85a7-47c2-bdd0-844a34462149",
              "name": "[400] Returns an error if the parameters were",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"target\": {\n    \"id\": \"1231232\",\n    \"type\": \"file\"\n  },\n  \"address\": \"https://example.com/webhooks\",\n  \"triggers\": [\n    \"FILE.UPLOADED\"\n  ]\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/webhooks/:webhook_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "webhooks",
                    ":webhook_id"
                  ],
                  "variable": [
                    {
                      "id": "dbc39a86-31fd-4643-9e80-bc0fb319953c",
                      "key": "webhook_id",
                      "value": "3321123",
                      "type": "string",
                      "description": "The ID of the webhook."
                    }
                  ]
                },
                "description": "Updates a webhook.\n\nhttps://developer.box.com/en/reference/put-webhooks-id"
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "6cfc3cbe-8962-4dd5-827d-f6ad110d0493",
              "name": "[200] Returns the new webhook object.",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"target\": {\n    \"id\": \"1231232\",\n    \"type\": \"file\"\n  },\n  \"address\": \"https://example.com/webhooks\",\n  \"triggers\": [\n    \"FILE.UPLOADED\"\n  ]\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/webhooks/:webhook_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "webhooks",
                    ":webhook_id"
                  ],
                  "variable": [
                    {
                      "id": "dbc39a86-31fd-4643-9e80-bc0fb319953c",
                      "key": "webhook_id",
                      "value": "3321123",
                      "type": "string",
                      "description": "The ID of the webhook."
                    }
                  ]
                },
                "description": "Updates a webhook.\n\nhttps://developer.box.com/en/reference/put-webhooks-id"
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"id\": \"11446498\",\n  \"type\": \"webhook\",\n  \"target\": {\n    \"id\": \"1231232\",\n    \"type\": \"file\"\n  },\n  \"created_by\": {\n    \"id\": \"11446498\",\n    \"type\": \"user\",\n    \"name\": \"Aaron Levie\",\n    \"login\": \"ceo@example.com\"\n  },\n  \"created_at\": \"2012-12-12T10:53:43-08:00\",\n  \"address\": \"https://example.com/webhooks\",\n  \"triggers\": [\n    \"FILE.UPLOADED\"\n  ]\n}"
            },
            {
              "id": "7c13a050-2772-4ccd-916c-1ac266caaea7",
              "name": "[403] Returns an error if the application does not",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"target\": {\n    \"id\": \"1231232\",\n    \"type\": \"file\"\n  },\n  \"address\": \"https://example.com/webhooks\",\n  \"triggers\": [\n    \"FILE.UPLOADED\"\n  ]\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/webhooks/:webhook_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "webhooks",
                    ":webhook_id"
                  ],
                  "variable": [
                    {
                      "id": "dbc39a86-31fd-4643-9e80-bc0fb319953c",
                      "key": "webhook_id",
                      "value": "3321123",
                      "type": "string",
                      "description": "The ID of the webhook."
                    }
                  ]
                },
                "description": "Updates a webhook.\n\nhttps://developer.box.com/en/reference/put-webhooks-id"
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "92fdb188-a0e4-416a-abb6-a2da1fed72bd",
              "name": "[404] Returns an error if the target item or webhook",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"target\": {\n    \"id\": \"1231232\",\n    \"type\": \"file\"\n  },\n  \"address\": \"https://example.com/webhooks\",\n  \"triggers\": [\n    \"FILE.UPLOADED\"\n  ]\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/webhooks/:webhook_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "webhooks",
                    ":webhook_id"
                  ],
                  "variable": [
                    {
                      "id": "dbc39a86-31fd-4643-9e80-bc0fb319953c",
                      "key": "webhook_id",
                      "value": "3321123",
                      "type": "string",
                      "description": "The ID of the webhook."
                    }
                  ]
                },
                "description": "Updates a webhook.\n\nhttps://developer.box.com/en/reference/put-webhooks-id"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "e9a8cef3-54ce-4ead-8941-0a3e56162e35",
              "name": "[409] Returns an error if the a webhook for this",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"target\": {\n    \"id\": \"1231232\",\n    \"type\": \"file\"\n  },\n  \"address\": \"https://example.com/webhooks\",\n  \"triggers\": [\n    \"FILE.UPLOADED\"\n  ]\n}",
                  "options": {
                    "raw": {}
                  }
                },
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/webhooks/:webhook_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "webhooks",
                    ":webhook_id"
                  ],
                  "variable": [
                    {
                      "id": "dbc39a86-31fd-4643-9e80-bc0fb319953c",
                      "key": "webhook_id",
                      "value": "3321123",
                      "type": "string",
                      "description": "The ID of the webhook."
                    }
                  ]
                },
                "description": "Updates a webhook.\n\nhttps://developer.box.com/en/reference/put-webhooks-id"
              },
              "status": "Conflict",
              "code": 409,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        },
        {
          "name": "Remove webhook",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "4df5ebf2-c4e1-4912-a3c2-79eb325b58cb",
                "type": "text/javascript",
                "exec": [
                  "/* global pm */\n\n/**\n * Pre-request script ran before every API request.\n *\n * Used to notify users that their access token has expired\n */\n\n// determine if the Access Token has expired\nconst expiresAt = pm.environment.get('expires_at')\nconst expired = Date.now() > Number(expiresAt)\n\n// determine if the user has auto-refresh enabled\nconst autoRefresh = String(pm.environment.get('enable_auto_refresh_access_token')) === 'true'\n\n// determine if we have all the client credentials needed in the environment\nconst hasClientId = String(pm.environment.get('client_id')).length === 32\nconst hasClientSecret = String(pm.environment.get('client_secret')).length === 32\nconst hasRefreshToken = String(pm.environment.get('refresh_token')).length === 64\nconst hasAllCredentials = hasClientId && hasClientSecret && hasRefreshToken\n\n// if the access token expired and auto refresh has been set, use the refresh\n// token to create a new access token\nif (expired && autoRefresh && hasAllCredentials) {\n  // send a new API request to refresh the access token\n  pm.sendRequest({\n    url: 'https://api.box.com/oauth2/token',\n    method: 'POST',\n    headers: { 'Content-Type': 'Content-Type: application/x-www-form-urlencoded' },\n    body: {\n      mode: 'urlencoded',\n      urlencoded: [\n        { key: 'client_id', value: pm.environment.get('client_id'), disabled: false },\n        { key: 'client_secret', value: pm.environment.get('client_secret'), disabled: false },\n        { key: 'refresh_token', value: pm.environment.get('refresh_token'), disabled: false },\n        { key: 'grant_type', value: 'refresh_token', disabled: false }\n      ]\n    }\n  }, function (error, response) {\n    if (error || response.json().error) {\n      // if an error occured, log the error and raise a message to the user.\n      console.log('Could not refresh the access token')\n      console.log(error)\n      console.log(response.json())\n      throw new Error('Could not refresh the access token. Check the console for more details.')\n    } else {\n      // otherwise, fetch the new access token and store it\n      const data = response.json()\n\n      // determine when this token is set to expire at\n      const newExpiresAt = Date.now() + data.expires_in * 1000\n      // store the new variables in the environment\n      pm.environment.set('access_token', data.access_token)\n      pm.environment.set('refresh_token', data.refresh_token)\n      pm.environment.set('expires_at', newExpiresAt)\n    }\n  })\n} else if (expired) {\n  // otherwise, throw a message to the user if the access token expired.\n  throw new Error('Access token expired. Please use the \"Authorization => Refresh access token\" API to request a new token.')\n}\n"
                ]
              }
            }
          ],
          "_postman_id": "dde88b0b-c681-4026-8b1c-a0144edc5b2f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "oauth2",
              "oauth2": {
                "accessToken": "{{access_token}}",
                "tokenType": "bearer",
                "addTokenTo": "header"
              }
            },
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "https://{{api.box.com}}/2.0/webhooks/:webhook_id",
              "protocol": "https",
              "host": [
                "{{api.box.com}}"
              ],
              "path": [
                "2.0",
                "webhooks",
                ":webhook_id"
              ],
              "variable": [
                {
                  "id": "b371e28e-3a6f-4fbb-8b5c-f9dfa03799da",
                  "key": "webhook_id",
                  "value": "3321123",
                  "type": "string",
                  "description": "The ID of the webhook."
                }
              ]
            },
            "description": "Deletes a webhook.\n\nhttps://developer.box.com/en/reference/delete-webhooks-id"
          },
          "response": [
            {
              "id": "05295b69-428c-4cf0-86d3-ced48e58eeb4",
              "name": "[404] Returns an error if the webhook could not be found",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/webhooks/:webhook_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "webhooks",
                    ":webhook_id"
                  ],
                  "variable": [
                    {
                      "id": "b371e28e-3a6f-4fbb-8b5c-f9dfa03799da",
                      "key": "webhook_id",
                      "value": "3321123",
                      "type": "string",
                      "description": "The ID of the webhook."
                    }
                  ]
                },
                "description": "Deletes a webhook.\n\nhttps://developer.box.com/en/reference/delete-webhooks-id"
              },
              "status": "Not Found",
              "code": 404,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            },
            {
              "id": "4dbf171c-08c5-43b4-81b5-f97147de97b8",
              "name": "[204] An empty response will be returned when the webhook",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/webhooks/:webhook_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "webhooks",
                    ":webhook_id"
                  ],
                  "variable": [
                    {
                      "id": "b371e28e-3a6f-4fbb-8b5c-f9dfa03799da",
                      "key": "webhook_id",
                      "value": "3321123",
                      "type": "string",
                      "description": "The ID of the webhook."
                    }
                  ]
                },
                "description": "Deletes a webhook.\n\nhttps://developer.box.com/en/reference/delete-webhooks-id"
              },
              "status": "No Content",
              "code": 204,
              "_postman_previewlanguage": "Text",
              "header": [],
              "cookie": [],
              "responseTime": null,
              "body": ""
            },
            {
              "id": "8c801150-6257-48b1-9169-979ef6be8034",
              "name": "[403] Returns an error if the application does not",
              "originalRequest": {
                "auth": {
                  "type": "oauth2",
                  "oauth2": {
                    "accessToken": "{{access_token}}",
                    "tokenType": "bearer",
                    "addTokenTo": "header"
                  }
                },
                "method": "DELETE",
                "header": [],
                "url": {
                  "raw": "https://{{api.box.com}}/2.0/webhooks/:webhook_id",
                  "protocol": "https",
                  "host": [
                    "{{api.box.com}}"
                  ],
                  "path": [
                    "2.0",
                    "webhooks",
                    ":webhook_id"
                  ],
                  "variable": [
                    {
                      "id": "b371e28e-3a6f-4fbb-8b5c-f9dfa03799da",
                      "key": "webhook_id",
                      "value": "3321123",
                      "type": "string",
                      "description": "The ID of the webhook."
                    }
                  ]
                },
                "description": "Deletes a webhook.\n\nhttps://developer.box.com/en/reference/delete-webhooks-id"
              },
              "status": "Forbidden",
              "code": 403,
              "_postman_previewlanguage": "Text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n  \"type\": \"error\",\n  \"status\": 400,\n  \"code\": \"item_name_invalid\",\n  \"help_url\": \"http://developers.box.com/docs/#errors\",\n  \"message\": \"Method Not Allowed\",\n  \"request_id\": \"abcdef123456\"\n}"
            }
          ]
        }
      ],
      "_postman_id": "486c9676-3445-48bc-af33-72079b6ba8e9"
    }
  ],
  "auth": {
    "type": "oauth2",
    "oauth2": {
      "accessToken": "{{access_token}}",
      "tokenType": "bearer",
      "addTokenTo": "header"
    }
  },
  "variable": [
    {
      "id": "08c70e5f-4b4f-40ba-aee7-50648e2807b7",
      "key": "account.box.com",
      "value": "account.box.com",
      "type": "string"
    },
    {
      "id": "86bbb813-91b7-413e-bc85-967b0e0e67d5",
      "key": "api.box.com",
      "value": "api.box.com",
      "type": "string"
    },
    {
      "id": "6a892f63-ff7d-48c2-8016-09367128d8ee",
      "key": "upload.box.com",
      "value": "upload.box.com",
      "type": "string"
    }
  ]
}